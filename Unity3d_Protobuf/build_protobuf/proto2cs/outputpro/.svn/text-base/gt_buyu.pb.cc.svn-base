// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gt_buyu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gt_buyu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gt_msg {

namespace {

const ::google::protobuf::Descriptor* Vec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColliderCircle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColliderCircle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPointClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPointClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* SinglePathClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SinglePathClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathGroupClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathGroupClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPointServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPointServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SinglePathServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SinglePathServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathGroupServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathGroupServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIBulletPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIBulletPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIBulletPathGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIBulletPathGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIBulletPathSets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIBulletPathSets_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathFileHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathFileHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductItemContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductItemContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductItemGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductItemGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishProductNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishProductNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishConfigList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishConfigList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishActionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishActionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishCollider_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishCollider_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishColliderGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishColliderGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MagicData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletExtern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletExtern_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstantData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstantData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreezeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreezeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastData_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinFreeRequestfish3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinFreeRequestfish3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinFreeResponsefish3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinFreeResponsefish3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishCoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneFishs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneFishs_reflection_ = NULL;
const ::google::protobuf::Descriptor* EstablishFishExternal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EstablishFishExternal_reflection_ = NULL;
const ::google::protobuf::Descriptor* EstablishFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EstablishFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatchFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* EstablishBulletRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EstablishBulletRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreezeFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreezeFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastEscape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastEscape_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishAppearNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishAppearNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CastSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsePropResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsePropResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NowAngerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NowAngerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletSpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletSpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeBatteryByMyself_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeBatteryByMyself_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeBatteryByOhter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeBatteryByOhter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceExitTableRequestfish3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceExitTableRequestfish3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceExitTableResponsefish3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceExitTableResponsefish3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskProgressResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskProgressResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskFinishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskFinishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeRedBagRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeRedBagRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeRedBagResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeRedBagResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRedBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRedBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTakeScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTakeScoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTakeScoreRespone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTakeScoreRespone_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeBountyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeBountyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeBountyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeBountyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBounty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBounty_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaoFenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoFenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaoFenTake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoFenTake_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaoFenReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoFenReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishInformationToAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishInformationToAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedFishAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedFishAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedFishDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedFishDisappear_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigFishAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigFishAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigFishDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigFishDisappear_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishGroupTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishGroupTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedPackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedPackFromServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPackFromServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedPackFromClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPackFromClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerEditOperateRusult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerEditOperateRusult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompetitionRusult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompetitionRusult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFishStoreScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFishStoreScore_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gt_5fbuyu_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_gt_5fbuyu_2eproto() {
  protobuf_AddDesc_gt_5fbuyu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gt_buyu.proto");
  GOOGLE_CHECK(file != NULL);
  Vec2_descriptor_ = file->message_type(0);
  static const int Vec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, y_),
  };
  Vec2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vec2_descriptor_,
      Vec2::default_instance_,
      Vec2_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vec2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _is_default_instance_));
  Vec3_descriptor_ = file->message_type(1);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, z_),
  };
  Vec3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vec3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _is_default_instance_));
  ColliderCircle_descriptor_ = file->message_type(2);
  static const int ColliderCircle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColliderCircle, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColliderCircle, radius_),
  };
  ColliderCircle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColliderCircle_descriptor_,
      ColliderCircle::default_instance_,
      ColliderCircle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColliderCircle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColliderCircle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColliderCircle, _is_default_instance_));
  Quate_descriptor_ = file->message_type(3);
  static const int Quate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quate, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quate, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quate, w_),
  };
  Quate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quate_descriptor_,
      Quate::default_instance_,
      Quate_offsets_,
      -1,
      -1,
      -1,
      sizeof(Quate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quate, _is_default_instance_));
  PathPointClient_descriptor_ = file->message_type(4);
  static const int PathPointClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointClient, point_),
  };
  PathPointClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPointClient_descriptor_,
      PathPointClient::default_instance_,
      PathPointClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathPointClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointClient, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointClient, _is_default_instance_));
  SinglePathClient_descriptor_ = file->message_type(5);
  static const int SinglePathClient_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, pathpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, copypathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, foldx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, foldy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, foldz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, speedscale_),
  };
  SinglePathClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SinglePathClient_descriptor_,
      SinglePathClient::default_instance_,
      SinglePathClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(SinglePathClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathClient, _is_default_instance_));
  PathGroupClient_descriptor_ = file->message_type(6);
  static const int PathGroupClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathGroupClient, pathlist_),
  };
  PathGroupClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathGroupClient_descriptor_,
      PathGroupClient::default_instance_,
      PathGroupClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathGroupClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathGroupClient, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathGroupClient, _is_default_instance_));
  ActionData_descriptor_ = file->message_type(7);
  static const int ActionData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, actionframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, playidleindex_),
  };
  ActionData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionData_descriptor_,
      ActionData::default_instance_,
      ActionData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ActionData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, _is_default_instance_));
  PathPointServer_descriptor_ = file->message_type(8);
  static const int PathPointServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointServer, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointServer, normalizedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointServer, normalizedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointServer, normalizedz_),
  };
  PathPointServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPointServer_descriptor_,
      PathPointServer::default_instance_,
      PathPointServer_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathPointServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointServer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointServer, _is_default_instance_));
  SinglePathServer_descriptor_ = file->message_type(9);
  static const int SinglePathServer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, pathpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, copypathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, foldx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, foldy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, foldz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, speedscale_),
  };
  SinglePathServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SinglePathServer_descriptor_,
      SinglePathServer::default_instance_,
      SinglePathServer_offsets_,
      -1,
      -1,
      -1,
      sizeof(SinglePathServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePathServer, _is_default_instance_));
  PathGroupServer_descriptor_ = file->message_type(10);
  static const int PathGroupServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathGroupServer, pathlist_),
  };
  PathGroupServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathGroupServer_descriptor_,
      PathGroupServer::default_instance_,
      PathGroupServer_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathGroupServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathGroupServer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathGroupServer, _is_default_instance_));
  AIBulletPath_descriptor_ = file->message_type(11);
  static const int AIBulletPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPath, pathpointlist_),
  };
  AIBulletPath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AIBulletPath_descriptor_,
      AIBulletPath::default_instance_,
      AIBulletPath_offsets_,
      -1,
      -1,
      -1,
      sizeof(AIBulletPath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPath, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPath, _is_default_instance_));
  AIBulletPathGroup_descriptor_ = file->message_type(12);
  static const int AIBulletPathGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPathGroup, pathlist_),
  };
  AIBulletPathGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AIBulletPathGroup_descriptor_,
      AIBulletPathGroup::default_instance_,
      AIBulletPathGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(AIBulletPathGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPathGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPathGroup, _is_default_instance_));
  AIBulletPathSets_descriptor_ = file->message_type(13);
  static const int AIBulletPathSets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPathSets, grouplist_),
  };
  AIBulletPathSets_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AIBulletPathSets_descriptor_,
      AIBulletPathSets::default_instance_,
      AIBulletPathSets_offsets_,
      -1,
      -1,
      -1,
      sizeof(AIBulletPathSets),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPathSets, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIBulletPathSets, _is_default_instance_));
  PathFileHead_descriptor_ = file->message_type(14);
  static const int PathFileHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathFileHead, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathFileHead, pathposinfo_),
  };
  PathFileHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathFileHead_descriptor_,
      PathFileHead::default_instance_,
      PathFileHead_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathFileHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathFileHead, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathFileHead, _is_default_instance_));
  PathPosInfo_descriptor_ = file->message_type(15);
  static const int PathPosInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPosInfo, pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPosInfo, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPosInfo, length_),
  };
  PathPosInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPosInfo_descriptor_,
      PathPosInfo::default_instance_,
      PathPosInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PathPosInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPosInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPosInfo, _is_default_instance_));
  MessageTimer_descriptor_ = file->message_type(16);
  static const int MessageTimer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTimer, passframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTimer, message_),
  };
  MessageTimer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageTimer_descriptor_,
      MessageTimer::default_instance_,
      MessageTimer_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageTimer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTimer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTimer, _is_default_instance_));
  ProductItemContent_descriptor_ = file->message_type(17);
  static const int ProductItemContent_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, productitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, combinepaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, entermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, leavemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, onlyone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, waituntilstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, waituntildone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, fastenoldfish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, fastenin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, foldx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, foldy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, foldz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, speedscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, deep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, messagelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, isyuzhen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, rootmessage_),
  };
  ProductItemContent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProductItemContent_descriptor_,
      ProductItemContent::default_instance_,
      ProductItemContent_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProductItemContent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemContent, _is_default_instance_));
  ProductItem_descriptor_ = file->message_type(18);
  static const int ProductItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItem, contentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItem, issync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItem, contentitems_),
  };
  ProductItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProductItem_descriptor_,
      ProductItem::default_instance_,
      ProductItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProductItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItem, _is_default_instance_));
  ProductItemGroup_descriptor_ = file->message_type(19);
  static const int ProductItemGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemGroup, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemGroup, mainenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemGroup, addfishenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemGroup, enableaddfish_),
  };
  ProductItemGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProductItemGroup_descriptor_,
      ProductItemGroup::default_instance_,
      ProductItemGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProductItemGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductItemGroup, _is_default_instance_));
  FishProductNode_descriptor_ = file->message_type(20);
  static const int FishProductNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, repeattime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, startframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, childs_),
  };
  FishProductNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishProductNode_descriptor_,
      FishProductNode::default_instance_,
      FishProductNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishProductNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishProductNode, _is_default_instance_));
  FishConfig_descriptor_ = file->message_type(21);
  static const int FishConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfig, raduis_),
  };
  FishConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishConfig_descriptor_,
      FishConfig::default_instance_,
      FishConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfig, _is_default_instance_));
  FishConfigList_descriptor_ = file->message_type(22);
  static const int FishConfigList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigList, fishconfigs_),
  };
  FishConfigList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishConfigList_descriptor_,
      FishConfigList::default_instance_,
      FishConfigList_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishConfigList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigList, _is_default_instance_));
  FishData_descriptor_ = file->message_type(23);
  static const int FishData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, fishname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, fishimportance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, fishmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, fishscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, fishdieeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, fishactiondatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, attackhight_),
  };
  FishData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishData_descriptor_,
      FishData::default_instance_,
      FishData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishData, _is_default_instance_));
  FishActionData_descriptor_ = file->message_type(24);
  static const int FishActionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishActionData, actionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishActionData, actionframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishActionData, isidle_),
  };
  FishActionData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishActionData_descriptor_,
      FishActionData::default_instance_,
      FishActionData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishActionData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishActionData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishActionData, _is_default_instance_));
  FishCollider_descriptor_ = file->message_type(25);
  static const int FishCollider_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCollider, fishname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCollider, zbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCollider, colliders_),
  };
  FishCollider_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishCollider_descriptor_,
      FishCollider::default_instance_,
      FishCollider_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishCollider),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCollider, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCollider, _is_default_instance_));
  FishColliderGroup_descriptor_ = file->message_type(26);
  static const int FishColliderGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishColliderGroup, colliderlist_),
  };
  FishColliderGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishColliderGroup_descriptor_,
      FishColliderGroup::default_instance_,
      FishColliderGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishColliderGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishColliderGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishColliderGroup, _is_default_instance_));
  BulletData_descriptor_ = file->message_type(27);
  static const int BulletData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, yuwangmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, turretmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, multiple_),
  };
  BulletData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulletData_descriptor_,
      BulletData::default_instance_,
      BulletData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BulletData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletData, _is_default_instance_));
  MagicData_descriptor_ = file->message_type(28);
  static const int MagicData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicData, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicData, multiple_),
  };
  MagicData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MagicData_descriptor_,
      MagicData::default_instance_,
      MagicData_offsets_,
      -1,
      -1,
      -1,
      sizeof(MagicData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicData, _is_default_instance_));
  PropData_descriptor_ = file->message_type(29);
  static const int PropData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, price_),
  };
  PropData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropData_descriptor_,
      PropData::default_instance_,
      PropData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PropData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, _is_default_instance_));
  BulletExtern_descriptor_ = file->message_type(30);
  static const int BulletExtern_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, turretid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, turretmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, bulletmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, netmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, soundindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, paokou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, skillmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, skillbg_),
  };
  BulletExtern_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulletExtern_descriptor_,
      BulletExtern::default_instance_,
      BulletExtern_offsets_,
      -1,
      -1,
      -1,
      sizeof(BulletExtern),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletExtern, _is_default_instance_));
  BulletConfig_descriptor_ = file->message_type(31);
  static const int BulletConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletConfig, bulletlist_),
  };
  BulletConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulletConfig_descriptor_,
      BulletConfig::default_instance_,
      BulletConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(BulletConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletConfig, _is_default_instance_));
  InstantData_descriptor_ = file->message_type(32);
  static const int InstantData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, discribe_),
  };
  InstantData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstantData_descriptor_,
      InstantData::default_instance_,
      InstantData_offsets_,
      -1,
      -1,
      -1,
      sizeof(InstantData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantData, _is_default_instance_));
  FreezeData_descriptor_ = file->message_type(33);
  static const int FreezeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeData, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeData, duration_),
  };
  FreezeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FreezeData_descriptor_,
      FreezeData::default_instance_,
      FreezeData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FreezeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeData, _is_default_instance_));
  FastData_descriptor_ = file->message_type(34);
  static const int FastData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastData, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastData, duration_),
  };
  FastData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FastData_descriptor_,
      FastData::default_instance_,
      FastData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FastData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastData, _is_default_instance_));
  JoinFreeRequestfish3d_descriptor_ = file->message_type(35);
  static const int JoinFreeRequestfish3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeRequestfish3d, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeRequestfish3d, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeRequestfish3d, seatid_),
  };
  JoinFreeRequestfish3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinFreeRequestfish3d_descriptor_,
      JoinFreeRequestfish3d::default_instance_,
      JoinFreeRequestfish3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(JoinFreeRequestfish3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeRequestfish3d, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeRequestfish3d, _is_default_instance_));
  JoinFreeResponsefish3d_descriptor_ = file->message_type(36);
  static const int JoinFreeResponsefish3d_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, nowframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, rootmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, scoreratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, bc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitiontimeall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitiontimeremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitionredpacksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitionbulletturretid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitionbulletconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitionbulletcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, competitionbulletremain_),
  };
  JoinFreeResponsefish3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinFreeResponsefish3d_descriptor_,
      JoinFreeResponsefish3d::default_instance_,
      JoinFreeResponsefish3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(JoinFreeResponsefish3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinFreeResponsefish3d, _is_default_instance_));
  GameConfig_descriptor_ = file->message_type(37);
  static const int GameConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, gunpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, turretpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, fishconfigs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, propconfigs_),
  };
  GameConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameConfig_descriptor_,
      GameConfig::default_instance_,
      GameConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, _is_default_instance_));
  CurrentFrame_descriptor_ = file->message_type(38);
  static const int CurrentFrame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentFrame, frame_),
  };
  CurrentFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurrentFrame_descriptor_,
      CurrentFrame::default_instance_,
      CurrentFrame_offsets_,
      -1,
      -1,
      -1,
      sizeof(CurrentFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentFrame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentFrame, _is_default_instance_));
  FishCoin_descriptor_ = file->message_type(39);
  static const int FishCoin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCoin, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCoin, scorenow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCoin, bulletremain_),
  };
  FishCoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishCoin_descriptor_,
      FishCoin::default_instance_,
      FishCoin_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishCoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCoin, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishCoin, _is_default_instance_));
  SceneFishs_descriptor_ = file->message_type(40);
  static const int SceneFishs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishs, fishs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishs, freeze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishs, fasts_),
  };
  SceneFishs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SceneFishs_descriptor_,
      SceneFishs::default_instance_,
      SceneFishs_offsets_,
      -1,
      -1,
      -1,
      sizeof(SceneFishs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneFishs, _is_default_instance_));
  EstablishFishExternal_descriptor_ = file->message_type(41);
  static const int EstablishFishExternal_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, fish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, onlyone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, waituntilstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, waituntildone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, rootmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, redbagscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, redbagtype_),
  };
  EstablishFishExternal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EstablishFishExternal_descriptor_,
      EstablishFishExternal::default_instance_,
      EstablishFishExternal_offsets_,
      -1,
      -1,
      -1,
      sizeof(EstablishFishExternal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFishExternal, _is_default_instance_));
  EstablishFish_descriptor_ = file->message_type(42);
  static const int EstablishFish_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, deep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, randomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, fastenoldfish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, fastenin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, foldx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, foldy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, foldz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, speedscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, entermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, leavemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, messagelist_),
  };
  EstablishFish_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EstablishFish_descriptor_,
      EstablishFish::default_instance_,
      EstablishFish_offsets_,
      -1,
      -1,
      -1,
      sizeof(EstablishFish),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishFish, _is_default_instance_));
  CatchFish_descriptor_ = file->message_type(43);
  static const int CatchFish_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, fish_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, link_fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, scorenow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, dietype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, redbagscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, redbagscoreall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, redbagresultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, redbagresultmessage_),
  };
  CatchFish_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CatchFish_descriptor_,
      CatchFish::default_instance_,
      CatchFish_offsets_,
      -1,
      -1,
      -1,
      sizeof(CatchFish),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchFish, _is_default_instance_));
  EstablishBulletRequest_descriptor_ = file->message_type(44);
  static const int EstablishBulletRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, lockfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, bullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, bulletturretid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, bulletconfigid_),
  };
  EstablishBulletRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EstablishBulletRequest_descriptor_,
      EstablishBulletRequest::default_instance_,
      EstablishBulletRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(EstablishBulletRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EstablishBulletRequest, _is_default_instance_));
  CreateBullet_descriptor_ = file->message_type(45);
  static const int CreateBullet_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, lockfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, bullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, scorenow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, bulletturretid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, bulletconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, bulletremain_),
  };
  CreateBullet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateBullet_descriptor_,
      CreateBullet::default_instance_,
      CreateBullet_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateBullet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBullet, _is_default_instance_));
  FreezeFish_descriptor_ = file->message_type(46);
  static const int FreezeFish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeFish, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeFish, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeFish, fishlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeFish, showeffect_),
  };
  FreezeFish_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FreezeFish_descriptor_,
      FreezeFish::default_instance_,
      FreezeFish_offsets_,
      -1,
      -1,
      -1,
      sizeof(FreezeFish),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeFish, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreezeFish, _is_default_instance_));
  FastEscape_descriptor_ = file->message_type(47);
  static const int FastEscape_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, fishlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, showeffect_),
  };
  FastEscape_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FastEscape_descriptor_,
      FastEscape::default_instance_,
      FastEscape_offsets_,
      -1,
      -1,
      -1,
      sizeof(FastEscape),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastEscape, _is_default_instance_));
  FishAppearNotify_descriptor_ = file->message_type(48);
  static const int FishAppearNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAppearNotify, name_),
  };
  FishAppearNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishAppearNotify_descriptor_,
      FishAppearNotify::default_instance_,
      FishAppearNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishAppearNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAppearNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAppearNotify, _is_default_instance_));
  CastSkillResponse_descriptor_ = file->message_type(49);
  static const int CastSkillResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkillResponse, skillconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkillResponse, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkillResponse, resultcode_),
  };
  CastSkillResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CastSkillResponse_descriptor_,
      CastSkillResponse::default_instance_,
      CastSkillResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CastSkillResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkillResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkillResponse, _is_default_instance_));
  UsePropResponse_descriptor_ = file->message_type(50);
  static const int UsePropResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePropResponse, propconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePropResponse, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePropResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePropResponse, discribe_),
  };
  UsePropResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UsePropResponse_descriptor_,
      UsePropResponse::default_instance_,
      UsePropResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UsePropResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePropResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePropResponse, _is_default_instance_));
  NowAngerResponse_descriptor_ = file->message_type(51);
  static const int NowAngerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowAngerResponse, angervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowAngerResponse, seatid_),
  };
  NowAngerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NowAngerResponse_descriptor_,
      NowAngerResponse::default_instance_,
      NowAngerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(NowAngerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowAngerResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NowAngerResponse, _is_default_instance_));
  BulletSpeedUp_descriptor_ = file->message_type(52);
  static const int BulletSpeedUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletSpeedUp, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletSpeedUp, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletSpeedUp, scale_),
  };
  BulletSpeedUp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulletSpeedUp_descriptor_,
      BulletSpeedUp::default_instance_,
      BulletSpeedUp_offsets_,
      -1,
      -1,
      -1,
      sizeof(BulletSpeedUp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletSpeedUp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletSpeedUp, _is_default_instance_));
  ChangeBatteryByMyself_descriptor_ = file->message_type(53);
  static const int ChangeBatteryByMyself_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByMyself, batteryindex_),
  };
  ChangeBatteryByMyself_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeBatteryByMyself_descriptor_,
      ChangeBatteryByMyself::default_instance_,
      ChangeBatteryByMyself_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangeBatteryByMyself),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByMyself, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByMyself, _is_default_instance_));
  ChangeBatteryByOhter_descriptor_ = file->message_type(54);
  static const int ChangeBatteryByOhter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByOhter, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByOhter, batteryindex_),
  };
  ChangeBatteryByOhter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeBatteryByOhter_descriptor_,
      ChangeBatteryByOhter::default_instance_,
      ChangeBatteryByOhter_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangeBatteryByOhter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByOhter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBatteryByOhter, _is_default_instance_));
  ForceExitTableRequestfish3d_descriptor_ = file->message_type(55);
  static const int ForceExitTableRequestfish3d_offsets_[1] = {
  };
  ForceExitTableRequestfish3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForceExitTableRequestfish3d_descriptor_,
      ForceExitTableRequestfish3d::default_instance_,
      ForceExitTableRequestfish3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(ForceExitTableRequestfish3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceExitTableRequestfish3d, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceExitTableRequestfish3d, _is_default_instance_));
  ForceExitTableResponsefish3d_descriptor_ = file->message_type(56);
  static const int ForceExitTableResponsefish3d_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceExitTableResponsefish3d, resultcode_),
  };
  ForceExitTableResponsefish3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForceExitTableResponsefish3d_descriptor_,
      ForceExitTableResponsefish3d::default_instance_,
      ForceExitTableResponsefish3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(ForceExitTableResponsefish3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceExitTableResponsefish3d, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceExitTableResponsefish3d, _is_default_instance_));
  NewTaskResponse_descriptor_ = file->message_type(57);
  static const int NewTaskResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTaskResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTaskResponse, fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTaskResponse, fishcount_),
  };
  NewTaskResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewTaskResponse_descriptor_,
      NewTaskResponse::default_instance_,
      NewTaskResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewTaskResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTaskResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTaskResponse, _is_default_instance_));
  TaskProgressResponse_descriptor_ = file->message_type(58);
  static const int TaskProgressResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProgressResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProgressResponse, fishcount_),
  };
  TaskProgressResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskProgressResponse_descriptor_,
      TaskProgressResponse::default_instance_,
      TaskProgressResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskProgressResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProgressResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskProgressResponse, _is_default_instance_));
  TaskFinishResponse_descriptor_ = file->message_type(59);
  static const int TaskFinishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishResponse, getscore_),
  };
  TaskFinishResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskFinishResponse_descriptor_,
      TaskFinishResponse::default_instance_,
      TaskFinishResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskFinishResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskFinishResponse, _is_default_instance_));
  TakeRedBagRequest_descriptor_ = file->message_type(60);
  static const int TakeRedBagRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagRequest, score_),
  };
  TakeRedBagRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeRedBagRequest_descriptor_,
      TakeRedBagRequest::default_instance_,
      TakeRedBagRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TakeRedBagRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagRequest, _is_default_instance_));
  TakeRedBagResponse_descriptor_ = file->message_type(61);
  static const int TakeRedBagResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagResponse, resultmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagResponse, redbagscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagResponse, ticket_),
  };
  TakeRedBagResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeRedBagResponse_descriptor_,
      TakeRedBagResponse::default_instance_,
      TakeRedBagResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TakeRedBagResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeRedBagResponse, _is_default_instance_));
  UpdateRedBag_descriptor_ = file->message_type(62);
  static const int UpdateRedBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRedBag, remainredbagscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRedBag, previousredbagscore_),
  };
  UpdateRedBag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateRedBag_descriptor_,
      UpdateRedBag::default_instance_,
      UpdateRedBag_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateRedBag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRedBag, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRedBag, _is_default_instance_));
  UserTakeScoreRequest_descriptor_ = file->message_type(63);
  static const int UserTakeScoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRequest, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRequest, password_),
  };
  UserTakeScoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserTakeScoreRequest_descriptor_,
      UserTakeScoreRequest::default_instance_,
      UserTakeScoreRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserTakeScoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRequest, _is_default_instance_));
  UserTakeScoreRespone_descriptor_ = file->message_type(64);
  static const int UserTakeScoreRespone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRespone, resultcode_),
  };
  UserTakeScoreRespone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserTakeScoreRespone_descriptor_,
      UserTakeScoreRespone::default_instance_,
      UserTakeScoreRespone_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserTakeScoreRespone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRespone, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTakeScoreRespone, _is_default_instance_));
  TakeBountyRequest_descriptor_ = file->message_type(65);
  static const int TakeBountyRequest_offsets_[1] = {
  };
  TakeBountyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeBountyRequest_descriptor_,
      TakeBountyRequest::default_instance_,
      TakeBountyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TakeBountyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyRequest, _is_default_instance_));
  TakeBountyResponse_descriptor_ = file->message_type(66);
  static const int TakeBountyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyResponse, resultmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyResponse, remaintime_),
  };
  TakeBountyResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeBountyResponse_descriptor_,
      TakeBountyResponse::default_instance_,
      TakeBountyResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TakeBountyResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBountyResponse, _is_default_instance_));
  SetBounty_descriptor_ = file->message_type(67);
  static const int SetBounty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBounty, bountyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBounty, bountytimeleft_),
  };
  SetBounty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetBounty_descriptor_,
      SetBounty::default_instance_,
      SetBounty_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetBounty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBounty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBounty, _is_default_instance_));
  BaoFenNotify_descriptor_ = file->message_type(68);
  static const int BaoFenNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenNotify, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenNotify, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenNotify, fisnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenNotify, reword_),
  };
  BaoFenNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaoFenNotify_descriptor_,
      BaoFenNotify::default_instance_,
      BaoFenNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaoFenNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenNotify, _is_default_instance_));
  BaoFenTake_descriptor_ = file->message_type(69);
  static const int BaoFenTake_offsets_[1] = {
  };
  BaoFenTake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaoFenTake_descriptor_,
      BaoFenTake::default_instance_,
      BaoFenTake_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaoFenTake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenTake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenTake, _is_default_instance_));
  BaoFenReward_descriptor_ = file->message_type(70);
  static const int BaoFenReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenReward, score_),
  };
  BaoFenReward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaoFenReward_descriptor_,
      BaoFenReward::default_instance_,
      BaoFenReward_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaoFenReward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenReward, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoFenReward, _is_default_instance_));
  FishInformationToAI_descriptor_ = file->message_type(71);
  static const int FishInformationToAI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInformationToAI, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInformationToAI, areasscore_),
  };
  FishInformationToAI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishInformationToAI_descriptor_,
      FishInformationToAI::default_instance_,
      FishInformationToAI_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishInformationToAI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInformationToAI, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInformationToAI, _is_default_instance_));
  RedFishAppear_descriptor_ = file->message_type(72);
  static const int RedFishAppear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFishAppear, fishid_),
  };
  RedFishAppear_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RedFishAppear_descriptor_,
      RedFishAppear::default_instance_,
      RedFishAppear_offsets_,
      -1,
      -1,
      -1,
      sizeof(RedFishAppear),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFishAppear, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFishAppear, _is_default_instance_));
  RedFishDisappear_descriptor_ = file->message_type(73);
  static const int RedFishDisappear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFishDisappear, fishid_),
  };
  RedFishDisappear_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RedFishDisappear_descriptor_,
      RedFishDisappear::default_instance_,
      RedFishDisappear_offsets_,
      -1,
      -1,
      -1,
      sizeof(RedFishDisappear),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFishDisappear, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFishDisappear, _is_default_instance_));
  BigFishAppear_descriptor_ = file->message_type(74);
  static const int BigFishAppear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishAppear, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishAppear, fishtype_),
  };
  BigFishAppear_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BigFishAppear_descriptor_,
      BigFishAppear::default_instance_,
      BigFishAppear_offsets_,
      -1,
      -1,
      -1,
      sizeof(BigFishAppear),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishAppear, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishAppear, _is_default_instance_));
  BigFishDisappear_descriptor_ = file->message_type(75);
  static const int BigFishDisappear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishDisappear, fishid_),
  };
  BigFishDisappear_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BigFishDisappear_descriptor_,
      BigFishDisappear::default_instance_,
      BigFishDisappear_offsets_,
      -1,
      -1,
      -1,
      sizeof(BigFishDisappear),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishDisappear, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigFishDisappear, _is_default_instance_));
  AIHeartBeat_descriptor_ = file->message_type(76);
  static const int AIHeartBeat_offsets_[1] = {
  };
  AIHeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AIHeartBeat_descriptor_,
      AIHeartBeat::default_instance_,
      AIHeartBeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(AIHeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIHeartBeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIHeartBeat, _is_default_instance_));
  FishTest_descriptor_ = file->message_type(77);
  static const int FishTest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishTest, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishTest, fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishTest, position_),
  };
  FishTest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishTest_descriptor_,
      FishTest::default_instance_,
      FishTest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishTest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishTest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishTest, _is_default_instance_));
  FishGroupTest_descriptor_ = file->message_type(78);
  static const int FishGroupTest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGroupTest, framenow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGroupTest, group_),
  };
  FishGroupTest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FishGroupTest_descriptor_,
      FishGroupTest::default_instance_,
      FishGroupTest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FishGroupTest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGroupTest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGroupTest, _is_default_instance_));
  RedPackRequest_descriptor_ = file->message_type(79);
  static const int RedPackRequest_offsets_[1] = {
  };
  RedPackRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RedPackRequest_descriptor_,
      RedPackRequest::default_instance_,
      RedPackRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RedPackRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackRequest, _is_default_instance_));
  RedPackFromServer_descriptor_ = file->message_type(80);
  static const int RedPackFromServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromServer, jsontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromServer, jsondata_),
  };
  RedPackFromServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RedPackFromServer_descriptor_,
      RedPackFromServer::default_instance_,
      RedPackFromServer_offsets_,
      -1,
      -1,
      -1,
      sizeof(RedPackFromServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromServer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromServer, _is_default_instance_));
  RedPackFromClient_descriptor_ = file->message_type(81);
  static const int RedPackFromClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromClient, jsondata_),
  };
  RedPackFromClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RedPackFromClient_descriptor_,
      RedPackFromClient::default_instance_,
      RedPackFromClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(RedPackFromClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromClient, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPackFromClient, _is_default_instance_));
  ServerEditOperateRusult_descriptor_ = file->message_type(82);
  static const int ServerEditOperateRusult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEditOperateRusult, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEditOperateRusult, resultmessge_),
  };
  ServerEditOperateRusult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerEditOperateRusult_descriptor_,
      ServerEditOperateRusult::default_instance_,
      ServerEditOperateRusult_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerEditOperateRusult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEditOperateRusult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerEditOperateRusult, _is_default_instance_));
  CompetitionRusult_descriptor_ = file->message_type(83);
  static const int CompetitionRusult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, resultmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, winscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, redpacksum_),
  };
  CompetitionRusult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompetitionRusult_descriptor_,
      CompetitionRusult::default_instance_,
      CompetitionRusult_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompetitionRusult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitionRusult, _is_default_instance_));
  AddFishStoreScore_descriptor_ = file->message_type(84);
  static const int AddFishStoreScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFishStoreScore, score_),
  };
  AddFishStoreScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFishStoreScore_descriptor_,
      AddFishStoreScore::default_instance_,
      AddFishStoreScore_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFishStoreScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFishStoreScore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFishStoreScore, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gt_5fbuyu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vec2_descriptor_, &Vec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColliderCircle_descriptor_, &ColliderCircle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quate_descriptor_, &Quate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPointClient_descriptor_, &PathPointClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SinglePathClient_descriptor_, &SinglePathClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathGroupClient_descriptor_, &PathGroupClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionData_descriptor_, &ActionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPointServer_descriptor_, &PathPointServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SinglePathServer_descriptor_, &SinglePathServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathGroupServer_descriptor_, &PathGroupServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AIBulletPath_descriptor_, &AIBulletPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AIBulletPathGroup_descriptor_, &AIBulletPathGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AIBulletPathSets_descriptor_, &AIBulletPathSets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathFileHead_descriptor_, &PathFileHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPosInfo_descriptor_, &PathPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageTimer_descriptor_, &MessageTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProductItemContent_descriptor_, &ProductItemContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProductItem_descriptor_, &ProductItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProductItemGroup_descriptor_, &ProductItemGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishProductNode_descriptor_, &FishProductNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishConfig_descriptor_, &FishConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishConfigList_descriptor_, &FishConfigList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishData_descriptor_, &FishData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishActionData_descriptor_, &FishActionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishCollider_descriptor_, &FishCollider::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishColliderGroup_descriptor_, &FishColliderGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulletData_descriptor_, &BulletData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MagicData_descriptor_, &MagicData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropData_descriptor_, &PropData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulletExtern_descriptor_, &BulletExtern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulletConfig_descriptor_, &BulletConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstantData_descriptor_, &InstantData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FreezeData_descriptor_, &FreezeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FastData_descriptor_, &FastData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinFreeRequestfish3d_descriptor_, &JoinFreeRequestfish3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinFreeResponsefish3d_descriptor_, &JoinFreeResponsefish3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameConfig_descriptor_, &GameConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurrentFrame_descriptor_, &CurrentFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishCoin_descriptor_, &FishCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SceneFishs_descriptor_, &SceneFishs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EstablishFishExternal_descriptor_, &EstablishFishExternal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EstablishFish_descriptor_, &EstablishFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CatchFish_descriptor_, &CatchFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EstablishBulletRequest_descriptor_, &EstablishBulletRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateBullet_descriptor_, &CreateBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FreezeFish_descriptor_, &FreezeFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FastEscape_descriptor_, &FastEscape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishAppearNotify_descriptor_, &FishAppearNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CastSkillResponse_descriptor_, &CastSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UsePropResponse_descriptor_, &UsePropResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NowAngerResponse_descriptor_, &NowAngerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulletSpeedUp_descriptor_, &BulletSpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeBatteryByMyself_descriptor_, &ChangeBatteryByMyself::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeBatteryByOhter_descriptor_, &ChangeBatteryByOhter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForceExitTableRequestfish3d_descriptor_, &ForceExitTableRequestfish3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForceExitTableResponsefish3d_descriptor_, &ForceExitTableResponsefish3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewTaskResponse_descriptor_, &NewTaskResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskProgressResponse_descriptor_, &TaskProgressResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskFinishResponse_descriptor_, &TaskFinishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeRedBagRequest_descriptor_, &TakeRedBagRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeRedBagResponse_descriptor_, &TakeRedBagResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateRedBag_descriptor_, &UpdateRedBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserTakeScoreRequest_descriptor_, &UserTakeScoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserTakeScoreRespone_descriptor_, &UserTakeScoreRespone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeBountyRequest_descriptor_, &TakeBountyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeBountyResponse_descriptor_, &TakeBountyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetBounty_descriptor_, &SetBounty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaoFenNotify_descriptor_, &BaoFenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaoFenTake_descriptor_, &BaoFenTake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaoFenReward_descriptor_, &BaoFenReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishInformationToAI_descriptor_, &FishInformationToAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RedFishAppear_descriptor_, &RedFishAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RedFishDisappear_descriptor_, &RedFishDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BigFishAppear_descriptor_, &BigFishAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BigFishDisappear_descriptor_, &BigFishDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AIHeartBeat_descriptor_, &AIHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishTest_descriptor_, &FishTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FishGroupTest_descriptor_, &FishGroupTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RedPackRequest_descriptor_, &RedPackRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RedPackFromServer_descriptor_, &RedPackFromServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RedPackFromClient_descriptor_, &RedPackFromClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerEditOperateRusult_descriptor_, &ServerEditOperateRusult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompetitionRusult_descriptor_, &CompetitionRusult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFishStoreScore_descriptor_, &AddFishStoreScore::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gt_5fbuyu_2eproto() {
  delete Vec2::default_instance_;
  delete Vec2_reflection_;
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete ColliderCircle::default_instance_;
  delete ColliderCircle_reflection_;
  delete Quate::default_instance_;
  delete Quate_reflection_;
  delete PathPointClient::default_instance_;
  delete PathPointClient_reflection_;
  delete SinglePathClient::default_instance_;
  delete SinglePathClient_reflection_;
  delete PathGroupClient::default_instance_;
  delete PathGroupClient_reflection_;
  delete ActionData::default_instance_;
  delete ActionData_reflection_;
  delete PathPointServer::default_instance_;
  delete PathPointServer_reflection_;
  delete SinglePathServer::default_instance_;
  delete SinglePathServer_reflection_;
  delete PathGroupServer::default_instance_;
  delete PathGroupServer_reflection_;
  delete AIBulletPath::default_instance_;
  delete AIBulletPath_reflection_;
  delete AIBulletPathGroup::default_instance_;
  delete AIBulletPathGroup_reflection_;
  delete AIBulletPathSets::default_instance_;
  delete AIBulletPathSets_reflection_;
  delete PathFileHead::default_instance_;
  delete PathFileHead_reflection_;
  delete PathPosInfo::default_instance_;
  delete PathPosInfo_reflection_;
  delete MessageTimer::default_instance_;
  delete MessageTimer_reflection_;
  delete ProductItemContent::default_instance_;
  delete ProductItemContent_reflection_;
  delete ProductItem::default_instance_;
  delete ProductItem_reflection_;
  delete ProductItemGroup::default_instance_;
  delete ProductItemGroup_reflection_;
  delete FishProductNode::default_instance_;
  delete FishProductNode_reflection_;
  delete FishConfig::default_instance_;
  delete FishConfig_reflection_;
  delete FishConfigList::default_instance_;
  delete FishConfigList_reflection_;
  delete FishData::default_instance_;
  delete FishData_reflection_;
  delete FishActionData::default_instance_;
  delete FishActionData_reflection_;
  delete FishCollider::default_instance_;
  delete FishCollider_reflection_;
  delete FishColliderGroup::default_instance_;
  delete FishColliderGroup_reflection_;
  delete BulletData::default_instance_;
  delete BulletData_reflection_;
  delete MagicData::default_instance_;
  delete MagicData_reflection_;
  delete PropData::default_instance_;
  delete PropData_reflection_;
  delete BulletExtern::default_instance_;
  delete BulletExtern_reflection_;
  delete BulletConfig::default_instance_;
  delete BulletConfig_reflection_;
  delete InstantData::default_instance_;
  delete InstantData_reflection_;
  delete FreezeData::default_instance_;
  delete FreezeData_reflection_;
  delete FastData::default_instance_;
  delete FastData_reflection_;
  delete JoinFreeRequestfish3d::default_instance_;
  delete JoinFreeRequestfish3d_reflection_;
  delete JoinFreeResponsefish3d::default_instance_;
  delete JoinFreeResponsefish3d_reflection_;
  delete GameConfig::default_instance_;
  delete GameConfig_reflection_;
  delete CurrentFrame::default_instance_;
  delete CurrentFrame_reflection_;
  delete FishCoin::default_instance_;
  delete FishCoin_reflection_;
  delete SceneFishs::default_instance_;
  delete SceneFishs_reflection_;
  delete EstablishFishExternal::default_instance_;
  delete EstablishFishExternal_reflection_;
  delete EstablishFish::default_instance_;
  delete EstablishFish_reflection_;
  delete CatchFish::default_instance_;
  delete CatchFish_reflection_;
  delete EstablishBulletRequest::default_instance_;
  delete EstablishBulletRequest_reflection_;
  delete CreateBullet::default_instance_;
  delete CreateBullet_reflection_;
  delete FreezeFish::default_instance_;
  delete FreezeFish_reflection_;
  delete FastEscape::default_instance_;
  delete FastEscape_reflection_;
  delete FishAppearNotify::default_instance_;
  delete FishAppearNotify_reflection_;
  delete CastSkillResponse::default_instance_;
  delete CastSkillResponse_reflection_;
  delete UsePropResponse::default_instance_;
  delete UsePropResponse_reflection_;
  delete NowAngerResponse::default_instance_;
  delete NowAngerResponse_reflection_;
  delete BulletSpeedUp::default_instance_;
  delete BulletSpeedUp_reflection_;
  delete ChangeBatteryByMyself::default_instance_;
  delete ChangeBatteryByMyself_reflection_;
  delete ChangeBatteryByOhter::default_instance_;
  delete ChangeBatteryByOhter_reflection_;
  delete ForceExitTableRequestfish3d::default_instance_;
  delete ForceExitTableRequestfish3d_reflection_;
  delete ForceExitTableResponsefish3d::default_instance_;
  delete ForceExitTableResponsefish3d_reflection_;
  delete NewTaskResponse::default_instance_;
  delete NewTaskResponse_reflection_;
  delete TaskProgressResponse::default_instance_;
  delete TaskProgressResponse_reflection_;
  delete TaskFinishResponse::default_instance_;
  delete TaskFinishResponse_reflection_;
  delete TakeRedBagRequest::default_instance_;
  delete TakeRedBagRequest_reflection_;
  delete TakeRedBagResponse::default_instance_;
  delete TakeRedBagResponse_reflection_;
  delete UpdateRedBag::default_instance_;
  delete UpdateRedBag_reflection_;
  delete UserTakeScoreRequest::default_instance_;
  delete UserTakeScoreRequest_reflection_;
  delete UserTakeScoreRespone::default_instance_;
  delete UserTakeScoreRespone_reflection_;
  delete TakeBountyRequest::default_instance_;
  delete TakeBountyRequest_reflection_;
  delete TakeBountyResponse::default_instance_;
  delete TakeBountyResponse_reflection_;
  delete SetBounty::default_instance_;
  delete SetBounty_reflection_;
  delete BaoFenNotify::default_instance_;
  delete BaoFenNotify_reflection_;
  delete BaoFenTake::default_instance_;
  delete BaoFenTake_reflection_;
  delete BaoFenReward::default_instance_;
  delete BaoFenReward_reflection_;
  delete FishInformationToAI::default_instance_;
  delete FishInformationToAI_reflection_;
  delete RedFishAppear::default_instance_;
  delete RedFishAppear_reflection_;
  delete RedFishDisappear::default_instance_;
  delete RedFishDisappear_reflection_;
  delete BigFishAppear::default_instance_;
  delete BigFishAppear_reflection_;
  delete BigFishDisappear::default_instance_;
  delete BigFishDisappear_reflection_;
  delete AIHeartBeat::default_instance_;
  delete AIHeartBeat_reflection_;
  delete FishTest::default_instance_;
  delete FishTest_reflection_;
  delete FishGroupTest::default_instance_;
  delete FishGroupTest_reflection_;
  delete RedPackRequest::default_instance_;
  delete RedPackRequest_reflection_;
  delete RedPackFromServer::default_instance_;
  delete RedPackFromServer_reflection_;
  delete RedPackFromClient::default_instance_;
  delete RedPackFromClient_reflection_;
  delete ServerEditOperateRusult::default_instance_;
  delete ServerEditOperateRusult_reflection_;
  delete CompetitionRusult::default_instance_;
  delete CompetitionRusult_reflection_;
  delete AddFishStoreScore::default_instance_;
  delete AddFishStoreScore_reflection_;
}

void protobuf_AddDesc_gt_5fbuyu_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_gt_5fbuyu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgt_buyu.proto\022\006gt_msg\"\034\n\004Vec2\022\t\n\001x\030\001 \001"
    "(\002\022\t\n\001y\030\002 \001(\002\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
    "\001(\002\022\t\n\001z\030\003 \001(\002\">\n\016ColliderCircle\022\034\n\006Offs"
    "et\030\001 \001(\0132\014.gt_msg.Vec3\022\016\n\006Radius\030\002 \001(\002\"3"
    "\n\005Quate\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
    "\022\t\n\001w\030\004 \001(\002\".\n\017PathPointClient\022\033\n\005point\030"
    "\001 \001(\0132\014.gt_msg.Vec3\"\356\001\n\020SinglePathClient"
    "\022\020\n\010pathName\030\001 \001(\t\022.\n\rpathPointList\030\002 \003("
    "\0132\027.gt_msg.PathPointClient\022#\n\007actions\030\003 "
    "\003(\0132\022.gt_msg.ActionData\022\024\n\014copyPathName\030"
    "\004 \001(\t\022\034\n\006offset\030\005 \001(\0132\014.gt_msg.Vec3\022\r\n\005f"
    "oldX\030\006 \001(\010\022\r\n\005foldY\030\007 \001(\010\022\r\n\005foldZ\030\010 \001(\010"
    "\022\022\n\nspeedScale\030\t \001(\002\"=\n\017PathGroupClient\022"
    "*\n\010pathList\030\001 \003(\0132\030.gt_msg.SinglePathCli"
    "ent\"8\n\nActionData\022\023\n\013actionFrame\030\001 \001(\005\022\025"
    "\n\rplayIdleIndex\030\002 \001(\005\"\227\001\n\017PathPointServe"
    "r\022\033\n\005point\030\001 \001(\0132\014.gt_msg.Vec3\022!\n\013normal"
    "izedX\030\002 \001(\0132\014.gt_msg.Vec3\022!\n\013normalizedY"
    "\030\003 \001(\0132\014.gt_msg.Vec3\022!\n\013normalizedZ\030\004 \001("
    "\0132\014.gt_msg.Vec3\"\356\001\n\020SinglePathServer\022\020\n\010"
    "pathName\030\001 \001(\t\022.\n\rpathPointList\030\002 \003(\0132\027."
    "gt_msg.PathPointServer\022#\n\007actions\030\003 \003(\0132"
    "\022.gt_msg.ActionData\022\024\n\014copyPathName\030\004 \001("
    "\t\022\034\n\006offset\030\005 \001(\0132\014.gt_msg.Vec3\022\r\n\005foldX"
    "\030\006 \001(\010\022\r\n\005foldY\030\007 \001(\010\022\r\n\005foldZ\030\010 \001(\010\022\022\n\n"
    "speedScale\030\t \001(\002\"=\n\017PathGroupServer\022*\n\010p"
    "athList\030\001 \003(\0132\030.gt_msg.SinglePathServer\""
    "3\n\014AIBulletPath\022#\n\rpathPointList\030\002 \003(\0132\014"
    ".gt_msg.Vec2\";\n\021AIBulletPathGroup\022&\n\010pat"
    "hList\030\002 \003(\0132\024.gt_msg.AIBulletPath\"@\n\020AIB"
    "ulletPathSets\022,\n\tgroupList\030\001 \003(\0132\031.gt_ms"
    "g.AIBulletPathGroup\"G\n\014PathFileHead\022\r\n\005c"
    "ount\030\001 \001(\005\022(\n\013pathPosInfo\030\002 \003(\0132\023.gt_msg"
    ".PathPosInfo\"A\n\013PathPosInfo\022\020\n\010pathName\030"
    "\001 \001(\t\022\020\n\010startPos\030\002 \001(\005\022\016\n\006length\030\003 \001(\005\""
    "2\n\014MessageTimer\022\021\n\tpassFrame\030\001 \001(\005\022\017\n\007me"
    "ssage\030\002 \001(\t\"\355\003\n\022ProductItemContent\022\030\n\020Pr"
    "oductItemIndex\030\001 \003(\005\022\r\n\005frame\030\002 \001(\005\022\020\n\010f"
    "ishType\030\003 \001(\t\022\024\n\014CombinePaths\030\004 \001(\010\022\"\n\005i"
    "tems\030\005 \003(\0132\023.gt_msg.ProductItem\022\024\n\014enter"
    "Message\030\006 \001(\t\022\024\n\014leaveMessage\030\007 \001(\t\022\017\n\007o"
    "nlyOne\030\010 \001(\010\022\026\n\016waitUntilStart\030\t \001(\010\022\025\n\r"
    "waitUntilDone\030\n \001(\010\022\025\n\rfastenOldFish\030\013 \001"
    "(\010\022\020\n\010fastenIn\030\014 \001(\010\022\016\n\006toward\030\r \001(\005\022\034\n\006"
    "offset\030\016 \001(\0132\014.gt_msg.Vec3\022\r\n\005foldX\030\017 \001("
    "\010\022\r\n\005foldY\030\020 \001(\010\022\r\n\005foldZ\030\021 \001(\010\022\022\n\nspeed"
    "Scale\030\022 \001(\002\022\014\n\004deep\030\023 \001(\005\022)\n\013messageList"
    "\030\024 \003(\0132\024.gt_msg.MessageTimer\022\020\n\010isYuZhen"
    "\030\025 \001(\010\022\023\n\013rootMessage\030\026 \001(\t\"r\n\013ProductIt"
    "em\022\023\n\013ContentName\030\001 \001(\t\022\016\n\006isSync\030\002 \001(\010\022"
    "\014\n\004time\030\003 \001(\005\0220\n\014contentItems\030\004 \003(\0132\032.gt"
    "_msg.ProductItemContent\"y\n\020ProductItemGr"
    "oup\022%\n\010itemList\030\001 \003(\0132\023.gt_msg.ProductIt"
    "em\022\021\n\tmainEnter\030\002 \001(\t\022\024\n\014AddFishEnter\030\003 "
    "\001(\t\022\025\n\rEnableAddFish\030\004 \001(\010\"\211\001\n\017FishProdu"
    "ctNode\022\023\n\013productName\030\001 \001(\t\022\022\n\nrepeatTim"
    "e\030\002 \001(\005\022\020\n\010fishType\030\003 \001(\t\022\022\n\nstartFrame\030"
    "\004 \001(\005\022\'\n\006childs\030\005 \003(\0132\027.gt_msg.FishProdu"
    "ctNode\"8\n\nFishConfig\022\014\n\004type\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\016\n\006raduis\030\003 \001(\002\"9\n\016FishConfigLi"
    "st\022\'\n\013fishConfigs\030\001 \003(\0132\022.gt_msg.FishCon"
    "fig\"\272\001\n\010FishData\022\020\n\010fishName\030\001 \001(\t\022\026\n\016fi"
    "shImportance\030\002 \001(\005\022\021\n\tfishModel\030\003 \001(\t\022\021\n"
    "\tFishScore\030\004 \003(\005\022\025\n\rfishDieEffect\030\005 \003(\t\022"
    "2\n\022fishActionDataList\030\006 \003(\0132\026.gt_msg.Fis"
    "hActionData\022\023\n\013AttackHight\030\007 \001(\002\"I\n\016Fish"
    "ActionData\022\022\n\nActionName\030\001 \001(\t\022\023\n\013Action"
    "Frame\030\002 \001(\005\022\016\n\006IsIdle\030\003 \001(\010\"Z\n\014FishColli"
    "der\022\020\n\010fishName\030\001 \001(\t\022\r\n\005zBase\030\002 \001(\005\022)\n\t"
    "colliders\030\003 \003(\0132\026.gt_msg.ColliderCircle\""
    "\?\n\021FishColliderGroup\022*\n\014colliderList\030\001 \003"
    "(\0132\024.gt_msg.FishCollider\"\210\001\n\nBulletData\022"
    "\020\n\010configID\030\001 \001(\005\022\r\n\005model\030\002 \001(\t\022\r\n\005spee"
    "d\030\003 \001(\005\022\016\n\006radius\030\004 \001(\002\022\023\n\013yuwangModel\030\005"
    " \001(\t\022\023\n\013turretModel\030\006 \001(\t\022\020\n\010multiple\030\007 "
    "\001(\005\">\n\tMagicData\022\020\n\010configID\030\001 \001(\005\022\r\n\005mo"
    "del\030\002 \001(\t\022\020\n\010multiple\030\007 \001(\005\"+\n\010PropData\022"
    "\020\n\010configID\030\001 \001(\005\022\r\n\005price\030\007 \001(\005\"\350\001\n\014Bul"
    "letExtern\022\020\n\010TurretID\030\001 \001(\005\022\023\n\013TurretMod"
    "el\030\002 \001(\t\022\020\n\010ConfigID\030\003 \001(\005\022\023\n\013BulletMode"
    "l\030\004 \001(\t\022\020\n\010NetModel\030\005 \001(\t\022\020\n\010Multiple\030\006 "
    "\001(\005\022\r\n\005Speed\030\007 \001(\005\022\016\n\006Radius\030\010 \001(\002\022\022\n\nSo"
    "undIndex\030\t \001(\005\022\016\n\006Paokou\030\n \001(\t\022\022\n\nSkillM"
    "odel\030\013 \001(\t\022\017\n\007Skillbg\030\014 \001(\t\"8\n\014BulletCon"
    "fig\022(\n\nbulletList\030\001 \003(\0132\024.gt_msg.BulletE"
    "xtern\"q\n\013InstantData\022\020\n\010configID\030\001 \001(\005\022\020"
    "\n\010multiple\030\002 \001(\005\022\r\n\005speed\030\003 \001(\005\022\r\n\005model"
    "\030\004 \001(\t\022\016\n\006effect\030\005 \001(\t\022\020\n\010discribe\030\006 \001(\t"
    "\"-\n\nFreezeData\022\r\n\005frame\030\001 \001(\005\022\020\n\010duratio"
    "n\030\002 \001(\005\":\n\010FastData\022\r\n\005frame\030\001 \001(\005\022\r\n\005sp"
    "eed\030\002 \001(\002\022\020\n\010Duration\030\003 \001(\005\"H\n\025JoinFreeR"
    "equestfish3d\022\016\n\006userId\030\001 \001(\t\022\017\n\007tableId\030"
    "\002 \001(\005\022\016\n\006seatId\030\003 \001(\005\"\326\002\n\026JoinFreeRespon"
    "sefish3d\022\020\n\010nowFrame\030\001 \001(\005\022\023\n\013rootMessag"
    "e\030\002 \003(\t\022\022\n\nScoreRatio\030\003 \001(\005\022 \n\002bc\030\004 \001(\0132"
    "\024.gt_msg.BulletConfig\022\032\n\022CompetitionTime"
    "All\030\013 \001(\005\022\035\n\025CompetitionTimeRemain\030\005 \001(\005"
    "\022\035\n\025CompetitionRedPackSum\030\006 \001(\005\022!\n\031Compe"
    "titionBulletTurretid\030\007 \001(\005\022!\n\031Competitio"
    "nBulletConfigId\030\010 \001(\005\022\036\n\026CompetitionBull"
    "etCount\030\t \001(\005\022\037\n\027CompetitionBulletRemain"
    "\030\n \001(\005\"\231\001\n\nGameConfig\022\034\n\006gunPos\030\001 \003(\0132\014."
    "gt_msg.Vec2\022\037\n\tturretPos\030\002 \003(\0132\014.gt_msg."
    "Vec2\022%\n\013fishConfigs\030\003 \003(\0132\020.gt_msg.FishD"
    "ata\022%\n\013propConfigs\030\006 \003(\0132\020.gt_msg.PropDa"
    "ta\"\035\n\014CurrentFrame\022\r\n\005frame\030\001 \001(\005\"B\n\010Fis"
    "hCoin\022\016\n\006seatId\030\001 \001(\005\022\020\n\010scoreNow\030\002 \001(\003\022"
    "\024\n\014bulletRemain\030\003 \001(\005\"w\n\nSceneFishs\022$\n\005f"
    "ishs\030\001 \001(\0132\025.gt_msg.EstablishFish\022\"\n\006fre"
    "eze\030\002 \003(\0132\022.gt_msg.FreezeData\022\037\n\005fasts\030\003"
    " \003(\0132\020.gt_msg.FastData\"\272\001\n\025EstablishFish"
    "External\022#\n\004fish\030\001 \001(\0132\025.gt_msg.Establis"
    "hFish\022\017\n\007OnlyOne\030\002 \001(\010\022\026\n\016WaitUntilStart"
    "\030\003 \001(\010\022\025\n\rWaitUntilDone\030\004 \001(\010\022\023\n\013RootMes"
    "sage\030\005 \001(\t\022\023\n\013RedBagScore\030\006 \001(\005\022\022\n\nRedBa"
    "gType\030\007 \001(\005\"\365\002\n\rEstablishFish\022\016\n\006fishId\030"
    "\001 \001(\005\022\020\n\010fishType\030\002 \001(\005\022\020\n\010pathName\030\003 \003("
    "\t\022\r\n\005frame\030\004 \001(\005\022\014\n\004deep\030\005 \001(\005\022\021\n\tskillT"
    "ype\030\006 \001(\005\022\021\n\trandomNum\030\007 \001(\005\022\025\n\rFastenOl"
    "dFish\030\010 \001(\010\022\020\n\010fastenIn\030\t \001(\010\022\016\n\006toward\030"
    "\n \001(\005\022\034\n\006offset\030\013 \001(\0132\014.gt_msg.Vec3\022\r\n\005f"
    "oldX\030\014 \001(\010\022\r\n\005foldY\030\r \001(\010\022\r\n\005foldZ\030\016 \001(\010"
    "\022\022\n\nspeedScale\030\017 \001(\002\022\024\n\014EnterMessage\030\020 \001"
    "(\t\022\024\n\014LeaveMessage\030\021 \001(\t\022)\n\013messageList\030"
    "\022 \003(\0132\024.gt_msg.MessageTimer\"\353\001\n\tCatchFis"
    "h\022\016\n\006seatId\030\001 \001(\005\022\016\n\006fishId\030\002 \001(\005\022\r\n\005fra"
    "me\030\003 \001(\005\022\022\n\nfish_score\030\004 \001(\003\022\024\n\014link_fis"
    "h_id\030\005 \001(\005\022\020\n\010scoreNow\030\006 \001(\003\022\017\n\007dieType\030"
    "\007 \001(\005\022\023\n\013redBagScore\030\010 \001(\005\022\026\n\016redBagScor"
    "eAll\030\t \001(\005\022\030\n\020redBagresultCode\030\n \001(\005\022\033\n\023"
    "redBagresultMessage\030\013 \001(\t\"\237\001\n\026EstablishB"
    "ulletRequest\022\r\n\005frame\030\001 \001(\005\022\022\n\nlockFishI"
    "d\030\002 \001(\005\022\036\n\010terminal\030\003 \001(\0132\014.gt_msg.Vec2\022"
    "\022\n\nbulletType\030\004 \001(\005\022\026\n\016bulletTurretID\030\005 "
    "\001(\005\022\026\n\016bulletConfigID\030\006 \001(\005\"\354\001\n\014CreateBu"
    "llet\022\016\n\006seatId\030\001 \001(\005\022\r\n\005speed\030\002 \001(\005\022\r\n\005f"
    "rame\030\003 \001(\005\022\036\n\010terminal\030\004 \001(\0132\014.gt_msg.Ve"
    "c2\022\022\n\nlockFishId\030\005 \001(\005\022\022\n\nbulletType\030\006 \001"
    "(\005\022\020\n\010scoreNow\030\007 \001(\003\022\026\n\016bulletTurretID\030\010"
    " \001(\005\022\026\n\016bulletConfigID\030\t \001(\005\022\016\n\006UserID\030\n"
    " \001(\005\022\024\n\014BulletRemain\030\013 \001(\005\"S\n\nFreezeFish"
    "\022\r\n\005frame\030\001 \001(\005\022\020\n\010duration\030\002 \001(\005\022\020\n\010fis"
    "hList\030\003 \003(\005\022\022\n\nshowEffect\030\004 \001(\010\"b\n\nFastE"
    "scape\022\r\n\005frame\030\001 \001(\005\022\r\n\005speed\030\002 \001(\002\022\020\n\010d"
    "uration\030\003 \001(\005\022\020\n\010fishList\030\004 \003(\005\022\022\n\nshowE"
    "ffect\030\005 \001(\010\" \n\020FishAppearNotify\022\014\n\004name\030"
    "\001 \001(\t\"N\n\021CastSkillResponse\022\025\n\rskillConfi"
    "gID\030\001 \001(\005\022\016\n\006seatId\030\002 \001(\005\022\022\n\nresultCode\030"
    "\003 \001(\005\"]\n\017UsePropResponse\022\024\n\014propConfigID"
    "\030\001 \001(\005\022\016\n\006seatId\030\002 \001(\005\022\022\n\nresultCode\030\003 \001"
    "(\005\022\020\n\010discribe\030\004 \001(\t\"6\n\020NowAngerResponse"
    "\022\022\n\nangerValue\030\001 \001(\005\022\016\n\006seatId\030\002 \001(\005\"\?\n\r"
    "BulletSpeedUp\022\r\n\005frame\030\001 \001(\005\022\020\n\010duration"
    "\030\002 \001(\005\022\r\n\005scale\030\003 \001(\002\"-\n\025ChangeBatteryBy"
    "Myself\022\024\n\014batteryIndex\030\002 \001(\005\"<\n\024ChangeBa"
    "tteryByOhter\022\016\n\006seatId\030\001 \001(\005\022\024\n\014batteryI"
    "ndex\030\002 \001(\005\"\035\n\033ForceExitTableRequestfish3"
    "d\"2\n\034ForceExitTableResponsefish3d\022\022\n\nres"
    "ultCode\030\001 \001(\005\"F\n\017NewTaskResponse\022\016\n\006task"
    "Id\030\001 \001(\005\022\020\n\010fishType\030\002 \001(\005\022\021\n\tfishCount\030"
    "\003 \001(\005\"9\n\024TaskProgressResponse\022\016\n\006taskId\030"
    "\001 \001(\005\022\021\n\tfishCount\030\002 \001(\005\"6\n\022TaskFinishRe"
    "sponse\022\016\n\006taskId\030\001 \001(\005\022\020\n\010getScore\030\002 \001(\003"
    "\"\"\n\021TakeRedBagRequest\022\r\n\005Score\030\001 \001(\005\"d\n\022"
    "TakeRedBagResponse\022\022\n\nresultCode\030\001 \001(\005\022\025"
    "\n\rresultMessage\030\002 \001(\t\022\023\n\013RedBagScore\030\003 \001"
    "(\005\022\016\n\006Ticket\030\004 \001(\t\"F\n\014UpdateRedBag\022\031\n\021Re"
    "mainRedBagScore\030\001 \001(\005\022\033\n\023PreviousRedBagS"
    "core\030\002 \001(\005\"7\n\024UserTakeScoreRequest\022\r\n\005Sc"
    "ore\030\001 \001(\003\022\020\n\010PassWord\030\002 \001(\t\"*\n\024UserTakeS"
    "coreRespone\022\022\n\nresultCode\030\001 \001(\005\"\023\n\021TakeB"
    "ountyRequest\"b\n\022TakeBountyResponse\022\022\n\nre"
    "sultCode\030\001 \001(\005\022\025\n\rresultMessage\030\002 \001(\t\022\r\n"
    "\005Score\030\003 \001(\003\022\022\n\nRemainTime\030\004 \001(\005\"8\n\tSetB"
    "ounty\022\023\n\013BountyIndex\030\001 \001(\005\022\026\n\016BountyTime"
    "Left\030\002 \001(\005\"Q\n\014BaoFenNotify\022\r\n\005Score\030\001 \001("
    "\003\022\020\n\010Multiple\030\002 \001(\005\022\020\n\010FisnName\030\003 \001(\t\022\016\n"
    "\006Reword\030\004 \001(\005\"\014\n\nBaoFenTake\"\035\n\014BaoFenRew"
    "ard\022\r\n\005Score\030\001 \001(\003\"8\n\023FishInformationToA"
    "I\022\r\n\005Frame\030\001 \001(\005\022\022\n\nAreasScore\030\002 \003(\005\"\037\n\r"
    "RedFishAppear\022\016\n\006fishId\030\001 \001(\005\"\"\n\020RedFish"
    "Disappear\022\016\n\006fishId\030\001 \001(\005\"1\n\rBigFishAppe"
    "ar\022\016\n\006fishId\030\001 \001(\005\022\020\n\010fishType\030\002 \001(\005\"\"\n\020"
    "BigFishDisappear\022\016\n\006fishId\030\001 \001(\005\"\r\n\013AIHe"
    "artBeat\"L\n\010FishTest\022\016\n\006fishId\030\001 \001(\005\022\020\n\010f"
    "ishType\030\002 \001(\005\022\036\n\010position\030\003 \001(\0132\014.gt_msg"
    ".Vec2\"B\n\rFishGroupTest\022\020\n\010frameNow\030\001 \001(\005"
    "\022\037\n\005group\030\002 \003(\0132\020.gt_msg.FishTest\"\020\n\016Red"
    "PackRequest\"7\n\021RedPackFromServer\022\020\n\010json"
    "Type\030\001 \001(\005\022\020\n\010jsonData\030\002 \001(\t\"%\n\021RedPackF"
    "romClient\022\020\n\010jsonData\030\001 \001(\t\"C\n\027ServerEdi"
    "tOperateRusult\022\022\n\nresultCode\030\001 \001(\005\022\024\n\014re"
    "sultMessge\030\002 \001(\t\"t\n\021CompetitionRusult\022\022\n"
    "\nresultCode\030\001 \001(\005\022\025\n\rresultMessage\030\002 \001(\t"
    "\022\016\n\006Winner\030\003 \001(\005\022\020\n\010WinScore\030\004 \001(\003\022\022\n\nRe"
    "dpackSum\030\005 \001(\005\"\"\n\021AddFishStoreScore\022\r\n\005s"
    "core\030\001 \001(\003b\006proto3", 7858);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gt_buyu.proto", &protobuf_RegisterTypes);
  Vec2::default_instance_ = new Vec2();
  Vec3::default_instance_ = new Vec3();
  ColliderCircle::default_instance_ = new ColliderCircle();
  Quate::default_instance_ = new Quate();
  PathPointClient::default_instance_ = new PathPointClient();
  SinglePathClient::default_instance_ = new SinglePathClient();
  PathGroupClient::default_instance_ = new PathGroupClient();
  ActionData::default_instance_ = new ActionData();
  PathPointServer::default_instance_ = new PathPointServer();
  SinglePathServer::default_instance_ = new SinglePathServer();
  PathGroupServer::default_instance_ = new PathGroupServer();
  AIBulletPath::default_instance_ = new AIBulletPath();
  AIBulletPathGroup::default_instance_ = new AIBulletPathGroup();
  AIBulletPathSets::default_instance_ = new AIBulletPathSets();
  PathFileHead::default_instance_ = new PathFileHead();
  PathPosInfo::default_instance_ = new PathPosInfo();
  MessageTimer::default_instance_ = new MessageTimer();
  ProductItemContent::default_instance_ = new ProductItemContent();
  ProductItem::default_instance_ = new ProductItem();
  ProductItemGroup::default_instance_ = new ProductItemGroup();
  FishProductNode::default_instance_ = new FishProductNode();
  FishConfig::default_instance_ = new FishConfig();
  FishConfigList::default_instance_ = new FishConfigList();
  FishData::default_instance_ = new FishData();
  FishActionData::default_instance_ = new FishActionData();
  FishCollider::default_instance_ = new FishCollider();
  FishColliderGroup::default_instance_ = new FishColliderGroup();
  BulletData::default_instance_ = new BulletData();
  MagicData::default_instance_ = new MagicData();
  PropData::default_instance_ = new PropData();
  BulletExtern::default_instance_ = new BulletExtern();
  BulletConfig::default_instance_ = new BulletConfig();
  InstantData::default_instance_ = new InstantData();
  FreezeData::default_instance_ = new FreezeData();
  FastData::default_instance_ = new FastData();
  JoinFreeRequestfish3d::default_instance_ = new JoinFreeRequestfish3d();
  JoinFreeResponsefish3d::default_instance_ = new JoinFreeResponsefish3d();
  GameConfig::default_instance_ = new GameConfig();
  CurrentFrame::default_instance_ = new CurrentFrame();
  FishCoin::default_instance_ = new FishCoin();
  SceneFishs::default_instance_ = new SceneFishs();
  EstablishFishExternal::default_instance_ = new EstablishFishExternal();
  EstablishFish::default_instance_ = new EstablishFish();
  CatchFish::default_instance_ = new CatchFish();
  EstablishBulletRequest::default_instance_ = new EstablishBulletRequest();
  CreateBullet::default_instance_ = new CreateBullet();
  FreezeFish::default_instance_ = new FreezeFish();
  FastEscape::default_instance_ = new FastEscape();
  FishAppearNotify::default_instance_ = new FishAppearNotify();
  CastSkillResponse::default_instance_ = new CastSkillResponse();
  UsePropResponse::default_instance_ = new UsePropResponse();
  NowAngerResponse::default_instance_ = new NowAngerResponse();
  BulletSpeedUp::default_instance_ = new BulletSpeedUp();
  ChangeBatteryByMyself::default_instance_ = new ChangeBatteryByMyself();
  ChangeBatteryByOhter::default_instance_ = new ChangeBatteryByOhter();
  ForceExitTableRequestfish3d::default_instance_ = new ForceExitTableRequestfish3d();
  ForceExitTableResponsefish3d::default_instance_ = new ForceExitTableResponsefish3d();
  NewTaskResponse::default_instance_ = new NewTaskResponse();
  TaskProgressResponse::default_instance_ = new TaskProgressResponse();
  TaskFinishResponse::default_instance_ = new TaskFinishResponse();
  TakeRedBagRequest::default_instance_ = new TakeRedBagRequest();
  TakeRedBagResponse::default_instance_ = new TakeRedBagResponse();
  UpdateRedBag::default_instance_ = new UpdateRedBag();
  UserTakeScoreRequest::default_instance_ = new UserTakeScoreRequest();
  UserTakeScoreRespone::default_instance_ = new UserTakeScoreRespone();
  TakeBountyRequest::default_instance_ = new TakeBountyRequest();
  TakeBountyResponse::default_instance_ = new TakeBountyResponse();
  SetBounty::default_instance_ = new SetBounty();
  BaoFenNotify::default_instance_ = new BaoFenNotify();
  BaoFenTake::default_instance_ = new BaoFenTake();
  BaoFenReward::default_instance_ = new BaoFenReward();
  FishInformationToAI::default_instance_ = new FishInformationToAI();
  RedFishAppear::default_instance_ = new RedFishAppear();
  RedFishDisappear::default_instance_ = new RedFishDisappear();
  BigFishAppear::default_instance_ = new BigFishAppear();
  BigFishDisappear::default_instance_ = new BigFishDisappear();
  AIHeartBeat::default_instance_ = new AIHeartBeat();
  FishTest::default_instance_ = new FishTest();
  FishGroupTest::default_instance_ = new FishGroupTest();
  RedPackRequest::default_instance_ = new RedPackRequest();
  RedPackFromServer::default_instance_ = new RedPackFromServer();
  RedPackFromClient::default_instance_ = new RedPackFromClient();
  ServerEditOperateRusult::default_instance_ = new ServerEditOperateRusult();
  CompetitionRusult::default_instance_ = new CompetitionRusult();
  AddFishStoreScore::default_instance_ = new AddFishStoreScore();
  Vec2::default_instance_->InitAsDefaultInstance();
  Vec3::default_instance_->InitAsDefaultInstance();
  ColliderCircle::default_instance_->InitAsDefaultInstance();
  Quate::default_instance_->InitAsDefaultInstance();
  PathPointClient::default_instance_->InitAsDefaultInstance();
  SinglePathClient::default_instance_->InitAsDefaultInstance();
  PathGroupClient::default_instance_->InitAsDefaultInstance();
  ActionData::default_instance_->InitAsDefaultInstance();
  PathPointServer::default_instance_->InitAsDefaultInstance();
  SinglePathServer::default_instance_->InitAsDefaultInstance();
  PathGroupServer::default_instance_->InitAsDefaultInstance();
  AIBulletPath::default_instance_->InitAsDefaultInstance();
  AIBulletPathGroup::default_instance_->InitAsDefaultInstance();
  AIBulletPathSets::default_instance_->InitAsDefaultInstance();
  PathFileHead::default_instance_->InitAsDefaultInstance();
  PathPosInfo::default_instance_->InitAsDefaultInstance();
  MessageTimer::default_instance_->InitAsDefaultInstance();
  ProductItemContent::default_instance_->InitAsDefaultInstance();
  ProductItem::default_instance_->InitAsDefaultInstance();
  ProductItemGroup::default_instance_->InitAsDefaultInstance();
  FishProductNode::default_instance_->InitAsDefaultInstance();
  FishConfig::default_instance_->InitAsDefaultInstance();
  FishConfigList::default_instance_->InitAsDefaultInstance();
  FishData::default_instance_->InitAsDefaultInstance();
  FishActionData::default_instance_->InitAsDefaultInstance();
  FishCollider::default_instance_->InitAsDefaultInstance();
  FishColliderGroup::default_instance_->InitAsDefaultInstance();
  BulletData::default_instance_->InitAsDefaultInstance();
  MagicData::default_instance_->InitAsDefaultInstance();
  PropData::default_instance_->InitAsDefaultInstance();
  BulletExtern::default_instance_->InitAsDefaultInstance();
  BulletConfig::default_instance_->InitAsDefaultInstance();
  InstantData::default_instance_->InitAsDefaultInstance();
  FreezeData::default_instance_->InitAsDefaultInstance();
  FastData::default_instance_->InitAsDefaultInstance();
  JoinFreeRequestfish3d::default_instance_->InitAsDefaultInstance();
  JoinFreeResponsefish3d::default_instance_->InitAsDefaultInstance();
  GameConfig::default_instance_->InitAsDefaultInstance();
  CurrentFrame::default_instance_->InitAsDefaultInstance();
  FishCoin::default_instance_->InitAsDefaultInstance();
  SceneFishs::default_instance_->InitAsDefaultInstance();
  EstablishFishExternal::default_instance_->InitAsDefaultInstance();
  EstablishFish::default_instance_->InitAsDefaultInstance();
  CatchFish::default_instance_->InitAsDefaultInstance();
  EstablishBulletRequest::default_instance_->InitAsDefaultInstance();
  CreateBullet::default_instance_->InitAsDefaultInstance();
  FreezeFish::default_instance_->InitAsDefaultInstance();
  FastEscape::default_instance_->InitAsDefaultInstance();
  FishAppearNotify::default_instance_->InitAsDefaultInstance();
  CastSkillResponse::default_instance_->InitAsDefaultInstance();
  UsePropResponse::default_instance_->InitAsDefaultInstance();
  NowAngerResponse::default_instance_->InitAsDefaultInstance();
  BulletSpeedUp::default_instance_->InitAsDefaultInstance();
  ChangeBatteryByMyself::default_instance_->InitAsDefaultInstance();
  ChangeBatteryByOhter::default_instance_->InitAsDefaultInstance();
  ForceExitTableRequestfish3d::default_instance_->InitAsDefaultInstance();
  ForceExitTableResponsefish3d::default_instance_->InitAsDefaultInstance();
  NewTaskResponse::default_instance_->InitAsDefaultInstance();
  TaskProgressResponse::default_instance_->InitAsDefaultInstance();
  TaskFinishResponse::default_instance_->InitAsDefaultInstance();
  TakeRedBagRequest::default_instance_->InitAsDefaultInstance();
  TakeRedBagResponse::default_instance_->InitAsDefaultInstance();
  UpdateRedBag::default_instance_->InitAsDefaultInstance();
  UserTakeScoreRequest::default_instance_->InitAsDefaultInstance();
  UserTakeScoreRespone::default_instance_->InitAsDefaultInstance();
  TakeBountyRequest::default_instance_->InitAsDefaultInstance();
  TakeBountyResponse::default_instance_->InitAsDefaultInstance();
  SetBounty::default_instance_->InitAsDefaultInstance();
  BaoFenNotify::default_instance_->InitAsDefaultInstance();
  BaoFenTake::default_instance_->InitAsDefaultInstance();
  BaoFenReward::default_instance_->InitAsDefaultInstance();
  FishInformationToAI::default_instance_->InitAsDefaultInstance();
  RedFishAppear::default_instance_->InitAsDefaultInstance();
  RedFishDisappear::default_instance_->InitAsDefaultInstance();
  BigFishAppear::default_instance_->InitAsDefaultInstance();
  BigFishDisappear::default_instance_->InitAsDefaultInstance();
  AIHeartBeat::default_instance_->InitAsDefaultInstance();
  FishTest::default_instance_->InitAsDefaultInstance();
  FishGroupTest::default_instance_->InitAsDefaultInstance();
  RedPackRequest::default_instance_->InitAsDefaultInstance();
  RedPackFromServer::default_instance_->InitAsDefaultInstance();
  RedPackFromClient::default_instance_->InitAsDefaultInstance();
  ServerEditOperateRusult::default_instance_->InitAsDefaultInstance();
  CompetitionRusult::default_instance_->InitAsDefaultInstance();
  AddFishStoreScore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gt_5fbuyu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gt_5fbuyu_2eproto {
  StaticDescriptorInitializer_gt_5fbuyu_2eproto() {
    protobuf_AddDesc_gt_5fbuyu_2eproto();
  }
} static_descriptor_initializer_gt_5fbuyu_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec2::kXFieldNumber;
const int Vec2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec2::Vec2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.Vec2)
}

void Vec2::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vec2::Vec2(const Vec2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.Vec2)
}

void Vec2::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:gt_msg.Vec2)
  SharedDtor();
}

void Vec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec2_descriptor_;
}

const Vec2& Vec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

Vec2* Vec2::default_instance_ = NULL;

Vec2* Vec2::New(::google::protobuf::Arena* arena) const {
  Vec2* n = new Vec2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.Vec2)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vec2, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vec2*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.Vec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.Vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.Vec2)
  return false;
#undef DO_
}

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.Vec2)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.Vec2)
}

::google::protobuf::uint8* Vec2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.Vec2)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.Vec2)
  return target;
}

int Vec2::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.Vec2)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.Vec2)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vec2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.Vec2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.Vec2)
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.Vec2)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {

  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec2::InternalSwap(Vec2* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec2_descriptor_;
  metadata.reflection = Vec2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vec2

// optional float x = 1;
void Vec2::clear_x() {
  x_ = 0;
}
 float Vec2::x() const {
  // @@protoc_insertion_point(field_get:gt_msg.Vec2.x)
  return x_;
}
 void Vec2::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Vec2.x)
}

// optional float y = 2;
void Vec2::clear_y() {
  y_ = 0;
}
 float Vec2::y() const {
  // @@protoc_insertion_point(field_get:gt_msg.Vec2.y)
  return y_;
}
 void Vec2::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Vec2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.Vec3)
}

void Vec3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.Vec3)
}

void Vec3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:gt_msg.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New(::google::protobuf::Arena* arena) const {
  Vec3* n = new Vec3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.Vec3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vec3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vec3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.Vec3)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.Vec3)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.Vec3)
  return target;
}

int Vec3::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.Vec3)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.Vec3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vec3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.Vec3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {

  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vec3

// optional float x = 1;
void Vec3::clear_x() {
  x_ = 0;
}
 float Vec3::x() const {
  // @@protoc_insertion_point(field_get:gt_msg.Vec3.x)
  return x_;
}
 void Vec3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Vec3.x)
}

// optional float y = 2;
void Vec3::clear_y() {
  y_ = 0;
}
 float Vec3::y() const {
  // @@protoc_insertion_point(field_get:gt_msg.Vec3.y)
  return y_;
}
 void Vec3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Vec3.y)
}

// optional float z = 3;
void Vec3::clear_z() {
  z_ = 0;
}
 float Vec3::z() const {
  // @@protoc_insertion_point(field_get:gt_msg.Vec3.z)
  return z_;
}
 void Vec3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Vec3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColliderCircle::kOffsetFieldNumber;
const int ColliderCircle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColliderCircle::ColliderCircle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ColliderCircle)
}

void ColliderCircle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  offset_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

ColliderCircle::ColliderCircle(const ColliderCircle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ColliderCircle)
}

void ColliderCircle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  offset_ = NULL;
  radius_ = 0;
}

ColliderCircle::~ColliderCircle() {
  // @@protoc_insertion_point(destructor:gt_msg.ColliderCircle)
  SharedDtor();
}

void ColliderCircle::SharedDtor() {
  if (this != default_instance_) {
    delete offset_;
  }
}

void ColliderCircle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColliderCircle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColliderCircle_descriptor_;
}

const ColliderCircle& ColliderCircle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ColliderCircle* ColliderCircle::default_instance_ = NULL;

ColliderCircle* ColliderCircle::New(::google::protobuf::Arena* arena) const {
  ColliderCircle* n = new ColliderCircle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColliderCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ColliderCircle)
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
  radius_ = 0;
}

bool ColliderCircle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ColliderCircle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt_msg.Vec3 Offset = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Radius;
        break;
      }

      // optional float Radius = 2;
      case 2: {
        if (tag == 21) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ColliderCircle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ColliderCircle)
  return false;
#undef DO_
}

void ColliderCircle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ColliderCircle)
  // optional .gt_msg.Vec3 Offset = 1;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->offset_, output);
  }

  // optional float Radius = 2;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ColliderCircle)
}

::google::protobuf::uint8* ColliderCircle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ColliderCircle)
  // optional .gt_msg.Vec3 Offset = 1;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->offset_, false, target);
  }

  // optional float Radius = 2;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ColliderCircle)
  return target;
}

int ColliderCircle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ColliderCircle)
  int total_size = 0;

  // optional .gt_msg.Vec3 Offset = 1;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional float Radius = 2;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColliderCircle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ColliderCircle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ColliderCircle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColliderCircle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ColliderCircle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ColliderCircle)
    MergeFrom(*source);
  }
}

void ColliderCircle::MergeFrom(const ColliderCircle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ColliderCircle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_offset()) {
    mutable_offset()->::gt_msg::Vec3::MergeFrom(from.offset());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void ColliderCircle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ColliderCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColliderCircle::CopyFrom(const ColliderCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ColliderCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColliderCircle::IsInitialized() const {

  return true;
}

void ColliderCircle::Swap(ColliderCircle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColliderCircle::InternalSwap(ColliderCircle* other) {
  std::swap(offset_, other->offset_);
  std::swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColliderCircle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColliderCircle_descriptor_;
  metadata.reflection = ColliderCircle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColliderCircle

// optional .gt_msg.Vec3 Offset = 1;
bool ColliderCircle::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void ColliderCircle::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::gt_msg::Vec3& ColliderCircle::offset() const {
  // @@protoc_insertion_point(field_get:gt_msg.ColliderCircle.Offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::gt_msg::Vec3* ColliderCircle::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.ColliderCircle.Offset)
  return offset_;
}
::gt_msg::Vec3* ColliderCircle::release_offset() {
  // @@protoc_insertion_point(field_release:gt_msg.ColliderCircle.Offset)
  
  ::gt_msg::Vec3* temp = offset_;
  offset_ = NULL;
  return temp;
}
void ColliderCircle::set_allocated_offset(::gt_msg::Vec3* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ColliderCircle.Offset)
}

// optional float Radius = 2;
void ColliderCircle::clear_radius() {
  radius_ = 0;
}
 float ColliderCircle::radius() const {
  // @@protoc_insertion_point(field_get:gt_msg.ColliderCircle.Radius)
  return radius_;
}
 void ColliderCircle::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ColliderCircle.Radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quate::kXFieldNumber;
const int Quate::kYFieldNumber;
const int Quate::kZFieldNumber;
const int Quate::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quate::Quate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.Quate)
}

void Quate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Quate::Quate(const Quate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.Quate)
}

void Quate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
}

Quate::~Quate() {
  // @@protoc_insertion_point(destructor:gt_msg.Quate)
  SharedDtor();
}

void Quate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quate_descriptor_;
}

const Quate& Quate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

Quate* Quate::default_instance_ = NULL;

Quate* Quate::New(::google::protobuf::Arena* arena) const {
  Quate* n = new Quate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quate::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.Quate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Quate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Quate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Quate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.Quate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.Quate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.Quate)
  return false;
#undef DO_
}

void Quate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.Quate)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.Quate)
}

::google::protobuf::uint8* Quate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.Quate)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.Quate)
  return target;
}

int Quate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.Quate)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.Quate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Quate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Quate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.Quate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.Quate)
    MergeFrom(*source);
  }
}

void Quate::MergeFrom(const Quate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.Quate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.Quate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quate::CopyFrom(const Quate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.Quate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quate::IsInitialized() const {

  return true;
}

void Quate::Swap(Quate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quate::InternalSwap(Quate* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quate_descriptor_;
  metadata.reflection = Quate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quate

// optional float x = 1;
void Quate::clear_x() {
  x_ = 0;
}
 float Quate::x() const {
  // @@protoc_insertion_point(field_get:gt_msg.Quate.x)
  return x_;
}
 void Quate::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Quate.x)
}

// optional float y = 2;
void Quate::clear_y() {
  y_ = 0;
}
 float Quate::y() const {
  // @@protoc_insertion_point(field_get:gt_msg.Quate.y)
  return y_;
}
 void Quate::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Quate.y)
}

// optional float z = 3;
void Quate::clear_z() {
  z_ = 0;
}
 float Quate::z() const {
  // @@protoc_insertion_point(field_get:gt_msg.Quate.z)
  return z_;
}
 void Quate::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Quate.z)
}

// optional float w = 4;
void Quate::clear_w() {
  w_ = 0;
}
 float Quate::w() const {
  // @@protoc_insertion_point(field_get:gt_msg.Quate.w)
  return w_;
}
 void Quate::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.Quate.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointClient::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointClient::PathPointClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PathPointClient)
}

void PathPointClient::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  point_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

PathPointClient::PathPointClient(const PathPointClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PathPointClient)
}

void PathPointClient::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  point_ = NULL;
}

PathPointClient::~PathPointClient() {
  // @@protoc_insertion_point(destructor:gt_msg.PathPointClient)
  SharedDtor();
}

void PathPointClient::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void PathPointClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointClient_descriptor_;
}

const PathPointClient& PathPointClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PathPointClient* PathPointClient::default_instance_ = NULL;

PathPointClient* PathPointClient::New(::google::protobuf::Arena* arena) const {
  PathPointClient* n = new PathPointClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointClient::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PathPointClient)
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}

bool PathPointClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PathPointClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt_msg.Vec3 point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PathPointClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PathPointClient)
  return false;
#undef DO_
}

void PathPointClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PathPointClient)
  // optional .gt_msg.Vec3 point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PathPointClient)
}

::google::protobuf::uint8* PathPointClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PathPointClient)
  // optional .gt_msg.Vec3 point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PathPointClient)
  return target;
}

int PathPointClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PathPointClient)
  int total_size = 0;

  // optional .gt_msg.Vec3 point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PathPointClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPointClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PathPointClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PathPointClient)
    MergeFrom(*source);
  }
}

void PathPointClient::MergeFrom(const PathPointClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PathPointClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_point()) {
    mutable_point()->::gt_msg::Vec3::MergeFrom(from.point());
  }
}

void PathPointClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PathPointClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointClient::CopyFrom(const PathPointClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PathPointClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointClient::IsInitialized() const {

  return true;
}

void PathPointClient::Swap(PathPointClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointClient::InternalSwap(PathPointClient* other) {
  std::swap(point_, other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPointClient_descriptor_;
  metadata.reflection = PathPointClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPointClient

// optional .gt_msg.Vec3 point = 1;
bool PathPointClient::has_point() const {
  return !_is_default_instance_ && point_ != NULL;
}
void PathPointClient::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
const ::gt_msg::Vec3& PathPointClient::point() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPointClient.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
::gt_msg::Vec3* PathPointClient::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.PathPointClient.point)
  return point_;
}
::gt_msg::Vec3* PathPointClient::release_point() {
  // @@protoc_insertion_point(field_release:gt_msg.PathPointClient.point)
  
  ::gt_msg::Vec3* temp = point_;
  point_ = NULL;
  return temp;
}
void PathPointClient::set_allocated_point(::gt_msg::Vec3* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.PathPointClient.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinglePathClient::kPathNameFieldNumber;
const int SinglePathClient::kPathPointListFieldNumber;
const int SinglePathClient::kActionsFieldNumber;
const int SinglePathClient::kCopyPathNameFieldNumber;
const int SinglePathClient::kOffsetFieldNumber;
const int SinglePathClient::kFoldXFieldNumber;
const int SinglePathClient::kFoldYFieldNumber;
const int SinglePathClient::kFoldZFieldNumber;
const int SinglePathClient::kSpeedScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinglePathClient::SinglePathClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.SinglePathClient)
}

void SinglePathClient::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  offset_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

SinglePathClient::SinglePathClient(const SinglePathClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.SinglePathClient)
}

void SinglePathClient::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pathname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copypathname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = NULL;
  foldx_ = false;
  foldy_ = false;
  foldz_ = false;
  speedscale_ = 0;
}

SinglePathClient::~SinglePathClient() {
  // @@protoc_insertion_point(destructor:gt_msg.SinglePathClient)
  SharedDtor();
}

void SinglePathClient::SharedDtor() {
  pathname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copypathname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete offset_;
  }
}

void SinglePathClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SinglePathClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SinglePathClient_descriptor_;
}

const SinglePathClient& SinglePathClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

SinglePathClient* SinglePathClient::default_instance_ = NULL;

SinglePathClient* SinglePathClient::New(::google::protobuf::Arena* arena) const {
  SinglePathClient* n = new SinglePathClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SinglePathClient::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.SinglePathClient)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SinglePathClient, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SinglePathClient*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(foldx_, foldz_);
  pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copypathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
  speedscale_ = 0;

#undef ZR_HELPER_
#undef ZR_

  pathpointlist_.Clear();
  actions_.Clear();
}

bool SinglePathClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.SinglePathClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pathName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pathname().data(), this->pathname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.SinglePathClient.pathName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pathPointList;
        break;
      }

      // repeated .gt_msg.PathPointClient pathPointList = 2;
      case 2: {
        if (tag == 18) {
         parse_pathPointList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathPointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathpointlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pathPointList;
        if (input->ExpectTag(26)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gt_msg.ActionData actions = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_copyPathName;
        break;
      }

      // optional string copyPathName = 4;
      case 4: {
        if (tag == 34) {
         parse_copyPathName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copypathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->copypathname().data(), this->copypathname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.SinglePathClient.copyPathName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_offset;
        break;
      }

      // optional .gt_msg.Vec3 offset = 5;
      case 5: {
        if (tag == 42) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_foldX;
        break;
      }

      // optional bool foldX = 6;
      case 6: {
        if (tag == 48) {
         parse_foldX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_foldY;
        break;
      }

      // optional bool foldY = 7;
      case 7: {
        if (tag == 56) {
         parse_foldY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_foldZ;
        break;
      }

      // optional bool foldZ = 8;
      case 8: {
        if (tag == 64) {
         parse_foldZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_speedScale;
        break;
      }

      // optional float speedScale = 9;
      case 9: {
        if (tag == 77) {
         parse_speedScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.SinglePathClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.SinglePathClient)
  return false;
#undef DO_
}

void SinglePathClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.SinglePathClient)
  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathClient.pathName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pathname(), output);
  }

  // repeated .gt_msg.PathPointClient pathPointList = 2;
  for (unsigned int i = 0, n = this->pathpointlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathpointlist(i), output);
  }

  // repeated .gt_msg.ActionData actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(i), output);
  }

  // optional string copyPathName = 4;
  if (this->copypathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->copypathname().data(), this->copypathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathClient.copyPathName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->copypathname(), output);
  }

  // optional .gt_msg.Vec3 offset = 5;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->offset_, output);
  }

  // optional bool foldX = 6;
  if (this->foldx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->foldx(), output);
  }

  // optional bool foldY = 7;
  if (this->foldy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->foldy(), output);
  }

  // optional bool foldZ = 8;
  if (this->foldz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->foldz(), output);
  }

  // optional float speedScale = 9;
  if (this->speedscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->speedscale(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.SinglePathClient)
}

::google::protobuf::uint8* SinglePathClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.SinglePathClient)
  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathClient.pathName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pathname(), target);
  }

  // repeated .gt_msg.PathPointClient pathPointList = 2;
  for (unsigned int i = 0, n = this->pathpointlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pathpointlist(i), false, target);
  }

  // repeated .gt_msg.ActionData actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->actions(i), false, target);
  }

  // optional string copyPathName = 4;
  if (this->copypathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->copypathname().data(), this->copypathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathClient.copyPathName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->copypathname(), target);
  }

  // optional .gt_msg.Vec3 offset = 5;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->offset_, false, target);
  }

  // optional bool foldX = 6;
  if (this->foldx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->foldx(), target);
  }

  // optional bool foldY = 7;
  if (this->foldy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->foldy(), target);
  }

  // optional bool foldZ = 8;
  if (this->foldz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->foldz(), target);
  }

  // optional float speedScale = 9;
  if (this->speedscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->speedscale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.SinglePathClient)
  return target;
}

int SinglePathClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.SinglePathClient)
  int total_size = 0;

  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pathname());
  }

  // optional string copyPathName = 4;
  if (this->copypathname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->copypathname());
  }

  // optional .gt_msg.Vec3 offset = 5;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional bool foldX = 6;
  if (this->foldx() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldY = 7;
  if (this->foldy() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldZ = 8;
  if (this->foldz() != 0) {
    total_size += 1 + 1;
  }

  // optional float speedScale = 9;
  if (this->speedscale() != 0) {
    total_size += 1 + 4;
  }

  // repeated .gt_msg.PathPointClient pathPointList = 2;
  total_size += 1 * this->pathpointlist_size();
  for (int i = 0; i < this->pathpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathpointlist(i));
  }

  // repeated .gt_msg.ActionData actions = 3;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinglePathClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.SinglePathClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SinglePathClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SinglePathClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.SinglePathClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.SinglePathClient)
    MergeFrom(*source);
  }
}

void SinglePathClient::MergeFrom(const SinglePathClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.SinglePathClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathpointlist_.MergeFrom(from.pathpointlist_);
  actions_.MergeFrom(from.actions_);
  if (from.pathname().size() > 0) {

    pathname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
  if (from.copypathname().size() > 0) {

    copypathname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copypathname_);
  }
  if (from.has_offset()) {
    mutable_offset()->::gt_msg::Vec3::MergeFrom(from.offset());
  }
  if (from.foldx() != 0) {
    set_foldx(from.foldx());
  }
  if (from.foldy() != 0) {
    set_foldy(from.foldy());
  }
  if (from.foldz() != 0) {
    set_foldz(from.foldz());
  }
  if (from.speedscale() != 0) {
    set_speedscale(from.speedscale());
  }
}

void SinglePathClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.SinglePathClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePathClient::CopyFrom(const SinglePathClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.SinglePathClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePathClient::IsInitialized() const {

  return true;
}

void SinglePathClient::Swap(SinglePathClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinglePathClient::InternalSwap(SinglePathClient* other) {
  pathname_.Swap(&other->pathname_);
  pathpointlist_.UnsafeArenaSwap(&other->pathpointlist_);
  actions_.UnsafeArenaSwap(&other->actions_);
  copypathname_.Swap(&other->copypathname_);
  std::swap(offset_, other->offset_);
  std::swap(foldx_, other->foldx_);
  std::swap(foldy_, other->foldy_);
  std::swap(foldz_, other->foldz_);
  std::swap(speedscale_, other->speedscale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SinglePathClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SinglePathClient_descriptor_;
  metadata.reflection = SinglePathClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SinglePathClient

// optional string pathName = 1;
void SinglePathClient::clear_pathname() {
  pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SinglePathClient::pathname() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.pathName)
  return pathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathClient::set_pathname(const ::std::string& value) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathClient.pathName)
}
 void SinglePathClient::set_pathname(const char* value) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.SinglePathClient.pathName)
}
 void SinglePathClient::set_pathname(const char* value, size_t size) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.SinglePathClient.pathName)
}
 ::std::string* SinglePathClient::mutable_pathname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathClient.pathName)
  return pathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinglePathClient::release_pathname() {
  // @@protoc_insertion_point(field_release:gt_msg.SinglePathClient.pathName)
  
  return pathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathClient::set_allocated_pathname(::std::string* pathname) {
  if (pathname != NULL) {
    
  } else {
    
  }
  pathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pathname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SinglePathClient.pathName)
}

// repeated .gt_msg.PathPointClient pathPointList = 2;
int SinglePathClient::pathpointlist_size() const {
  return pathpointlist_.size();
}
void SinglePathClient::clear_pathpointlist() {
  pathpointlist_.Clear();
}
const ::gt_msg::PathPointClient& SinglePathClient::pathpointlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.pathPointList)
  return pathpointlist_.Get(index);
}
::gt_msg::PathPointClient* SinglePathClient::mutable_pathpointlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathClient.pathPointList)
  return pathpointlist_.Mutable(index);
}
::gt_msg::PathPointClient* SinglePathClient::add_pathpointlist() {
  // @@protoc_insertion_point(field_add:gt_msg.SinglePathClient.pathPointList)
  return pathpointlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::PathPointClient >*
SinglePathClient::mutable_pathpointlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.SinglePathClient.pathPointList)
  return &pathpointlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::PathPointClient >&
SinglePathClient::pathpointlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.SinglePathClient.pathPointList)
  return pathpointlist_;
}

// repeated .gt_msg.ActionData actions = 3;
int SinglePathClient::actions_size() const {
  return actions_.size();
}
void SinglePathClient::clear_actions() {
  actions_.Clear();
}
const ::gt_msg::ActionData& SinglePathClient::actions(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.actions)
  return actions_.Get(index);
}
::gt_msg::ActionData* SinglePathClient::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathClient.actions)
  return actions_.Mutable(index);
}
::gt_msg::ActionData* SinglePathClient::add_actions() {
  // @@protoc_insertion_point(field_add:gt_msg.SinglePathClient.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::ActionData >*
SinglePathClient::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.SinglePathClient.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::ActionData >&
SinglePathClient::actions() const {
  // @@protoc_insertion_point(field_list:gt_msg.SinglePathClient.actions)
  return actions_;
}

// optional string copyPathName = 4;
void SinglePathClient::clear_copypathname() {
  copypathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SinglePathClient::copypathname() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.copyPathName)
  return copypathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathClient::set_copypathname(const ::std::string& value) {
  
  copypathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathClient.copyPathName)
}
 void SinglePathClient::set_copypathname(const char* value) {
  
  copypathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.SinglePathClient.copyPathName)
}
 void SinglePathClient::set_copypathname(const char* value, size_t size) {
  
  copypathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.SinglePathClient.copyPathName)
}
 ::std::string* SinglePathClient::mutable_copypathname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathClient.copyPathName)
  return copypathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinglePathClient::release_copypathname() {
  // @@protoc_insertion_point(field_release:gt_msg.SinglePathClient.copyPathName)
  
  return copypathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathClient::set_allocated_copypathname(::std::string* copypathname) {
  if (copypathname != NULL) {
    
  } else {
    
  }
  copypathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copypathname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SinglePathClient.copyPathName)
}

// optional .gt_msg.Vec3 offset = 5;
bool SinglePathClient::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void SinglePathClient::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::gt_msg::Vec3& SinglePathClient::offset() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::gt_msg::Vec3* SinglePathClient::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathClient.offset)
  return offset_;
}
::gt_msg::Vec3* SinglePathClient::release_offset() {
  // @@protoc_insertion_point(field_release:gt_msg.SinglePathClient.offset)
  
  ::gt_msg::Vec3* temp = offset_;
  offset_ = NULL;
  return temp;
}
void SinglePathClient::set_allocated_offset(::gt_msg::Vec3* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SinglePathClient.offset)
}

// optional bool foldX = 6;
void SinglePathClient::clear_foldx() {
  foldx_ = false;
}
 bool SinglePathClient::foldx() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.foldX)
  return foldx_;
}
 void SinglePathClient::set_foldx(bool value) {
  
  foldx_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathClient.foldX)
}

// optional bool foldY = 7;
void SinglePathClient::clear_foldy() {
  foldy_ = false;
}
 bool SinglePathClient::foldy() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.foldY)
  return foldy_;
}
 void SinglePathClient::set_foldy(bool value) {
  
  foldy_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathClient.foldY)
}

// optional bool foldZ = 8;
void SinglePathClient::clear_foldz() {
  foldz_ = false;
}
 bool SinglePathClient::foldz() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.foldZ)
  return foldz_;
}
 void SinglePathClient::set_foldz(bool value) {
  
  foldz_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathClient.foldZ)
}

// optional float speedScale = 9;
void SinglePathClient::clear_speedscale() {
  speedscale_ = 0;
}
 float SinglePathClient::speedscale() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathClient.speedScale)
  return speedscale_;
}
 void SinglePathClient::set_speedscale(float value) {
  
  speedscale_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathClient.speedScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathGroupClient::kPathListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathGroupClient::PathGroupClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PathGroupClient)
}

void PathGroupClient::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PathGroupClient::PathGroupClient(const PathGroupClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PathGroupClient)
}

void PathGroupClient::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PathGroupClient::~PathGroupClient() {
  // @@protoc_insertion_point(destructor:gt_msg.PathGroupClient)
  SharedDtor();
}

void PathGroupClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathGroupClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathGroupClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathGroupClient_descriptor_;
}

const PathGroupClient& PathGroupClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PathGroupClient* PathGroupClient::default_instance_ = NULL;

PathGroupClient* PathGroupClient::New(::google::protobuf::Arena* arena) const {
  PathGroupClient* n = new PathGroupClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathGroupClient::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PathGroupClient)
  pathlist_.Clear();
}

bool PathGroupClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PathGroupClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.SinglePathClient pathList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pathList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PathGroupClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PathGroupClient)
  return false;
#undef DO_
}

void PathGroupClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PathGroupClient)
  // repeated .gt_msg.SinglePathClient pathList = 1;
  for (unsigned int i = 0, n = this->pathlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pathlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PathGroupClient)
}

::google::protobuf::uint8* PathGroupClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PathGroupClient)
  // repeated .gt_msg.SinglePathClient pathList = 1;
  for (unsigned int i = 0, n = this->pathlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pathlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PathGroupClient)
  return target;
}

int PathGroupClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PathGroupClient)
  int total_size = 0;

  // repeated .gt_msg.SinglePathClient pathList = 1;
  total_size += 1 * this->pathlist_size();
  for (int i = 0; i < this->pathlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathGroupClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PathGroupClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathGroupClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathGroupClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PathGroupClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PathGroupClient)
    MergeFrom(*source);
  }
}

void PathGroupClient::MergeFrom(const PathGroupClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PathGroupClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathlist_.MergeFrom(from.pathlist_);
}

void PathGroupClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PathGroupClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathGroupClient::CopyFrom(const PathGroupClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PathGroupClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathGroupClient::IsInitialized() const {

  return true;
}

void PathGroupClient::Swap(PathGroupClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathGroupClient::InternalSwap(PathGroupClient* other) {
  pathlist_.UnsafeArenaSwap(&other->pathlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathGroupClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathGroupClient_descriptor_;
  metadata.reflection = PathGroupClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathGroupClient

// repeated .gt_msg.SinglePathClient pathList = 1;
int PathGroupClient::pathlist_size() const {
  return pathlist_.size();
}
void PathGroupClient::clear_pathlist() {
  pathlist_.Clear();
}
const ::gt_msg::SinglePathClient& PathGroupClient::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.PathGroupClient.pathList)
  return pathlist_.Get(index);
}
::gt_msg::SinglePathClient* PathGroupClient::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.PathGroupClient.pathList)
  return pathlist_.Mutable(index);
}
::gt_msg::SinglePathClient* PathGroupClient::add_pathlist() {
  // @@protoc_insertion_point(field_add:gt_msg.PathGroupClient.pathList)
  return pathlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::SinglePathClient >*
PathGroupClient::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.PathGroupClient.pathList)
  return &pathlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::SinglePathClient >&
PathGroupClient::pathlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.PathGroupClient.pathList)
  return pathlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionData::kActionFrameFieldNumber;
const int ActionData::kPlayIdleIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionData::ActionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ActionData)
}

void ActionData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ActionData::ActionData(const ActionData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ActionData)
}

void ActionData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  actionframe_ = 0;
  playidleindex_ = 0;
}

ActionData::~ActionData() {
  // @@protoc_insertion_point(destructor:gt_msg.ActionData)
  SharedDtor();
}

void ActionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionData_descriptor_;
}

const ActionData& ActionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ActionData* ActionData::default_instance_ = NULL;

ActionData* ActionData::New(::google::protobuf::Arena* arena) const {
  ActionData* n = new ActionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ActionData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActionData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActionData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actionframe_, playidleindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool ActionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ActionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actionFrame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playIdleIndex;
        break;
      }

      // optional int32 playIdleIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_playIdleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playidleindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ActionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ActionData)
  return false;
#undef DO_
}

void ActionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ActionData)
  // optional int32 actionFrame = 1;
  if (this->actionframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actionframe(), output);
  }

  // optional int32 playIdleIndex = 2;
  if (this->playidleindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playidleindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ActionData)
}

::google::protobuf::uint8* ActionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ActionData)
  // optional int32 actionFrame = 1;
  if (this->actionframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actionframe(), target);
  }

  // optional int32 playIdleIndex = 2;
  if (this->playidleindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playidleindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ActionData)
  return target;
}

int ActionData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ActionData)
  int total_size = 0;

  // optional int32 actionFrame = 1;
  if (this->actionframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionframe());
  }

  // optional int32 playIdleIndex = 2;
  if (this->playidleindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playidleindex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ActionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ActionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ActionData)
    MergeFrom(*source);
  }
}

void ActionData::MergeFrom(const ActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ActionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.actionframe() != 0) {
    set_actionframe(from.actionframe());
  }
  if (from.playidleindex() != 0) {
    set_playidleindex(from.playidleindex());
  }
}

void ActionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionData::CopyFrom(const ActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionData::IsInitialized() const {

  return true;
}

void ActionData::Swap(ActionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionData::InternalSwap(ActionData* other) {
  std::swap(actionframe_, other->actionframe_);
  std::swap(playidleindex_, other->playidleindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionData_descriptor_;
  metadata.reflection = ActionData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionData

// optional int32 actionFrame = 1;
void ActionData::clear_actionframe() {
  actionframe_ = 0;
}
 ::google::protobuf::int32 ActionData::actionframe() const {
  // @@protoc_insertion_point(field_get:gt_msg.ActionData.actionFrame)
  return actionframe_;
}
 void ActionData::set_actionframe(::google::protobuf::int32 value) {
  
  actionframe_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ActionData.actionFrame)
}

// optional int32 playIdleIndex = 2;
void ActionData::clear_playidleindex() {
  playidleindex_ = 0;
}
 ::google::protobuf::int32 ActionData::playidleindex() const {
  // @@protoc_insertion_point(field_get:gt_msg.ActionData.playIdleIndex)
  return playidleindex_;
}
 void ActionData::set_playidleindex(::google::protobuf::int32 value) {
  
  playidleindex_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ActionData.playIdleIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointServer::kPointFieldNumber;
const int PathPointServer::kNormalizedXFieldNumber;
const int PathPointServer::kNormalizedYFieldNumber;
const int PathPointServer::kNormalizedZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointServer::PathPointServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PathPointServer)
}

void PathPointServer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  point_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
  normalizedx_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
  normalizedy_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
  normalizedz_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

PathPointServer::PathPointServer(const PathPointServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PathPointServer)
}

void PathPointServer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  point_ = NULL;
  normalizedx_ = NULL;
  normalizedy_ = NULL;
  normalizedz_ = NULL;
}

PathPointServer::~PathPointServer() {
  // @@protoc_insertion_point(destructor:gt_msg.PathPointServer)
  SharedDtor();
}

void PathPointServer::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
    delete normalizedx_;
    delete normalizedy_;
    delete normalizedz_;
  }
}

void PathPointServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPointServer_descriptor_;
}

const PathPointServer& PathPointServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PathPointServer* PathPointServer::default_instance_ = NULL;

PathPointServer* PathPointServer::New(::google::protobuf::Arena* arena) const {
  PathPointServer* n = new PathPointServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PathPointServer)
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
  if (GetArenaNoVirtual() == NULL && normalizedx_ != NULL) delete normalizedx_;
  normalizedx_ = NULL;
  if (GetArenaNoVirtual() == NULL && normalizedy_ != NULL) delete normalizedy_;
  normalizedy_ = NULL;
  if (GetArenaNoVirtual() == NULL && normalizedz_ != NULL) delete normalizedz_;
  normalizedz_ = NULL;
}

bool PathPointServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PathPointServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt_msg.Vec3 point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_normalizedX;
        break;
      }

      // optional .gt_msg.Vec3 normalizedX = 2;
      case 2: {
        if (tag == 18) {
         parse_normalizedX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalizedx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normalizedY;
        break;
      }

      // optional .gt_msg.Vec3 normalizedY = 3;
      case 3: {
        if (tag == 26) {
         parse_normalizedY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalizedy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normalizedZ;
        break;
      }

      // optional .gt_msg.Vec3 normalizedZ = 4;
      case 4: {
        if (tag == 34) {
         parse_normalizedZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalizedz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PathPointServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PathPointServer)
  return false;
#undef DO_
}

void PathPointServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PathPointServer)
  // optional .gt_msg.Vec3 point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // optional .gt_msg.Vec3 normalizedX = 2;
  if (this->has_normalizedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->normalizedx_, output);
  }

  // optional .gt_msg.Vec3 normalizedY = 3;
  if (this->has_normalizedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->normalizedy_, output);
  }

  // optional .gt_msg.Vec3 normalizedZ = 4;
  if (this->has_normalizedz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->normalizedz_, output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PathPointServer)
}

::google::protobuf::uint8* PathPointServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PathPointServer)
  // optional .gt_msg.Vec3 point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, false, target);
  }

  // optional .gt_msg.Vec3 normalizedX = 2;
  if (this->has_normalizedx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->normalizedx_, false, target);
  }

  // optional .gt_msg.Vec3 normalizedY = 3;
  if (this->has_normalizedy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->normalizedy_, false, target);
  }

  // optional .gt_msg.Vec3 normalizedZ = 4;
  if (this->has_normalizedz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->normalizedz_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PathPointServer)
  return target;
}

int PathPointServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PathPointServer)
  int total_size = 0;

  // optional .gt_msg.Vec3 point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  // optional .gt_msg.Vec3 normalizedX = 2;
  if (this->has_normalizedx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normalizedx_);
  }

  // optional .gt_msg.Vec3 normalizedY = 3;
  if (this->has_normalizedy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normalizedy_);
  }

  // optional .gt_msg.Vec3 normalizedZ = 4;
  if (this->has_normalizedz()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normalizedz_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PathPointServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPointServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PathPointServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PathPointServer)
    MergeFrom(*source);
  }
}

void PathPointServer::MergeFrom(const PathPointServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PathPointServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_point()) {
    mutable_point()->::gt_msg::Vec3::MergeFrom(from.point());
  }
  if (from.has_normalizedx()) {
    mutable_normalizedx()->::gt_msg::Vec3::MergeFrom(from.normalizedx());
  }
  if (from.has_normalizedy()) {
    mutable_normalizedy()->::gt_msg::Vec3::MergeFrom(from.normalizedy());
  }
  if (from.has_normalizedz()) {
    mutable_normalizedz()->::gt_msg::Vec3::MergeFrom(from.normalizedz());
  }
}

void PathPointServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PathPointServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointServer::CopyFrom(const PathPointServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PathPointServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointServer::IsInitialized() const {

  return true;
}

void PathPointServer::Swap(PathPointServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointServer::InternalSwap(PathPointServer* other) {
  std::swap(point_, other->point_);
  std::swap(normalizedx_, other->normalizedx_);
  std::swap(normalizedy_, other->normalizedy_);
  std::swap(normalizedz_, other->normalizedz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPointServer_descriptor_;
  metadata.reflection = PathPointServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPointServer

// optional .gt_msg.Vec3 point = 1;
bool PathPointServer::has_point() const {
  return !_is_default_instance_ && point_ != NULL;
}
void PathPointServer::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
const ::gt_msg::Vec3& PathPointServer::point() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPointServer.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
::gt_msg::Vec3* PathPointServer::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.PathPointServer.point)
  return point_;
}
::gt_msg::Vec3* PathPointServer::release_point() {
  // @@protoc_insertion_point(field_release:gt_msg.PathPointServer.point)
  
  ::gt_msg::Vec3* temp = point_;
  point_ = NULL;
  return temp;
}
void PathPointServer::set_allocated_point(::gt_msg::Vec3* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.PathPointServer.point)
}

// optional .gt_msg.Vec3 normalizedX = 2;
bool PathPointServer::has_normalizedx() const {
  return !_is_default_instance_ && normalizedx_ != NULL;
}
void PathPointServer::clear_normalizedx() {
  if (GetArenaNoVirtual() == NULL && normalizedx_ != NULL) delete normalizedx_;
  normalizedx_ = NULL;
}
const ::gt_msg::Vec3& PathPointServer::normalizedx() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPointServer.normalizedX)
  return normalizedx_ != NULL ? *normalizedx_ : *default_instance_->normalizedx_;
}
::gt_msg::Vec3* PathPointServer::mutable_normalizedx() {
  
  if (normalizedx_ == NULL) {
    normalizedx_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.PathPointServer.normalizedX)
  return normalizedx_;
}
::gt_msg::Vec3* PathPointServer::release_normalizedx() {
  // @@protoc_insertion_point(field_release:gt_msg.PathPointServer.normalizedX)
  
  ::gt_msg::Vec3* temp = normalizedx_;
  normalizedx_ = NULL;
  return temp;
}
void PathPointServer::set_allocated_normalizedx(::gt_msg::Vec3* normalizedx) {
  delete normalizedx_;
  normalizedx_ = normalizedx;
  if (normalizedx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.PathPointServer.normalizedX)
}

// optional .gt_msg.Vec3 normalizedY = 3;
bool PathPointServer::has_normalizedy() const {
  return !_is_default_instance_ && normalizedy_ != NULL;
}
void PathPointServer::clear_normalizedy() {
  if (GetArenaNoVirtual() == NULL && normalizedy_ != NULL) delete normalizedy_;
  normalizedy_ = NULL;
}
const ::gt_msg::Vec3& PathPointServer::normalizedy() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPointServer.normalizedY)
  return normalizedy_ != NULL ? *normalizedy_ : *default_instance_->normalizedy_;
}
::gt_msg::Vec3* PathPointServer::mutable_normalizedy() {
  
  if (normalizedy_ == NULL) {
    normalizedy_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.PathPointServer.normalizedY)
  return normalizedy_;
}
::gt_msg::Vec3* PathPointServer::release_normalizedy() {
  // @@protoc_insertion_point(field_release:gt_msg.PathPointServer.normalizedY)
  
  ::gt_msg::Vec3* temp = normalizedy_;
  normalizedy_ = NULL;
  return temp;
}
void PathPointServer::set_allocated_normalizedy(::gt_msg::Vec3* normalizedy) {
  delete normalizedy_;
  normalizedy_ = normalizedy;
  if (normalizedy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.PathPointServer.normalizedY)
}

// optional .gt_msg.Vec3 normalizedZ = 4;
bool PathPointServer::has_normalizedz() const {
  return !_is_default_instance_ && normalizedz_ != NULL;
}
void PathPointServer::clear_normalizedz() {
  if (GetArenaNoVirtual() == NULL && normalizedz_ != NULL) delete normalizedz_;
  normalizedz_ = NULL;
}
const ::gt_msg::Vec3& PathPointServer::normalizedz() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPointServer.normalizedZ)
  return normalizedz_ != NULL ? *normalizedz_ : *default_instance_->normalizedz_;
}
::gt_msg::Vec3* PathPointServer::mutable_normalizedz() {
  
  if (normalizedz_ == NULL) {
    normalizedz_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.PathPointServer.normalizedZ)
  return normalizedz_;
}
::gt_msg::Vec3* PathPointServer::release_normalizedz() {
  // @@protoc_insertion_point(field_release:gt_msg.PathPointServer.normalizedZ)
  
  ::gt_msg::Vec3* temp = normalizedz_;
  normalizedz_ = NULL;
  return temp;
}
void PathPointServer::set_allocated_normalizedz(::gt_msg::Vec3* normalizedz) {
  delete normalizedz_;
  normalizedz_ = normalizedz;
  if (normalizedz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.PathPointServer.normalizedZ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinglePathServer::kPathNameFieldNumber;
const int SinglePathServer::kPathPointListFieldNumber;
const int SinglePathServer::kActionsFieldNumber;
const int SinglePathServer::kCopyPathNameFieldNumber;
const int SinglePathServer::kOffsetFieldNumber;
const int SinglePathServer::kFoldXFieldNumber;
const int SinglePathServer::kFoldYFieldNumber;
const int SinglePathServer::kFoldZFieldNumber;
const int SinglePathServer::kSpeedScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinglePathServer::SinglePathServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.SinglePathServer)
}

void SinglePathServer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  offset_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

SinglePathServer::SinglePathServer(const SinglePathServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.SinglePathServer)
}

void SinglePathServer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pathname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copypathname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = NULL;
  foldx_ = false;
  foldy_ = false;
  foldz_ = false;
  speedscale_ = 0;
}

SinglePathServer::~SinglePathServer() {
  // @@protoc_insertion_point(destructor:gt_msg.SinglePathServer)
  SharedDtor();
}

void SinglePathServer::SharedDtor() {
  pathname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copypathname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete offset_;
  }
}

void SinglePathServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SinglePathServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SinglePathServer_descriptor_;
}

const SinglePathServer& SinglePathServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

SinglePathServer* SinglePathServer::default_instance_ = NULL;

SinglePathServer* SinglePathServer::New(::google::protobuf::Arena* arena) const {
  SinglePathServer* n = new SinglePathServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SinglePathServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.SinglePathServer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SinglePathServer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SinglePathServer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(foldx_, foldz_);
  pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copypathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
  speedscale_ = 0;

#undef ZR_HELPER_
#undef ZR_

  pathpointlist_.Clear();
  actions_.Clear();
}

bool SinglePathServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.SinglePathServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pathName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pathname().data(), this->pathname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.SinglePathServer.pathName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pathPointList;
        break;
      }

      // repeated .gt_msg.PathPointServer pathPointList = 2;
      case 2: {
        if (tag == 18) {
         parse_pathPointList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathPointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathpointlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pathPointList;
        if (input->ExpectTag(26)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gt_msg.ActionData actions = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_copyPathName;
        break;
      }

      // optional string copyPathName = 4;
      case 4: {
        if (tag == 34) {
         parse_copyPathName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copypathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->copypathname().data(), this->copypathname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.SinglePathServer.copyPathName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_offset;
        break;
      }

      // optional .gt_msg.Vec3 offset = 5;
      case 5: {
        if (tag == 42) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_foldX;
        break;
      }

      // optional bool foldX = 6;
      case 6: {
        if (tag == 48) {
         parse_foldX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_foldY;
        break;
      }

      // optional bool foldY = 7;
      case 7: {
        if (tag == 56) {
         parse_foldY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_foldZ;
        break;
      }

      // optional bool foldZ = 8;
      case 8: {
        if (tag == 64) {
         parse_foldZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_speedScale;
        break;
      }

      // optional float speedScale = 9;
      case 9: {
        if (tag == 77) {
         parse_speedScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.SinglePathServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.SinglePathServer)
  return false;
#undef DO_
}

void SinglePathServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.SinglePathServer)
  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathServer.pathName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pathname(), output);
  }

  // repeated .gt_msg.PathPointServer pathPointList = 2;
  for (unsigned int i = 0, n = this->pathpointlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathpointlist(i), output);
  }

  // repeated .gt_msg.ActionData actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(i), output);
  }

  // optional string copyPathName = 4;
  if (this->copypathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->copypathname().data(), this->copypathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathServer.copyPathName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->copypathname(), output);
  }

  // optional .gt_msg.Vec3 offset = 5;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->offset_, output);
  }

  // optional bool foldX = 6;
  if (this->foldx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->foldx(), output);
  }

  // optional bool foldY = 7;
  if (this->foldy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->foldy(), output);
  }

  // optional bool foldZ = 8;
  if (this->foldz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->foldz(), output);
  }

  // optional float speedScale = 9;
  if (this->speedscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->speedscale(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.SinglePathServer)
}

::google::protobuf::uint8* SinglePathServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.SinglePathServer)
  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathServer.pathName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pathname(), target);
  }

  // repeated .gt_msg.PathPointServer pathPointList = 2;
  for (unsigned int i = 0, n = this->pathpointlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pathpointlist(i), false, target);
  }

  // repeated .gt_msg.ActionData actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->actions(i), false, target);
  }

  // optional string copyPathName = 4;
  if (this->copypathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->copypathname().data(), this->copypathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.SinglePathServer.copyPathName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->copypathname(), target);
  }

  // optional .gt_msg.Vec3 offset = 5;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->offset_, false, target);
  }

  // optional bool foldX = 6;
  if (this->foldx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->foldx(), target);
  }

  // optional bool foldY = 7;
  if (this->foldy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->foldy(), target);
  }

  // optional bool foldZ = 8;
  if (this->foldz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->foldz(), target);
  }

  // optional float speedScale = 9;
  if (this->speedscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->speedscale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.SinglePathServer)
  return target;
}

int SinglePathServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.SinglePathServer)
  int total_size = 0;

  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pathname());
  }

  // optional string copyPathName = 4;
  if (this->copypathname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->copypathname());
  }

  // optional .gt_msg.Vec3 offset = 5;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional bool foldX = 6;
  if (this->foldx() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldY = 7;
  if (this->foldy() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldZ = 8;
  if (this->foldz() != 0) {
    total_size += 1 + 1;
  }

  // optional float speedScale = 9;
  if (this->speedscale() != 0) {
    total_size += 1 + 4;
  }

  // repeated .gt_msg.PathPointServer pathPointList = 2;
  total_size += 1 * this->pathpointlist_size();
  for (int i = 0; i < this->pathpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathpointlist(i));
  }

  // repeated .gt_msg.ActionData actions = 3;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinglePathServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.SinglePathServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SinglePathServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SinglePathServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.SinglePathServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.SinglePathServer)
    MergeFrom(*source);
  }
}

void SinglePathServer::MergeFrom(const SinglePathServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.SinglePathServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathpointlist_.MergeFrom(from.pathpointlist_);
  actions_.MergeFrom(from.actions_);
  if (from.pathname().size() > 0) {

    pathname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
  if (from.copypathname().size() > 0) {

    copypathname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copypathname_);
  }
  if (from.has_offset()) {
    mutable_offset()->::gt_msg::Vec3::MergeFrom(from.offset());
  }
  if (from.foldx() != 0) {
    set_foldx(from.foldx());
  }
  if (from.foldy() != 0) {
    set_foldy(from.foldy());
  }
  if (from.foldz() != 0) {
    set_foldz(from.foldz());
  }
  if (from.speedscale() != 0) {
    set_speedscale(from.speedscale());
  }
}

void SinglePathServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.SinglePathServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePathServer::CopyFrom(const SinglePathServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.SinglePathServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePathServer::IsInitialized() const {

  return true;
}

void SinglePathServer::Swap(SinglePathServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinglePathServer::InternalSwap(SinglePathServer* other) {
  pathname_.Swap(&other->pathname_);
  pathpointlist_.UnsafeArenaSwap(&other->pathpointlist_);
  actions_.UnsafeArenaSwap(&other->actions_);
  copypathname_.Swap(&other->copypathname_);
  std::swap(offset_, other->offset_);
  std::swap(foldx_, other->foldx_);
  std::swap(foldy_, other->foldy_);
  std::swap(foldz_, other->foldz_);
  std::swap(speedscale_, other->speedscale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SinglePathServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SinglePathServer_descriptor_;
  metadata.reflection = SinglePathServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SinglePathServer

// optional string pathName = 1;
void SinglePathServer::clear_pathname() {
  pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SinglePathServer::pathname() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.pathName)
  return pathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathServer::set_pathname(const ::std::string& value) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathServer.pathName)
}
 void SinglePathServer::set_pathname(const char* value) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.SinglePathServer.pathName)
}
 void SinglePathServer::set_pathname(const char* value, size_t size) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.SinglePathServer.pathName)
}
 ::std::string* SinglePathServer::mutable_pathname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathServer.pathName)
  return pathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinglePathServer::release_pathname() {
  // @@protoc_insertion_point(field_release:gt_msg.SinglePathServer.pathName)
  
  return pathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathServer::set_allocated_pathname(::std::string* pathname) {
  if (pathname != NULL) {
    
  } else {
    
  }
  pathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pathname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SinglePathServer.pathName)
}

// repeated .gt_msg.PathPointServer pathPointList = 2;
int SinglePathServer::pathpointlist_size() const {
  return pathpointlist_.size();
}
void SinglePathServer::clear_pathpointlist() {
  pathpointlist_.Clear();
}
const ::gt_msg::PathPointServer& SinglePathServer::pathpointlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.pathPointList)
  return pathpointlist_.Get(index);
}
::gt_msg::PathPointServer* SinglePathServer::mutable_pathpointlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathServer.pathPointList)
  return pathpointlist_.Mutable(index);
}
::gt_msg::PathPointServer* SinglePathServer::add_pathpointlist() {
  // @@protoc_insertion_point(field_add:gt_msg.SinglePathServer.pathPointList)
  return pathpointlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::PathPointServer >*
SinglePathServer::mutable_pathpointlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.SinglePathServer.pathPointList)
  return &pathpointlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::PathPointServer >&
SinglePathServer::pathpointlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.SinglePathServer.pathPointList)
  return pathpointlist_;
}

// repeated .gt_msg.ActionData actions = 3;
int SinglePathServer::actions_size() const {
  return actions_.size();
}
void SinglePathServer::clear_actions() {
  actions_.Clear();
}
const ::gt_msg::ActionData& SinglePathServer::actions(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.actions)
  return actions_.Get(index);
}
::gt_msg::ActionData* SinglePathServer::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathServer.actions)
  return actions_.Mutable(index);
}
::gt_msg::ActionData* SinglePathServer::add_actions() {
  // @@protoc_insertion_point(field_add:gt_msg.SinglePathServer.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::ActionData >*
SinglePathServer::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.SinglePathServer.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::ActionData >&
SinglePathServer::actions() const {
  // @@protoc_insertion_point(field_list:gt_msg.SinglePathServer.actions)
  return actions_;
}

// optional string copyPathName = 4;
void SinglePathServer::clear_copypathname() {
  copypathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SinglePathServer::copypathname() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.copyPathName)
  return copypathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathServer::set_copypathname(const ::std::string& value) {
  
  copypathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathServer.copyPathName)
}
 void SinglePathServer::set_copypathname(const char* value) {
  
  copypathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.SinglePathServer.copyPathName)
}
 void SinglePathServer::set_copypathname(const char* value, size_t size) {
  
  copypathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.SinglePathServer.copyPathName)
}
 ::std::string* SinglePathServer::mutable_copypathname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathServer.copyPathName)
  return copypathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SinglePathServer::release_copypathname() {
  // @@protoc_insertion_point(field_release:gt_msg.SinglePathServer.copyPathName)
  
  return copypathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SinglePathServer::set_allocated_copypathname(::std::string* copypathname) {
  if (copypathname != NULL) {
    
  } else {
    
  }
  copypathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copypathname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SinglePathServer.copyPathName)
}

// optional .gt_msg.Vec3 offset = 5;
bool SinglePathServer::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void SinglePathServer::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::gt_msg::Vec3& SinglePathServer::offset() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::gt_msg::Vec3* SinglePathServer::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.SinglePathServer.offset)
  return offset_;
}
::gt_msg::Vec3* SinglePathServer::release_offset() {
  // @@protoc_insertion_point(field_release:gt_msg.SinglePathServer.offset)
  
  ::gt_msg::Vec3* temp = offset_;
  offset_ = NULL;
  return temp;
}
void SinglePathServer::set_allocated_offset(::gt_msg::Vec3* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SinglePathServer.offset)
}

// optional bool foldX = 6;
void SinglePathServer::clear_foldx() {
  foldx_ = false;
}
 bool SinglePathServer::foldx() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.foldX)
  return foldx_;
}
 void SinglePathServer::set_foldx(bool value) {
  
  foldx_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathServer.foldX)
}

// optional bool foldY = 7;
void SinglePathServer::clear_foldy() {
  foldy_ = false;
}
 bool SinglePathServer::foldy() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.foldY)
  return foldy_;
}
 void SinglePathServer::set_foldy(bool value) {
  
  foldy_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathServer.foldY)
}

// optional bool foldZ = 8;
void SinglePathServer::clear_foldz() {
  foldz_ = false;
}
 bool SinglePathServer::foldz() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.foldZ)
  return foldz_;
}
 void SinglePathServer::set_foldz(bool value) {
  
  foldz_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathServer.foldZ)
}

// optional float speedScale = 9;
void SinglePathServer::clear_speedscale() {
  speedscale_ = 0;
}
 float SinglePathServer::speedscale() const {
  // @@protoc_insertion_point(field_get:gt_msg.SinglePathServer.speedScale)
  return speedscale_;
}
 void SinglePathServer::set_speedscale(float value) {
  
  speedscale_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SinglePathServer.speedScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathGroupServer::kPathListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathGroupServer::PathGroupServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PathGroupServer)
}

void PathGroupServer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PathGroupServer::PathGroupServer(const PathGroupServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PathGroupServer)
}

void PathGroupServer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PathGroupServer::~PathGroupServer() {
  // @@protoc_insertion_point(destructor:gt_msg.PathGroupServer)
  SharedDtor();
}

void PathGroupServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathGroupServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathGroupServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathGroupServer_descriptor_;
}

const PathGroupServer& PathGroupServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PathGroupServer* PathGroupServer::default_instance_ = NULL;

PathGroupServer* PathGroupServer::New(::google::protobuf::Arena* arena) const {
  PathGroupServer* n = new PathGroupServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathGroupServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PathGroupServer)
  pathlist_.Clear();
}

bool PathGroupServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PathGroupServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.SinglePathServer pathList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pathList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PathGroupServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PathGroupServer)
  return false;
#undef DO_
}

void PathGroupServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PathGroupServer)
  // repeated .gt_msg.SinglePathServer pathList = 1;
  for (unsigned int i = 0, n = this->pathlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pathlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PathGroupServer)
}

::google::protobuf::uint8* PathGroupServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PathGroupServer)
  // repeated .gt_msg.SinglePathServer pathList = 1;
  for (unsigned int i = 0, n = this->pathlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pathlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PathGroupServer)
  return target;
}

int PathGroupServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PathGroupServer)
  int total_size = 0;

  // repeated .gt_msg.SinglePathServer pathList = 1;
  total_size += 1 * this->pathlist_size();
  for (int i = 0; i < this->pathlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathGroupServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PathGroupServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathGroupServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathGroupServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PathGroupServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PathGroupServer)
    MergeFrom(*source);
  }
}

void PathGroupServer::MergeFrom(const PathGroupServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PathGroupServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathlist_.MergeFrom(from.pathlist_);
}

void PathGroupServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PathGroupServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathGroupServer::CopyFrom(const PathGroupServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PathGroupServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathGroupServer::IsInitialized() const {

  return true;
}

void PathGroupServer::Swap(PathGroupServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathGroupServer::InternalSwap(PathGroupServer* other) {
  pathlist_.UnsafeArenaSwap(&other->pathlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathGroupServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathGroupServer_descriptor_;
  metadata.reflection = PathGroupServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathGroupServer

// repeated .gt_msg.SinglePathServer pathList = 1;
int PathGroupServer::pathlist_size() const {
  return pathlist_.size();
}
void PathGroupServer::clear_pathlist() {
  pathlist_.Clear();
}
const ::gt_msg::SinglePathServer& PathGroupServer::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.PathGroupServer.pathList)
  return pathlist_.Get(index);
}
::gt_msg::SinglePathServer* PathGroupServer::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.PathGroupServer.pathList)
  return pathlist_.Mutable(index);
}
::gt_msg::SinglePathServer* PathGroupServer::add_pathlist() {
  // @@protoc_insertion_point(field_add:gt_msg.PathGroupServer.pathList)
  return pathlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::SinglePathServer >*
PathGroupServer::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.PathGroupServer.pathList)
  return &pathlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::SinglePathServer >&
PathGroupServer::pathlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.PathGroupServer.pathList)
  return pathlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIBulletPath::kPathPointListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIBulletPath::AIBulletPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.AIBulletPath)
}

void AIBulletPath::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AIBulletPath::AIBulletPath(const AIBulletPath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.AIBulletPath)
}

void AIBulletPath::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AIBulletPath::~AIBulletPath() {
  // @@protoc_insertion_point(destructor:gt_msg.AIBulletPath)
  SharedDtor();
}

void AIBulletPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIBulletPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIBulletPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIBulletPath_descriptor_;
}

const AIBulletPath& AIBulletPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

AIBulletPath* AIBulletPath::default_instance_ = NULL;

AIBulletPath* AIBulletPath::New(::google::protobuf::Arena* arena) const {
  AIBulletPath* n = new AIBulletPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIBulletPath::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.AIBulletPath)
  pathpointlist_.Clear();
}

bool AIBulletPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.AIBulletPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.Vec2 pathPointList = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathPointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathpointlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pathPointList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.AIBulletPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.AIBulletPath)
  return false;
#undef DO_
}

void AIBulletPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.AIBulletPath)
  // repeated .gt_msg.Vec2 pathPointList = 2;
  for (unsigned int i = 0, n = this->pathpointlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathpointlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.AIBulletPath)
}

::google::protobuf::uint8* AIBulletPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.AIBulletPath)
  // repeated .gt_msg.Vec2 pathPointList = 2;
  for (unsigned int i = 0, n = this->pathpointlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pathpointlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.AIBulletPath)
  return target;
}

int AIBulletPath::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.AIBulletPath)
  int total_size = 0;

  // repeated .gt_msg.Vec2 pathPointList = 2;
  total_size += 1 * this->pathpointlist_size();
  for (int i = 0; i < this->pathpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathpointlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIBulletPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.AIBulletPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AIBulletPath* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AIBulletPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.AIBulletPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.AIBulletPath)
    MergeFrom(*source);
  }
}

void AIBulletPath::MergeFrom(const AIBulletPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.AIBulletPath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathpointlist_.MergeFrom(from.pathpointlist_);
}

void AIBulletPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.AIBulletPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIBulletPath::CopyFrom(const AIBulletPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.AIBulletPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIBulletPath::IsInitialized() const {

  return true;
}

void AIBulletPath::Swap(AIBulletPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIBulletPath::InternalSwap(AIBulletPath* other) {
  pathpointlist_.UnsafeArenaSwap(&other->pathpointlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIBulletPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIBulletPath_descriptor_;
  metadata.reflection = AIBulletPath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIBulletPath

// repeated .gt_msg.Vec2 pathPointList = 2;
int AIBulletPath::pathpointlist_size() const {
  return pathpointlist_.size();
}
void AIBulletPath::clear_pathpointlist() {
  pathpointlist_.Clear();
}
const ::gt_msg::Vec2& AIBulletPath::pathpointlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.AIBulletPath.pathPointList)
  return pathpointlist_.Get(index);
}
::gt_msg::Vec2* AIBulletPath::mutable_pathpointlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.AIBulletPath.pathPointList)
  return pathpointlist_.Mutable(index);
}
::gt_msg::Vec2* AIBulletPath::add_pathpointlist() {
  // @@protoc_insertion_point(field_add:gt_msg.AIBulletPath.pathPointList)
  return pathpointlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::Vec2 >*
AIBulletPath::mutable_pathpointlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.AIBulletPath.pathPointList)
  return &pathpointlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::Vec2 >&
AIBulletPath::pathpointlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.AIBulletPath.pathPointList)
  return pathpointlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIBulletPathGroup::kPathListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIBulletPathGroup::AIBulletPathGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.AIBulletPathGroup)
}

void AIBulletPathGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AIBulletPathGroup::AIBulletPathGroup(const AIBulletPathGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.AIBulletPathGroup)
}

void AIBulletPathGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AIBulletPathGroup::~AIBulletPathGroup() {
  // @@protoc_insertion_point(destructor:gt_msg.AIBulletPathGroup)
  SharedDtor();
}

void AIBulletPathGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIBulletPathGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIBulletPathGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIBulletPathGroup_descriptor_;
}

const AIBulletPathGroup& AIBulletPathGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

AIBulletPathGroup* AIBulletPathGroup::default_instance_ = NULL;

AIBulletPathGroup* AIBulletPathGroup::New(::google::protobuf::Arena* arena) const {
  AIBulletPathGroup* n = new AIBulletPathGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIBulletPathGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.AIBulletPathGroup)
  pathlist_.Clear();
}

bool AIBulletPathGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.AIBulletPathGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.AIBulletPath pathList = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pathList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.AIBulletPathGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.AIBulletPathGroup)
  return false;
#undef DO_
}

void AIBulletPathGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.AIBulletPathGroup)
  // repeated .gt_msg.AIBulletPath pathList = 2;
  for (unsigned int i = 0, n = this->pathlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.AIBulletPathGroup)
}

::google::protobuf::uint8* AIBulletPathGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.AIBulletPathGroup)
  // repeated .gt_msg.AIBulletPath pathList = 2;
  for (unsigned int i = 0, n = this->pathlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pathlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.AIBulletPathGroup)
  return target;
}

int AIBulletPathGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.AIBulletPathGroup)
  int total_size = 0;

  // repeated .gt_msg.AIBulletPath pathList = 2;
  total_size += 1 * this->pathlist_size();
  for (int i = 0; i < this->pathlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIBulletPathGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.AIBulletPathGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AIBulletPathGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AIBulletPathGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.AIBulletPathGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.AIBulletPathGroup)
    MergeFrom(*source);
  }
}

void AIBulletPathGroup::MergeFrom(const AIBulletPathGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.AIBulletPathGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathlist_.MergeFrom(from.pathlist_);
}

void AIBulletPathGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.AIBulletPathGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIBulletPathGroup::CopyFrom(const AIBulletPathGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.AIBulletPathGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIBulletPathGroup::IsInitialized() const {

  return true;
}

void AIBulletPathGroup::Swap(AIBulletPathGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIBulletPathGroup::InternalSwap(AIBulletPathGroup* other) {
  pathlist_.UnsafeArenaSwap(&other->pathlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIBulletPathGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIBulletPathGroup_descriptor_;
  metadata.reflection = AIBulletPathGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIBulletPathGroup

// repeated .gt_msg.AIBulletPath pathList = 2;
int AIBulletPathGroup::pathlist_size() const {
  return pathlist_.size();
}
void AIBulletPathGroup::clear_pathlist() {
  pathlist_.Clear();
}
const ::gt_msg::AIBulletPath& AIBulletPathGroup::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.AIBulletPathGroup.pathList)
  return pathlist_.Get(index);
}
::gt_msg::AIBulletPath* AIBulletPathGroup::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.AIBulletPathGroup.pathList)
  return pathlist_.Mutable(index);
}
::gt_msg::AIBulletPath* AIBulletPathGroup::add_pathlist() {
  // @@protoc_insertion_point(field_add:gt_msg.AIBulletPathGroup.pathList)
  return pathlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::AIBulletPath >*
AIBulletPathGroup::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.AIBulletPathGroup.pathList)
  return &pathlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::AIBulletPath >&
AIBulletPathGroup::pathlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.AIBulletPathGroup.pathList)
  return pathlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIBulletPathSets::kGroupListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIBulletPathSets::AIBulletPathSets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.AIBulletPathSets)
}

void AIBulletPathSets::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AIBulletPathSets::AIBulletPathSets(const AIBulletPathSets& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.AIBulletPathSets)
}

void AIBulletPathSets::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AIBulletPathSets::~AIBulletPathSets() {
  // @@protoc_insertion_point(destructor:gt_msg.AIBulletPathSets)
  SharedDtor();
}

void AIBulletPathSets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIBulletPathSets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIBulletPathSets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIBulletPathSets_descriptor_;
}

const AIBulletPathSets& AIBulletPathSets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

AIBulletPathSets* AIBulletPathSets::default_instance_ = NULL;

AIBulletPathSets* AIBulletPathSets::New(::google::protobuf::Arena* arena) const {
  AIBulletPathSets* n = new AIBulletPathSets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIBulletPathSets::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.AIBulletPathSets)
  grouplist_.Clear();
}

bool AIBulletPathSets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.AIBulletPathSets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.AIBulletPathGroup groupList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_grouplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groupList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.AIBulletPathSets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.AIBulletPathSets)
  return false;
#undef DO_
}

void AIBulletPathSets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.AIBulletPathSets)
  // repeated .gt_msg.AIBulletPathGroup groupList = 1;
  for (unsigned int i = 0, n = this->grouplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grouplist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.AIBulletPathSets)
}

::google::protobuf::uint8* AIBulletPathSets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.AIBulletPathSets)
  // repeated .gt_msg.AIBulletPathGroup groupList = 1;
  for (unsigned int i = 0, n = this->grouplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->grouplist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.AIBulletPathSets)
  return target;
}

int AIBulletPathSets::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.AIBulletPathSets)
  int total_size = 0;

  // repeated .gt_msg.AIBulletPathGroup groupList = 1;
  total_size += 1 * this->grouplist_size();
  for (int i = 0; i < this->grouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grouplist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIBulletPathSets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.AIBulletPathSets)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AIBulletPathSets* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AIBulletPathSets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.AIBulletPathSets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.AIBulletPathSets)
    MergeFrom(*source);
  }
}

void AIBulletPathSets::MergeFrom(const AIBulletPathSets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.AIBulletPathSets)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  grouplist_.MergeFrom(from.grouplist_);
}

void AIBulletPathSets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.AIBulletPathSets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIBulletPathSets::CopyFrom(const AIBulletPathSets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.AIBulletPathSets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIBulletPathSets::IsInitialized() const {

  return true;
}

void AIBulletPathSets::Swap(AIBulletPathSets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIBulletPathSets::InternalSwap(AIBulletPathSets* other) {
  grouplist_.UnsafeArenaSwap(&other->grouplist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIBulletPathSets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIBulletPathSets_descriptor_;
  metadata.reflection = AIBulletPathSets_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIBulletPathSets

// repeated .gt_msg.AIBulletPathGroup groupList = 1;
int AIBulletPathSets::grouplist_size() const {
  return grouplist_.size();
}
void AIBulletPathSets::clear_grouplist() {
  grouplist_.Clear();
}
const ::gt_msg::AIBulletPathGroup& AIBulletPathSets::grouplist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.AIBulletPathSets.groupList)
  return grouplist_.Get(index);
}
::gt_msg::AIBulletPathGroup* AIBulletPathSets::mutable_grouplist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.AIBulletPathSets.groupList)
  return grouplist_.Mutable(index);
}
::gt_msg::AIBulletPathGroup* AIBulletPathSets::add_grouplist() {
  // @@protoc_insertion_point(field_add:gt_msg.AIBulletPathSets.groupList)
  return grouplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::AIBulletPathGroup >*
AIBulletPathSets::mutable_grouplist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.AIBulletPathSets.groupList)
  return &grouplist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::AIBulletPathGroup >&
AIBulletPathSets::grouplist() const {
  // @@protoc_insertion_point(field_list:gt_msg.AIBulletPathSets.groupList)
  return grouplist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathFileHead::kCountFieldNumber;
const int PathFileHead::kPathPosInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathFileHead::PathFileHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PathFileHead)
}

void PathFileHead::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PathFileHead::PathFileHead(const PathFileHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PathFileHead)
}

void PathFileHead::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = 0;
}

PathFileHead::~PathFileHead() {
  // @@protoc_insertion_point(destructor:gt_msg.PathFileHead)
  SharedDtor();
}

void PathFileHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathFileHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathFileHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathFileHead_descriptor_;
}

const PathFileHead& PathFileHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PathFileHead* PathFileHead::default_instance_ = NULL;

PathFileHead* PathFileHead::New(::google::protobuf::Arena* arena) const {
  PathFileHead* n = new PathFileHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathFileHead::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PathFileHead)
  count_ = 0;
  pathposinfo_.Clear();
}

bool PathFileHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PathFileHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pathPosInfo;
        break;
      }

      // repeated .gt_msg.PathPosInfo pathPosInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_pathPosInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathPosInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathposinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pathPosInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PathFileHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PathFileHead)
  return false;
#undef DO_
}

void PathFileHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PathFileHead)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .gt_msg.PathPosInfo pathPosInfo = 2;
  for (unsigned int i = 0, n = this->pathposinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathposinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PathFileHead)
}

::google::protobuf::uint8* PathFileHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PathFileHead)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .gt_msg.PathPosInfo pathPosInfo = 2;
  for (unsigned int i = 0, n = this->pathposinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pathposinfo(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PathFileHead)
  return target;
}

int PathFileHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PathFileHead)
  int total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // repeated .gt_msg.PathPosInfo pathPosInfo = 2;
  total_size += 1 * this->pathposinfo_size();
  for (int i = 0; i < this->pathposinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathposinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathFileHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PathFileHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathFileHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathFileHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PathFileHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PathFileHead)
    MergeFrom(*source);
  }
}

void PathFileHead::MergeFrom(const PathFileHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PathFileHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathposinfo_.MergeFrom(from.pathposinfo_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void PathFileHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PathFileHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathFileHead::CopyFrom(const PathFileHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PathFileHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathFileHead::IsInitialized() const {

  return true;
}

void PathFileHead::Swap(PathFileHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathFileHead::InternalSwap(PathFileHead* other) {
  std::swap(count_, other->count_);
  pathposinfo_.UnsafeArenaSwap(&other->pathposinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathFileHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathFileHead_descriptor_;
  metadata.reflection = PathFileHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathFileHead

// optional int32 count = 1;
void PathFileHead::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 PathFileHead::count() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathFileHead.count)
  return count_;
}
 void PathFileHead::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.PathFileHead.count)
}

// repeated .gt_msg.PathPosInfo pathPosInfo = 2;
int PathFileHead::pathposinfo_size() const {
  return pathposinfo_.size();
}
void PathFileHead::clear_pathposinfo() {
  pathposinfo_.Clear();
}
const ::gt_msg::PathPosInfo& PathFileHead::pathposinfo(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.PathFileHead.pathPosInfo)
  return pathposinfo_.Get(index);
}
::gt_msg::PathPosInfo* PathFileHead::mutable_pathposinfo(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.PathFileHead.pathPosInfo)
  return pathposinfo_.Mutable(index);
}
::gt_msg::PathPosInfo* PathFileHead::add_pathposinfo() {
  // @@protoc_insertion_point(field_add:gt_msg.PathFileHead.pathPosInfo)
  return pathposinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::PathPosInfo >*
PathFileHead::mutable_pathposinfo() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.PathFileHead.pathPosInfo)
  return &pathposinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::PathPosInfo >&
PathFileHead::pathposinfo() const {
  // @@protoc_insertion_point(field_list:gt_msg.PathFileHead.pathPosInfo)
  return pathposinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPosInfo::kPathNameFieldNumber;
const int PathPosInfo::kStartPosFieldNumber;
const int PathPosInfo::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPosInfo::PathPosInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PathPosInfo)
}

void PathPosInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PathPosInfo::PathPosInfo(const PathPosInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PathPosInfo)
}

void PathPosInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pathname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startpos_ = 0;
  length_ = 0;
}

PathPosInfo::~PathPosInfo() {
  // @@protoc_insertion_point(destructor:gt_msg.PathPosInfo)
  SharedDtor();
}

void PathPosInfo::SharedDtor() {
  pathname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PathPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPosInfo_descriptor_;
}

const PathPosInfo& PathPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PathPosInfo* PathPosInfo::default_instance_ = NULL;

PathPosInfo* PathPosInfo::New(::google::protobuf::Arena* arena) const {
  PathPosInfo* n = new PathPosInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PathPosInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathPosInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathPosInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(startpos_, length_);
  pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PathPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PathPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pathName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pathname().data(), this->pathname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.PathPosInfo.pathName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startPos;
        break;
      }

      // optional int32 startPos = 2;
      case 2: {
        if (tag == 16) {
         parse_startPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional int32 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PathPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PathPosInfo)
  return false;
#undef DO_
}

void PathPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PathPosInfo)
  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.PathPosInfo.pathName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pathname(), output);
  }

  // optional int32 startPos = 2;
  if (this->startpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // optional int32 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PathPosInfo)
}

::google::protobuf::uint8* PathPosInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PathPosInfo)
  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.PathPosInfo.pathName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pathname(), target);
  }

  // optional int32 startPos = 2;
  if (this->startpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // optional int32 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PathPosInfo)
  return target;
}

int PathPosInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PathPosInfo)
  int total_size = 0;

  // optional string pathName = 1;
  if (this->pathname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pathname());
  }

  // optional int32 startPos = 2;
  if (this->startpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  // optional int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PathPosInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPosInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPosInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PathPosInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PathPosInfo)
    MergeFrom(*source);
  }
}

void PathPosInfo::MergeFrom(const PathPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PathPosInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pathname().size() > 0) {

    pathname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
  if (from.startpos() != 0) {
    set_startpos(from.startpos());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void PathPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PathPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPosInfo::CopyFrom(const PathPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PathPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPosInfo::IsInitialized() const {

  return true;
}

void PathPosInfo::Swap(PathPosInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPosInfo::InternalSwap(PathPosInfo* other) {
  pathname_.Swap(&other->pathname_);
  std::swap(startpos_, other->startpos_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPosInfo_descriptor_;
  metadata.reflection = PathPosInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPosInfo

// optional string pathName = 1;
void PathPosInfo::clear_pathname() {
  pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PathPosInfo::pathname() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPosInfo.pathName)
  return pathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathPosInfo::set_pathname(const ::std::string& value) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.PathPosInfo.pathName)
}
 void PathPosInfo::set_pathname(const char* value) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.PathPosInfo.pathName)
}
 void PathPosInfo::set_pathname(const char* value, size_t size) {
  
  pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.PathPosInfo.pathName)
}
 ::std::string* PathPosInfo::mutable_pathname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.PathPosInfo.pathName)
  return pathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathPosInfo::release_pathname() {
  // @@protoc_insertion_point(field_release:gt_msg.PathPosInfo.pathName)
  
  return pathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathPosInfo::set_allocated_pathname(::std::string* pathname) {
  if (pathname != NULL) {
    
  } else {
    
  }
  pathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pathname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.PathPosInfo.pathName)
}

// optional int32 startPos = 2;
void PathPosInfo::clear_startpos() {
  startpos_ = 0;
}
 ::google::protobuf::int32 PathPosInfo::startpos() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPosInfo.startPos)
  return startpos_;
}
 void PathPosInfo::set_startpos(::google::protobuf::int32 value) {
  
  startpos_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.PathPosInfo.startPos)
}

// optional int32 length = 3;
void PathPosInfo::clear_length() {
  length_ = 0;
}
 ::google::protobuf::int32 PathPosInfo::length() const {
  // @@protoc_insertion_point(field_get:gt_msg.PathPosInfo.length)
  return length_;
}
 void PathPosInfo::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.PathPosInfo.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageTimer::kPassFrameFieldNumber;
const int MessageTimer::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageTimer::MessageTimer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.MessageTimer)
}

void MessageTimer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageTimer::MessageTimer(const MessageTimer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.MessageTimer)
}

void MessageTimer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  passframe_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageTimer::~MessageTimer() {
  // @@protoc_insertion_point(destructor:gt_msg.MessageTimer)
  SharedDtor();
}

void MessageTimer::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageTimer_descriptor_;
}

const MessageTimer& MessageTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

MessageTimer* MessageTimer::default_instance_ = NULL;

MessageTimer* MessageTimer::New(::google::protobuf::Arena* arena) const {
  MessageTimer* n = new MessageTimer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.MessageTimer)
  passframe_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.MessageTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 passFrame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.MessageTimer.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.MessageTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.MessageTimer)
  return false;
#undef DO_
}

void MessageTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.MessageTimer)
  // optional int32 passFrame = 1;
  if (this->passframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->passframe(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.MessageTimer.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.MessageTimer)
}

::google::protobuf::uint8* MessageTimer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.MessageTimer)
  // optional int32 passFrame = 1;
  if (this->passframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->passframe(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.MessageTimer.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.MessageTimer)
  return target;
}

int MessageTimer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.MessageTimer)
  int total_size = 0;

  // optional int32 passFrame = 1;
  if (this->passframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->passframe());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageTimer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.MessageTimer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageTimer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageTimer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.MessageTimer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.MessageTimer)
    MergeFrom(*source);
  }
}

void MessageTimer::MergeFrom(const MessageTimer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.MessageTimer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.passframe() != 0) {
    set_passframe(from.passframe());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void MessageTimer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.MessageTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageTimer::CopyFrom(const MessageTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.MessageTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTimer::IsInitialized() const {

  return true;
}

void MessageTimer::Swap(MessageTimer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageTimer::InternalSwap(MessageTimer* other) {
  std::swap(passframe_, other->passframe_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageTimer_descriptor_;
  metadata.reflection = MessageTimer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageTimer

// optional int32 passFrame = 1;
void MessageTimer::clear_passframe() {
  passframe_ = 0;
}
 ::google::protobuf::int32 MessageTimer::passframe() const {
  // @@protoc_insertion_point(field_get:gt_msg.MessageTimer.passFrame)
  return passframe_;
}
 void MessageTimer::set_passframe(::google::protobuf::int32 value) {
  
  passframe_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.MessageTimer.passFrame)
}

// optional string message = 2;
void MessageTimer::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageTimer::message() const {
  // @@protoc_insertion_point(field_get:gt_msg.MessageTimer.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageTimer::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.MessageTimer.message)
}
 void MessageTimer::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.MessageTimer.message)
}
 void MessageTimer::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.MessageTimer.message)
}
 ::std::string* MessageTimer::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.MessageTimer.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageTimer::release_message() {
  // @@protoc_insertion_point(field_release:gt_msg.MessageTimer.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageTimer::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.MessageTimer.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductItemContent::kProductItemIndexFieldNumber;
const int ProductItemContent::kFrameFieldNumber;
const int ProductItemContent::kFishTypeFieldNumber;
const int ProductItemContent::kCombinePathsFieldNumber;
const int ProductItemContent::kItemsFieldNumber;
const int ProductItemContent::kEnterMessageFieldNumber;
const int ProductItemContent::kLeaveMessageFieldNumber;
const int ProductItemContent::kOnlyOneFieldNumber;
const int ProductItemContent::kWaitUntilStartFieldNumber;
const int ProductItemContent::kWaitUntilDoneFieldNumber;
const int ProductItemContent::kFastenOldFishFieldNumber;
const int ProductItemContent::kFastenInFieldNumber;
const int ProductItemContent::kTowardFieldNumber;
const int ProductItemContent::kOffsetFieldNumber;
const int ProductItemContent::kFoldXFieldNumber;
const int ProductItemContent::kFoldYFieldNumber;
const int ProductItemContent::kFoldZFieldNumber;
const int ProductItemContent::kSpeedScaleFieldNumber;
const int ProductItemContent::kDeepFieldNumber;
const int ProductItemContent::kMessageListFieldNumber;
const int ProductItemContent::kIsYuZhenFieldNumber;
const int ProductItemContent::kRootMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductItemContent::ProductItemContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ProductItemContent)
}

void ProductItemContent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  offset_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

ProductItemContent::ProductItemContent(const ProductItemContent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ProductItemContent)
}

void ProductItemContent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_ = 0;
  fishtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combinepaths_ = false;
  entermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavemessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlyone_ = false;
  waituntilstart_ = false;
  waituntildone_ = false;
  fastenoldfish_ = false;
  fastenin_ = false;
  toward_ = 0;
  offset_ = NULL;
  foldx_ = false;
  foldy_ = false;
  foldz_ = false;
  speedscale_ = 0;
  deep_ = 0;
  isyuzhen_ = false;
  rootmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProductItemContent::~ProductItemContent() {
  // @@protoc_insertion_point(destructor:gt_msg.ProductItemContent)
  SharedDtor();
}

void ProductItemContent::SharedDtor() {
  fishtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavemessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete offset_;
  }
}

void ProductItemContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductItemContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductItemContent_descriptor_;
}

const ProductItemContent& ProductItemContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ProductItemContent* ProductItemContent::default_instance_ = NULL;

ProductItemContent* ProductItemContent::New(::google::protobuf::Arena* arena) const {
  ProductItemContent* n = new ProductItemContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductItemContent::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ProductItemContent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProductItemContent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProductItemContent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, onlyone_);
  fishtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(waituntilstart_, waituntildone_);
  ZR_(toward_, foldy_);
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
  ZR_(speedscale_, deep_);
  ZR_(foldz_, isyuzhen_);
  rootmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  productitemindex_.Clear();
  items_.Clear();
  messagelist_.Clear();
}

bool ProductItemContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ProductItemContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ProductItemIndex = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_productitemindex())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_productitemindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame;
        break;
      }

      // optional int32 frame = 2;
      case 2: {
        if (tag == 16) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fishType;
        break;
      }

      // optional string fishType = 3;
      case 3: {
        if (tag == 26) {
         parse_fishType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fishtype().data(), this->fishtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItemContent.fishType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CombinePaths;
        break;
      }

      // optional bool CombinePaths = 4;
      case 4: {
        if (tag == 32) {
         parse_CombinePaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &combinepaths_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .gt_msg.ProductItem items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_enterMessage;
        break;
      }

      // optional string enterMessage = 6;
      case 6: {
        if (tag == 50) {
         parse_enterMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entermessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entermessage().data(), this->entermessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItemContent.enterMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_leaveMessage;
        break;
      }

      // optional string leaveMessage = 7;
      case 7: {
        if (tag == 58) {
         parse_leaveMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leavemessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leavemessage().data(), this->leavemessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItemContent.leaveMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_onlyOne;
        break;
      }

      // optional bool onlyOne = 8;
      case 8: {
        if (tag == 64) {
         parse_onlyOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onlyone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_waitUntilStart;
        break;
      }

      // optional bool waitUntilStart = 9;
      case 9: {
        if (tag == 72) {
         parse_waitUntilStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &waituntilstart_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_waitUntilDone;
        break;
      }

      // optional bool waitUntilDone = 10;
      case 10: {
        if (tag == 80) {
         parse_waitUntilDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &waituntildone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fastenOldFish;
        break;
      }

      // optional bool fastenOldFish = 11;
      case 11: {
        if (tag == 88) {
         parse_fastenOldFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fastenoldfish_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_fastenIn;
        break;
      }

      // optional bool fastenIn = 12;
      case 12: {
        if (tag == 96) {
         parse_fastenIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fastenin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_toward;
        break;
      }

      // optional int32 toward = 13;
      case 13: {
        if (tag == 104) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_offset;
        break;
      }

      // optional .gt_msg.Vec3 offset = 14;
      case 14: {
        if (tag == 114) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_foldX;
        break;
      }

      // optional bool foldX = 15;
      case 15: {
        if (tag == 120) {
         parse_foldX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_foldY;
        break;
      }

      // optional bool foldY = 16;
      case 16: {
        if (tag == 128) {
         parse_foldY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_foldZ;
        break;
      }

      // optional bool foldZ = 17;
      case 17: {
        if (tag == 136) {
         parse_foldZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_speedScale;
        break;
      }

      // optional float speedScale = 18;
      case 18: {
        if (tag == 149) {
         parse_speedScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_deep;
        break;
      }

      // optional int32 deep = 19;
      case 19: {
        if (tag == 152) {
         parse_deep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deep_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_messageList;
        break;
      }

      // repeated .gt_msg.MessageTimer messageList = 20;
      case 20: {
        if (tag == 162) {
         parse_messageList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messageList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messagelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_messageList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(168)) goto parse_isYuZhen;
        break;
      }

      // optional bool isYuZhen = 21;
      case 21: {
        if (tag == 168) {
         parse_isYuZhen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyuzhen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_rootMessage;
        break;
      }

      // optional string rootMessage = 22;
      case 22: {
        if (tag == 178) {
         parse_rootMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rootmessage().data(), this->rootmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItemContent.rootMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ProductItemContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ProductItemContent)
  return false;
#undef DO_
}

void ProductItemContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ProductItemContent)
  // repeated int32 ProductItemIndex = 1;
  if (this->productitemindex_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_productitemindex_cached_byte_size_);
  }
  for (int i = 0; i < this->productitemindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->productitemindex(i), output);
  }

  // optional int32 frame = 2;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame(), output);
  }

  // optional string fishType = 3;
  if (this->fishtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishtype().data(), this->fishtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.fishType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fishtype(), output);
  }

  // optional bool CombinePaths = 4;
  if (this->combinepaths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->combinepaths(), output);
  }

  // repeated .gt_msg.ProductItem items = 5;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  // optional string enterMessage = 6;
  if (this->entermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entermessage().data(), this->entermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.enterMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->entermessage(), output);
  }

  // optional string leaveMessage = 7;
  if (this->leavemessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leavemessage().data(), this->leavemessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.leaveMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->leavemessage(), output);
  }

  // optional bool onlyOne = 8;
  if (this->onlyone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->onlyone(), output);
  }

  // optional bool waitUntilStart = 9;
  if (this->waituntilstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->waituntilstart(), output);
  }

  // optional bool waitUntilDone = 10;
  if (this->waituntildone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->waituntildone(), output);
  }

  // optional bool fastenOldFish = 11;
  if (this->fastenoldfish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fastenoldfish(), output);
  }

  // optional bool fastenIn = 12;
  if (this->fastenin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fastenin(), output);
  }

  // optional int32 toward = 13;
  if (this->toward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->toward(), output);
  }

  // optional .gt_msg.Vec3 offset = 14;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->offset_, output);
  }

  // optional bool foldX = 15;
  if (this->foldx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->foldx(), output);
  }

  // optional bool foldY = 16;
  if (this->foldy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->foldy(), output);
  }

  // optional bool foldZ = 17;
  if (this->foldz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->foldz(), output);
  }

  // optional float speedScale = 18;
  if (this->speedscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->speedscale(), output);
  }

  // optional int32 deep = 19;
  if (this->deep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->deep(), output);
  }

  // repeated .gt_msg.MessageTimer messageList = 20;
  for (unsigned int i = 0, n = this->messagelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->messagelist(i), output);
  }

  // optional bool isYuZhen = 21;
  if (this->isyuzhen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isyuzhen(), output);
  }

  // optional string rootMessage = 22;
  if (this->rootmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootmessage().data(), this->rootmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.rootMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->rootmessage(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ProductItemContent)
}

::google::protobuf::uint8* ProductItemContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ProductItemContent)
  // repeated int32 ProductItemIndex = 1;
  if (this->productitemindex_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _productitemindex_cached_byte_size_, target);
  }
  for (int i = 0; i < this->productitemindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->productitemindex(i), target);
  }

  // optional int32 frame = 2;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame(), target);
  }

  // optional string fishType = 3;
  if (this->fishtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishtype().data(), this->fishtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.fishType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fishtype(), target);
  }

  // optional bool CombinePaths = 4;
  if (this->combinepaths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->combinepaths(), target);
  }

  // repeated .gt_msg.ProductItem items = 5;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->items(i), false, target);
  }

  // optional string enterMessage = 6;
  if (this->entermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entermessage().data(), this->entermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.enterMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->entermessage(), target);
  }

  // optional string leaveMessage = 7;
  if (this->leavemessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leavemessage().data(), this->leavemessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.leaveMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leavemessage(), target);
  }

  // optional bool onlyOne = 8;
  if (this->onlyone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->onlyone(), target);
  }

  // optional bool waitUntilStart = 9;
  if (this->waituntilstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->waituntilstart(), target);
  }

  // optional bool waitUntilDone = 10;
  if (this->waituntildone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->waituntildone(), target);
  }

  // optional bool fastenOldFish = 11;
  if (this->fastenoldfish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fastenoldfish(), target);
  }

  // optional bool fastenIn = 12;
  if (this->fastenin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fastenin(), target);
  }

  // optional int32 toward = 13;
  if (this->toward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->toward(), target);
  }

  // optional .gt_msg.Vec3 offset = 14;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->offset_, false, target);
  }

  // optional bool foldX = 15;
  if (this->foldx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->foldx(), target);
  }

  // optional bool foldY = 16;
  if (this->foldy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->foldy(), target);
  }

  // optional bool foldZ = 17;
  if (this->foldz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->foldz(), target);
  }

  // optional float speedScale = 18;
  if (this->speedscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->speedscale(), target);
  }

  // optional int32 deep = 19;
  if (this->deep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->deep(), target);
  }

  // repeated .gt_msg.MessageTimer messageList = 20;
  for (unsigned int i = 0, n = this->messagelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->messagelist(i), false, target);
  }

  // optional bool isYuZhen = 21;
  if (this->isyuzhen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isyuzhen(), target);
  }

  // optional string rootMessage = 22;
  if (this->rootmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootmessage().data(), this->rootmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemContent.rootMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->rootmessage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ProductItemContent)
  return target;
}

int ProductItemContent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ProductItemContent)
  int total_size = 0;

  // optional int32 frame = 2;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional string fishType = 3;
  if (this->fishtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fishtype());
  }

  // optional bool CombinePaths = 4;
  if (this->combinepaths() != 0) {
    total_size += 1 + 1;
  }

  // optional string enterMessage = 6;
  if (this->entermessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entermessage());
  }

  // optional string leaveMessage = 7;
  if (this->leavemessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leavemessage());
  }

  // optional bool onlyOne = 8;
  if (this->onlyone() != 0) {
    total_size += 1 + 1;
  }

  // optional bool waitUntilStart = 9;
  if (this->waituntilstart() != 0) {
    total_size += 1 + 1;
  }

  // optional bool waitUntilDone = 10;
  if (this->waituntildone() != 0) {
    total_size += 1 + 1;
  }

  // optional bool fastenOldFish = 11;
  if (this->fastenoldfish() != 0) {
    total_size += 1 + 1;
  }

  // optional bool fastenIn = 12;
  if (this->fastenin() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 toward = 13;
  if (this->toward() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toward());
  }

  // optional .gt_msg.Vec3 offset = 14;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional bool foldX = 15;
  if (this->foldx() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldY = 16;
  if (this->foldy() != 0) {
    total_size += 2 + 1;
  }

  // optional bool foldZ = 17;
  if (this->foldz() != 0) {
    total_size += 2 + 1;
  }

  // optional float speedScale = 18;
  if (this->speedscale() != 0) {
    total_size += 2 + 4;
  }

  // optional int32 deep = 19;
  if (this->deep() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deep());
  }

  // optional bool isYuZhen = 21;
  if (this->isyuzhen() != 0) {
    total_size += 2 + 1;
  }

  // optional string rootMessage = 22;
  if (this->rootmessage().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rootmessage());
  }

  // repeated int32 ProductItemIndex = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->productitemindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->productitemindex(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _productitemindex_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .gt_msg.ProductItem items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .gt_msg.MessageTimer messageList = 20;
  total_size += 2 * this->messagelist_size();
  for (int i = 0; i < this->messagelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductItemContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ProductItemContent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProductItemContent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductItemContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ProductItemContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ProductItemContent)
    MergeFrom(*source);
  }
}

void ProductItemContent::MergeFrom(const ProductItemContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ProductItemContent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  productitemindex_.MergeFrom(from.productitemindex_);
  items_.MergeFrom(from.items_);
  messagelist_.MergeFrom(from.messagelist_);
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.fishtype().size() > 0) {

    fishtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fishtype_);
  }
  if (from.combinepaths() != 0) {
    set_combinepaths(from.combinepaths());
  }
  if (from.entermessage().size() > 0) {

    entermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entermessage_);
  }
  if (from.leavemessage().size() > 0) {

    leavemessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leavemessage_);
  }
  if (from.onlyone() != 0) {
    set_onlyone(from.onlyone());
  }
  if (from.waituntilstart() != 0) {
    set_waituntilstart(from.waituntilstart());
  }
  if (from.waituntildone() != 0) {
    set_waituntildone(from.waituntildone());
  }
  if (from.fastenoldfish() != 0) {
    set_fastenoldfish(from.fastenoldfish());
  }
  if (from.fastenin() != 0) {
    set_fastenin(from.fastenin());
  }
  if (from.toward() != 0) {
    set_toward(from.toward());
  }
  if (from.has_offset()) {
    mutable_offset()->::gt_msg::Vec3::MergeFrom(from.offset());
  }
  if (from.foldx() != 0) {
    set_foldx(from.foldx());
  }
  if (from.foldy() != 0) {
    set_foldy(from.foldy());
  }
  if (from.foldz() != 0) {
    set_foldz(from.foldz());
  }
  if (from.speedscale() != 0) {
    set_speedscale(from.speedscale());
  }
  if (from.deep() != 0) {
    set_deep(from.deep());
  }
  if (from.isyuzhen() != 0) {
    set_isyuzhen(from.isyuzhen());
  }
  if (from.rootmessage().size() > 0) {

    rootmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rootmessage_);
  }
}

void ProductItemContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ProductItemContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductItemContent::CopyFrom(const ProductItemContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ProductItemContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductItemContent::IsInitialized() const {

  return true;
}

void ProductItemContent::Swap(ProductItemContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductItemContent::InternalSwap(ProductItemContent* other) {
  productitemindex_.UnsafeArenaSwap(&other->productitemindex_);
  std::swap(frame_, other->frame_);
  fishtype_.Swap(&other->fishtype_);
  std::swap(combinepaths_, other->combinepaths_);
  items_.UnsafeArenaSwap(&other->items_);
  entermessage_.Swap(&other->entermessage_);
  leavemessage_.Swap(&other->leavemessage_);
  std::swap(onlyone_, other->onlyone_);
  std::swap(waituntilstart_, other->waituntilstart_);
  std::swap(waituntildone_, other->waituntildone_);
  std::swap(fastenoldfish_, other->fastenoldfish_);
  std::swap(fastenin_, other->fastenin_);
  std::swap(toward_, other->toward_);
  std::swap(offset_, other->offset_);
  std::swap(foldx_, other->foldx_);
  std::swap(foldy_, other->foldy_);
  std::swap(foldz_, other->foldz_);
  std::swap(speedscale_, other->speedscale_);
  std::swap(deep_, other->deep_);
  messagelist_.UnsafeArenaSwap(&other->messagelist_);
  std::swap(isyuzhen_, other->isyuzhen_);
  rootmessage_.Swap(&other->rootmessage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductItemContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductItemContent_descriptor_;
  metadata.reflection = ProductItemContent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductItemContent

// repeated int32 ProductItemIndex = 1;
int ProductItemContent::productitemindex_size() const {
  return productitemindex_.size();
}
void ProductItemContent::clear_productitemindex() {
  productitemindex_.Clear();
}
 ::google::protobuf::int32 ProductItemContent::productitemindex(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.ProductItemIndex)
  return productitemindex_.Get(index);
}
 void ProductItemContent::set_productitemindex(int index, ::google::protobuf::int32 value) {
  productitemindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.ProductItemIndex)
}
 void ProductItemContent::add_productitemindex(::google::protobuf::int32 value) {
  productitemindex_.Add(value);
  // @@protoc_insertion_point(field_add:gt_msg.ProductItemContent.ProductItemIndex)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProductItemContent::productitemindex() const {
  // @@protoc_insertion_point(field_list:gt_msg.ProductItemContent.ProductItemIndex)
  return productitemindex_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProductItemContent::mutable_productitemindex() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.ProductItemContent.ProductItemIndex)
  return &productitemindex_;
}

// optional int32 frame = 2;
void ProductItemContent::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 ProductItemContent::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.frame)
  return frame_;
}
 void ProductItemContent::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.frame)
}

// optional string fishType = 3;
void ProductItemContent::clear_fishtype() {
  fishtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItemContent::fishtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.fishType)
  return fishtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_fishtype(const ::std::string& value) {
  
  fishtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.fishType)
}
 void ProductItemContent::set_fishtype(const char* value) {
  
  fishtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItemContent.fishType)
}
 void ProductItemContent::set_fishtype(const char* value, size_t size) {
  
  fishtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItemContent.fishType)
}
 ::std::string* ProductItemContent::mutable_fishtype() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.fishType)
  return fishtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItemContent::release_fishtype() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemContent.fishType)
  
  return fishtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_allocated_fishtype(::std::string* fishtype) {
  if (fishtype != NULL) {
    
  } else {
    
  }
  fishtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fishtype);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemContent.fishType)
}

// optional bool CombinePaths = 4;
void ProductItemContent::clear_combinepaths() {
  combinepaths_ = false;
}
 bool ProductItemContent::combinepaths() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.CombinePaths)
  return combinepaths_;
}
 void ProductItemContent::set_combinepaths(bool value) {
  
  combinepaths_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.CombinePaths)
}

// repeated .gt_msg.ProductItem items = 5;
int ProductItemContent::items_size() const {
  return items_.size();
}
void ProductItemContent::clear_items() {
  items_.Clear();
}
const ::gt_msg::ProductItem& ProductItemContent::items(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.items)
  return items_.Get(index);
}
::gt_msg::ProductItem* ProductItemContent::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.items)
  return items_.Mutable(index);
}
::gt_msg::ProductItem* ProductItemContent::add_items() {
  // @@protoc_insertion_point(field_add:gt_msg.ProductItemContent.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::ProductItem >*
ProductItemContent::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.ProductItemContent.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::ProductItem >&
ProductItemContent::items() const {
  // @@protoc_insertion_point(field_list:gt_msg.ProductItemContent.items)
  return items_;
}

// optional string enterMessage = 6;
void ProductItemContent::clear_entermessage() {
  entermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItemContent::entermessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.enterMessage)
  return entermessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_entermessage(const ::std::string& value) {
  
  entermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.enterMessage)
}
 void ProductItemContent::set_entermessage(const char* value) {
  
  entermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItemContent.enterMessage)
}
 void ProductItemContent::set_entermessage(const char* value, size_t size) {
  
  entermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItemContent.enterMessage)
}
 ::std::string* ProductItemContent::mutable_entermessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.enterMessage)
  return entermessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItemContent::release_entermessage() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemContent.enterMessage)
  
  return entermessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_allocated_entermessage(::std::string* entermessage) {
  if (entermessage != NULL) {
    
  } else {
    
  }
  entermessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entermessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemContent.enterMessage)
}

// optional string leaveMessage = 7;
void ProductItemContent::clear_leavemessage() {
  leavemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItemContent::leavemessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.leaveMessage)
  return leavemessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_leavemessage(const ::std::string& value) {
  
  leavemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.leaveMessage)
}
 void ProductItemContent::set_leavemessage(const char* value) {
  
  leavemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItemContent.leaveMessage)
}
 void ProductItemContent::set_leavemessage(const char* value, size_t size) {
  
  leavemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItemContent.leaveMessage)
}
 ::std::string* ProductItemContent::mutable_leavemessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.leaveMessage)
  return leavemessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItemContent::release_leavemessage() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemContent.leaveMessage)
  
  return leavemessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_allocated_leavemessage(::std::string* leavemessage) {
  if (leavemessage != NULL) {
    
  } else {
    
  }
  leavemessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leavemessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemContent.leaveMessage)
}

// optional bool onlyOne = 8;
void ProductItemContent::clear_onlyone() {
  onlyone_ = false;
}
 bool ProductItemContent::onlyone() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.onlyOne)
  return onlyone_;
}
 void ProductItemContent::set_onlyone(bool value) {
  
  onlyone_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.onlyOne)
}

// optional bool waitUntilStart = 9;
void ProductItemContent::clear_waituntilstart() {
  waituntilstart_ = false;
}
 bool ProductItemContent::waituntilstart() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.waitUntilStart)
  return waituntilstart_;
}
 void ProductItemContent::set_waituntilstart(bool value) {
  
  waituntilstart_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.waitUntilStart)
}

// optional bool waitUntilDone = 10;
void ProductItemContent::clear_waituntildone() {
  waituntildone_ = false;
}
 bool ProductItemContent::waituntildone() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.waitUntilDone)
  return waituntildone_;
}
 void ProductItemContent::set_waituntildone(bool value) {
  
  waituntildone_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.waitUntilDone)
}

// optional bool fastenOldFish = 11;
void ProductItemContent::clear_fastenoldfish() {
  fastenoldfish_ = false;
}
 bool ProductItemContent::fastenoldfish() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.fastenOldFish)
  return fastenoldfish_;
}
 void ProductItemContent::set_fastenoldfish(bool value) {
  
  fastenoldfish_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.fastenOldFish)
}

// optional bool fastenIn = 12;
void ProductItemContent::clear_fastenin() {
  fastenin_ = false;
}
 bool ProductItemContent::fastenin() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.fastenIn)
  return fastenin_;
}
 void ProductItemContent::set_fastenin(bool value) {
  
  fastenin_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.fastenIn)
}

// optional int32 toward = 13;
void ProductItemContent::clear_toward() {
  toward_ = 0;
}
 ::google::protobuf::int32 ProductItemContent::toward() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.toward)
  return toward_;
}
 void ProductItemContent::set_toward(::google::protobuf::int32 value) {
  
  toward_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.toward)
}

// optional .gt_msg.Vec3 offset = 14;
bool ProductItemContent::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void ProductItemContent::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::gt_msg::Vec3& ProductItemContent::offset() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::gt_msg::Vec3* ProductItemContent::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.offset)
  return offset_;
}
::gt_msg::Vec3* ProductItemContent::release_offset() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemContent.offset)
  
  ::gt_msg::Vec3* temp = offset_;
  offset_ = NULL;
  return temp;
}
void ProductItemContent::set_allocated_offset(::gt_msg::Vec3* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemContent.offset)
}

// optional bool foldX = 15;
void ProductItemContent::clear_foldx() {
  foldx_ = false;
}
 bool ProductItemContent::foldx() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.foldX)
  return foldx_;
}
 void ProductItemContent::set_foldx(bool value) {
  
  foldx_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.foldX)
}

// optional bool foldY = 16;
void ProductItemContent::clear_foldy() {
  foldy_ = false;
}
 bool ProductItemContent::foldy() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.foldY)
  return foldy_;
}
 void ProductItemContent::set_foldy(bool value) {
  
  foldy_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.foldY)
}

// optional bool foldZ = 17;
void ProductItemContent::clear_foldz() {
  foldz_ = false;
}
 bool ProductItemContent::foldz() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.foldZ)
  return foldz_;
}
 void ProductItemContent::set_foldz(bool value) {
  
  foldz_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.foldZ)
}

// optional float speedScale = 18;
void ProductItemContent::clear_speedscale() {
  speedscale_ = 0;
}
 float ProductItemContent::speedscale() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.speedScale)
  return speedscale_;
}
 void ProductItemContent::set_speedscale(float value) {
  
  speedscale_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.speedScale)
}

// optional int32 deep = 19;
void ProductItemContent::clear_deep() {
  deep_ = 0;
}
 ::google::protobuf::int32 ProductItemContent::deep() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.deep)
  return deep_;
}
 void ProductItemContent::set_deep(::google::protobuf::int32 value) {
  
  deep_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.deep)
}

// repeated .gt_msg.MessageTimer messageList = 20;
int ProductItemContent::messagelist_size() const {
  return messagelist_.size();
}
void ProductItemContent::clear_messagelist() {
  messagelist_.Clear();
}
const ::gt_msg::MessageTimer& ProductItemContent::messagelist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.messageList)
  return messagelist_.Get(index);
}
::gt_msg::MessageTimer* ProductItemContent::mutable_messagelist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.messageList)
  return messagelist_.Mutable(index);
}
::gt_msg::MessageTimer* ProductItemContent::add_messagelist() {
  // @@protoc_insertion_point(field_add:gt_msg.ProductItemContent.messageList)
  return messagelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::MessageTimer >*
ProductItemContent::mutable_messagelist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.ProductItemContent.messageList)
  return &messagelist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::MessageTimer >&
ProductItemContent::messagelist() const {
  // @@protoc_insertion_point(field_list:gt_msg.ProductItemContent.messageList)
  return messagelist_;
}

// optional bool isYuZhen = 21;
void ProductItemContent::clear_isyuzhen() {
  isyuzhen_ = false;
}
 bool ProductItemContent::isyuzhen() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.isYuZhen)
  return isyuzhen_;
}
 void ProductItemContent::set_isyuzhen(bool value) {
  
  isyuzhen_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.isYuZhen)
}

// optional string rootMessage = 22;
void ProductItemContent::clear_rootmessage() {
  rootmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItemContent::rootmessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemContent.rootMessage)
  return rootmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_rootmessage(const ::std::string& value) {
  
  rootmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemContent.rootMessage)
}
 void ProductItemContent::set_rootmessage(const char* value) {
  
  rootmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItemContent.rootMessage)
}
 void ProductItemContent::set_rootmessage(const char* value, size_t size) {
  
  rootmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItemContent.rootMessage)
}
 ::std::string* ProductItemContent::mutable_rootmessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemContent.rootMessage)
  return rootmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItemContent::release_rootmessage() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemContent.rootMessage)
  
  return rootmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemContent::set_allocated_rootmessage(::std::string* rootmessage) {
  if (rootmessage != NULL) {
    
  } else {
    
  }
  rootmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rootmessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemContent.rootMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductItem::kContentNameFieldNumber;
const int ProductItem::kIsSyncFieldNumber;
const int ProductItem::kTimeFieldNumber;
const int ProductItem::kContentItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductItem::ProductItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ProductItem)
}

void ProductItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProductItem::ProductItem(const ProductItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ProductItem)
}

void ProductItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issync_ = false;
  time_ = 0;
}

ProductItem::~ProductItem() {
  // @@protoc_insertion_point(destructor:gt_msg.ProductItem)
  SharedDtor();
}

void ProductItem::SharedDtor() {
  contentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProductItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductItem_descriptor_;
}

const ProductItem& ProductItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ProductItem* ProductItem::default_instance_ = NULL;

ProductItem* ProductItem::New(::google::protobuf::Arena* arena) const {
  ProductItem* n = new ProductItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ProductItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProductItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProductItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(issync_, time_);
  contentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  contentitems_.Clear();
}

bool ProductItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ProductItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ContentName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contentname().data(), this->contentname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItem.ContentName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isSync;
        break;
      }

      // optional bool isSync = 2;
      case 2: {
        if (tag == 16) {
         parse_isSync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issync_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_contentItems;
        break;
      }

      // repeated .gt_msg.ProductItemContent contentItems = 4;
      case 4: {
        if (tag == 34) {
         parse_contentItems:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contentItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contentitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_contentItems;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ProductItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ProductItem)
  return false;
#undef DO_
}

void ProductItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ProductItem)
  // optional string ContentName = 1;
  if (this->contentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contentname().data(), this->contentname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItem.ContentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contentname(), output);
  }

  // optional bool isSync = 2;
  if (this->issync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issync(), output);
  }

  // optional int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // repeated .gt_msg.ProductItemContent contentItems = 4;
  for (unsigned int i = 0, n = this->contentitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contentitems(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ProductItem)
}

::google::protobuf::uint8* ProductItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ProductItem)
  // optional string ContentName = 1;
  if (this->contentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contentname().data(), this->contentname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItem.ContentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contentname(), target);
  }

  // optional bool isSync = 2;
  if (this->issync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issync(), target);
  }

  // optional int32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // repeated .gt_msg.ProductItemContent contentItems = 4;
  for (unsigned int i = 0, n = this->contentitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->contentitems(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ProductItem)
  return target;
}

int ProductItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ProductItem)
  int total_size = 0;

  // optional string ContentName = 1;
  if (this->contentname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contentname());
  }

  // optional bool isSync = 2;
  if (this->issync() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // repeated .gt_msg.ProductItemContent contentItems = 4;
  total_size += 1 * this->contentitems_size();
  for (int i = 0; i < this->contentitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contentitems(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ProductItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProductItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ProductItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ProductItem)
    MergeFrom(*source);
  }
}

void ProductItem::MergeFrom(const ProductItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ProductItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  contentitems_.MergeFrom(from.contentitems_);
  if (from.contentname().size() > 0) {

    contentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentname_);
  }
  if (from.issync() != 0) {
    set_issync(from.issync());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void ProductItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ProductItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductItem::CopyFrom(const ProductItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ProductItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductItem::IsInitialized() const {

  return true;
}

void ProductItem::Swap(ProductItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductItem::InternalSwap(ProductItem* other) {
  contentname_.Swap(&other->contentname_);
  std::swap(issync_, other->issync_);
  std::swap(time_, other->time_);
  contentitems_.UnsafeArenaSwap(&other->contentitems_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductItem_descriptor_;
  metadata.reflection = ProductItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductItem

// optional string ContentName = 1;
void ProductItem::clear_contentname() {
  contentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItem::contentname() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItem.ContentName)
  return contentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItem::set_contentname(const ::std::string& value) {
  
  contentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItem.ContentName)
}
 void ProductItem::set_contentname(const char* value) {
  
  contentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItem.ContentName)
}
 void ProductItem::set_contentname(const char* value, size_t size) {
  
  contentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItem.ContentName)
}
 ::std::string* ProductItem::mutable_contentname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItem.ContentName)
  return contentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItem::release_contentname() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItem.ContentName)
  
  return contentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItem::set_allocated_contentname(::std::string* contentname) {
  if (contentname != NULL) {
    
  } else {
    
  }
  contentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItem.ContentName)
}

// optional bool isSync = 2;
void ProductItem::clear_issync() {
  issync_ = false;
}
 bool ProductItem::issync() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItem.isSync)
  return issync_;
}
 void ProductItem::set_issync(bool value) {
  
  issync_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItem.isSync)
}

// optional int32 time = 3;
void ProductItem::clear_time() {
  time_ = 0;
}
 ::google::protobuf::int32 ProductItem::time() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItem.time)
  return time_;
}
 void ProductItem::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItem.time)
}

// repeated .gt_msg.ProductItemContent contentItems = 4;
int ProductItem::contentitems_size() const {
  return contentitems_.size();
}
void ProductItem::clear_contentitems() {
  contentitems_.Clear();
}
const ::gt_msg::ProductItemContent& ProductItem::contentitems(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItem.contentItems)
  return contentitems_.Get(index);
}
::gt_msg::ProductItemContent* ProductItem::mutable_contentitems(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItem.contentItems)
  return contentitems_.Mutable(index);
}
::gt_msg::ProductItemContent* ProductItem::add_contentitems() {
  // @@protoc_insertion_point(field_add:gt_msg.ProductItem.contentItems)
  return contentitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::ProductItemContent >*
ProductItem::mutable_contentitems() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.ProductItem.contentItems)
  return &contentitems_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::ProductItemContent >&
ProductItem::contentitems() const {
  // @@protoc_insertion_point(field_list:gt_msg.ProductItem.contentItems)
  return contentitems_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductItemGroup::kItemListFieldNumber;
const int ProductItemGroup::kMainEnterFieldNumber;
const int ProductItemGroup::kAddFishEnterFieldNumber;
const int ProductItemGroup::kEnableAddFishFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductItemGroup::ProductItemGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ProductItemGroup)
}

void ProductItemGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProductItemGroup::ProductItemGroup(const ProductItemGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ProductItemGroup)
}

void ProductItemGroup::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mainenter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addfishenter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enableaddfish_ = false;
}

ProductItemGroup::~ProductItemGroup() {
  // @@protoc_insertion_point(destructor:gt_msg.ProductItemGroup)
  SharedDtor();
}

void ProductItemGroup::SharedDtor() {
  mainenter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addfishenter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProductItemGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductItemGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductItemGroup_descriptor_;
}

const ProductItemGroup& ProductItemGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ProductItemGroup* ProductItemGroup::default_instance_ = NULL;

ProductItemGroup* ProductItemGroup::New(::google::protobuf::Arena* arena) const {
  ProductItemGroup* n = new ProductItemGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductItemGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ProductItemGroup)
  mainenter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addfishenter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enableaddfish_ = false;
  itemlist_.Clear();
}

bool ProductItemGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ProductItemGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.ProductItem itemList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_itemList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_mainEnter;
        break;
      }

      // optional string mainEnter = 2;
      case 2: {
        if (tag == 18) {
         parse_mainEnter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainenter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mainenter().data(), this->mainenter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItemGroup.mainEnter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AddFishEnter;
        break;
      }

      // optional string AddFishEnter = 3;
      case 3: {
        if (tag == 26) {
         parse_AddFishEnter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addfishenter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addfishenter().data(), this->addfishenter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ProductItemGroup.AddFishEnter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EnableAddFish;
        break;
      }

      // optional bool EnableAddFish = 4;
      case 4: {
        if (tag == 32) {
         parse_EnableAddFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableaddfish_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ProductItemGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ProductItemGroup)
  return false;
#undef DO_
}

void ProductItemGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ProductItemGroup)
  // repeated .gt_msg.ProductItem itemList = 1;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlist(i), output);
  }

  // optional string mainEnter = 2;
  if (this->mainenter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainenter().data(), this->mainenter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemGroup.mainEnter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mainenter(), output);
  }

  // optional string AddFishEnter = 3;
  if (this->addfishenter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addfishenter().data(), this->addfishenter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemGroup.AddFishEnter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->addfishenter(), output);
  }

  // optional bool EnableAddFish = 4;
  if (this->enableaddfish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enableaddfish(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ProductItemGroup)
}

::google::protobuf::uint8* ProductItemGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ProductItemGroup)
  // repeated .gt_msg.ProductItem itemList = 1;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->itemlist(i), false, target);
  }

  // optional string mainEnter = 2;
  if (this->mainenter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainenter().data(), this->mainenter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemGroup.mainEnter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mainenter(), target);
  }

  // optional string AddFishEnter = 3;
  if (this->addfishenter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addfishenter().data(), this->addfishenter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ProductItemGroup.AddFishEnter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addfishenter(), target);
  }

  // optional bool EnableAddFish = 4;
  if (this->enableaddfish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enableaddfish(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ProductItemGroup)
  return target;
}

int ProductItemGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ProductItemGroup)
  int total_size = 0;

  // optional string mainEnter = 2;
  if (this->mainenter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mainenter());
  }

  // optional string AddFishEnter = 3;
  if (this->addfishenter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addfishenter());
  }

  // optional bool EnableAddFish = 4;
  if (this->enableaddfish() != 0) {
    total_size += 1 + 1;
  }

  // repeated .gt_msg.ProductItem itemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductItemGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ProductItemGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProductItemGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductItemGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ProductItemGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ProductItemGroup)
    MergeFrom(*source);
  }
}

void ProductItemGroup::MergeFrom(const ProductItemGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ProductItemGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  itemlist_.MergeFrom(from.itemlist_);
  if (from.mainenter().size() > 0) {

    mainenter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainenter_);
  }
  if (from.addfishenter().size() > 0) {

    addfishenter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addfishenter_);
  }
  if (from.enableaddfish() != 0) {
    set_enableaddfish(from.enableaddfish());
  }
}

void ProductItemGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ProductItemGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductItemGroup::CopyFrom(const ProductItemGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ProductItemGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductItemGroup::IsInitialized() const {

  return true;
}

void ProductItemGroup::Swap(ProductItemGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductItemGroup::InternalSwap(ProductItemGroup* other) {
  itemlist_.UnsafeArenaSwap(&other->itemlist_);
  mainenter_.Swap(&other->mainenter_);
  addfishenter_.Swap(&other->addfishenter_);
  std::swap(enableaddfish_, other->enableaddfish_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductItemGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductItemGroup_descriptor_;
  metadata.reflection = ProductItemGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductItemGroup

// repeated .gt_msg.ProductItem itemList = 1;
int ProductItemGroup::itemlist_size() const {
  return itemlist_.size();
}
void ProductItemGroup::clear_itemlist() {
  itemlist_.Clear();
}
const ::gt_msg::ProductItem& ProductItemGroup::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemGroup.itemList)
  return itemlist_.Get(index);
}
::gt_msg::ProductItem* ProductItemGroup::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemGroup.itemList)
  return itemlist_.Mutable(index);
}
::gt_msg::ProductItem* ProductItemGroup::add_itemlist() {
  // @@protoc_insertion_point(field_add:gt_msg.ProductItemGroup.itemList)
  return itemlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::ProductItem >*
ProductItemGroup::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.ProductItemGroup.itemList)
  return &itemlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::ProductItem >&
ProductItemGroup::itemlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.ProductItemGroup.itemList)
  return itemlist_;
}

// optional string mainEnter = 2;
void ProductItemGroup::clear_mainenter() {
  mainenter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItemGroup::mainenter() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemGroup.mainEnter)
  return mainenter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemGroup::set_mainenter(const ::std::string& value) {
  
  mainenter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemGroup.mainEnter)
}
 void ProductItemGroup::set_mainenter(const char* value) {
  
  mainenter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItemGroup.mainEnter)
}
 void ProductItemGroup::set_mainenter(const char* value, size_t size) {
  
  mainenter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItemGroup.mainEnter)
}
 ::std::string* ProductItemGroup::mutable_mainenter() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemGroup.mainEnter)
  return mainenter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItemGroup::release_mainenter() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemGroup.mainEnter)
  
  return mainenter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemGroup::set_allocated_mainenter(::std::string* mainenter) {
  if (mainenter != NULL) {
    
  } else {
    
  }
  mainenter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainenter);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemGroup.mainEnter)
}

// optional string AddFishEnter = 3;
void ProductItemGroup::clear_addfishenter() {
  addfishenter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProductItemGroup::addfishenter() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemGroup.AddFishEnter)
  return addfishenter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemGroup::set_addfishenter(const ::std::string& value) {
  
  addfishenter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemGroup.AddFishEnter)
}
 void ProductItemGroup::set_addfishenter(const char* value) {
  
  addfishenter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ProductItemGroup.AddFishEnter)
}
 void ProductItemGroup::set_addfishenter(const char* value, size_t size) {
  
  addfishenter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ProductItemGroup.AddFishEnter)
}
 ::std::string* ProductItemGroup::mutable_addfishenter() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ProductItemGroup.AddFishEnter)
  return addfishenter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProductItemGroup::release_addfishenter() {
  // @@protoc_insertion_point(field_release:gt_msg.ProductItemGroup.AddFishEnter)
  
  return addfishenter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProductItemGroup::set_allocated_addfishenter(::std::string* addfishenter) {
  if (addfishenter != NULL) {
    
  } else {
    
  }
  addfishenter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addfishenter);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ProductItemGroup.AddFishEnter)
}

// optional bool EnableAddFish = 4;
void ProductItemGroup::clear_enableaddfish() {
  enableaddfish_ = false;
}
 bool ProductItemGroup::enableaddfish() const {
  // @@protoc_insertion_point(field_get:gt_msg.ProductItemGroup.EnableAddFish)
  return enableaddfish_;
}
 void ProductItemGroup::set_enableaddfish(bool value) {
  
  enableaddfish_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ProductItemGroup.EnableAddFish)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishProductNode::kProductNameFieldNumber;
const int FishProductNode::kRepeatTimeFieldNumber;
const int FishProductNode::kFishTypeFieldNumber;
const int FishProductNode::kStartFrameFieldNumber;
const int FishProductNode::kChildsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishProductNode::FishProductNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishProductNode)
}

void FishProductNode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishProductNode::FishProductNode(const FishProductNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishProductNode)
}

void FishProductNode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  productname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repeattime_ = 0;
  fishtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startframe_ = 0;
}

FishProductNode::~FishProductNode() {
  // @@protoc_insertion_point(destructor:gt_msg.FishProductNode)
  SharedDtor();
}

void FishProductNode::SharedDtor() {
  productname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FishProductNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishProductNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishProductNode_descriptor_;
}

const FishProductNode& FishProductNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishProductNode* FishProductNode::default_instance_ = NULL;

FishProductNode* FishProductNode::New(::google::protobuf::Arena* arena) const {
  FishProductNode* n = new FishProductNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishProductNode::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishProductNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FishProductNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FishProductNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(repeattime_, startframe_);
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  childs_.Clear();
}

bool FishProductNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishProductNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string productName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishProductNode.productName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeatTime;
        break;
      }

      // optional int32 repeatTime = 2;
      case 2: {
        if (tag == 16) {
         parse_repeatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeattime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fishType;
        break;
      }

      // optional string fishType = 3;
      case 3: {
        if (tag == 26) {
         parse_fishType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fishtype().data(), this->fishtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishProductNode.fishType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_startFrame;
        break;
      }

      // optional int32 startFrame = 4;
      case 4: {
        if (tag == 32) {
         parse_startFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_childs;
        break;
      }

      // repeated .gt_msg.FishProductNode childs = 5;
      case 5: {
        if (tag == 42) {
         parse_childs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_childs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_childs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_childs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishProductNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishProductNode)
  return false;
#undef DO_
}

void FishProductNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishProductNode)
  // optional string productName = 1;
  if (this->productname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishProductNode.productName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productname(), output);
  }

  // optional int32 repeatTime = 2;
  if (this->repeattime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repeattime(), output);
  }

  // optional string fishType = 3;
  if (this->fishtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishtype().data(), this->fishtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishProductNode.fishType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fishtype(), output);
  }

  // optional int32 startFrame = 4;
  if (this->startframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startframe(), output);
  }

  // repeated .gt_msg.FishProductNode childs = 5;
  for (unsigned int i = 0, n = this->childs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->childs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishProductNode)
}

::google::protobuf::uint8* FishProductNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishProductNode)
  // optional string productName = 1;
  if (this->productname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishProductNode.productName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productname(), target);
  }

  // optional int32 repeatTime = 2;
  if (this->repeattime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repeattime(), target);
  }

  // optional string fishType = 3;
  if (this->fishtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishtype().data(), this->fishtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishProductNode.fishType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fishtype(), target);
  }

  // optional int32 startFrame = 4;
  if (this->startframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startframe(), target);
  }

  // repeated .gt_msg.FishProductNode childs = 5;
  for (unsigned int i = 0, n = this->childs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->childs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishProductNode)
  return target;
}

int FishProductNode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishProductNode)
  int total_size = 0;

  // optional string productName = 1;
  if (this->productname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productname());
  }

  // optional int32 repeatTime = 2;
  if (this->repeattime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repeattime());
  }

  // optional string fishType = 3;
  if (this->fishtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fishtype());
  }

  // optional int32 startFrame = 4;
  if (this->startframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startframe());
  }

  // repeated .gt_msg.FishProductNode childs = 5;
  total_size += 1 * this->childs_size();
  for (int i = 0; i < this->childs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishProductNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishProductNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishProductNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishProductNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishProductNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishProductNode)
    MergeFrom(*source);
  }
}

void FishProductNode::MergeFrom(const FishProductNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishProductNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  childs_.MergeFrom(from.childs_);
  if (from.productname().size() > 0) {

    productname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productname_);
  }
  if (from.repeattime() != 0) {
    set_repeattime(from.repeattime());
  }
  if (from.fishtype().size() > 0) {

    fishtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fishtype_);
  }
  if (from.startframe() != 0) {
    set_startframe(from.startframe());
  }
}

void FishProductNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishProductNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishProductNode::CopyFrom(const FishProductNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishProductNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishProductNode::IsInitialized() const {

  return true;
}

void FishProductNode::Swap(FishProductNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishProductNode::InternalSwap(FishProductNode* other) {
  productname_.Swap(&other->productname_);
  std::swap(repeattime_, other->repeattime_);
  fishtype_.Swap(&other->fishtype_);
  std::swap(startframe_, other->startframe_);
  childs_.UnsafeArenaSwap(&other->childs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishProductNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishProductNode_descriptor_;
  metadata.reflection = FishProductNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishProductNode

// optional string productName = 1;
void FishProductNode::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishProductNode::productname() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishProductNode.productName)
  return productname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishProductNode::set_productname(const ::std::string& value) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishProductNode.productName)
}
 void FishProductNode::set_productname(const char* value) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishProductNode.productName)
}
 void FishProductNode::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishProductNode.productName)
}
 ::std::string* FishProductNode::mutable_productname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishProductNode.productName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishProductNode::release_productname() {
  // @@protoc_insertion_point(field_release:gt_msg.FishProductNode.productName)
  
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishProductNode::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishProductNode.productName)
}

// optional int32 repeatTime = 2;
void FishProductNode::clear_repeattime() {
  repeattime_ = 0;
}
 ::google::protobuf::int32 FishProductNode::repeattime() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishProductNode.repeatTime)
  return repeattime_;
}
 void FishProductNode::set_repeattime(::google::protobuf::int32 value) {
  
  repeattime_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishProductNode.repeatTime)
}

// optional string fishType = 3;
void FishProductNode::clear_fishtype() {
  fishtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishProductNode::fishtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishProductNode.fishType)
  return fishtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishProductNode::set_fishtype(const ::std::string& value) {
  
  fishtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishProductNode.fishType)
}
 void FishProductNode::set_fishtype(const char* value) {
  
  fishtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishProductNode.fishType)
}
 void FishProductNode::set_fishtype(const char* value, size_t size) {
  
  fishtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishProductNode.fishType)
}
 ::std::string* FishProductNode::mutable_fishtype() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishProductNode.fishType)
  return fishtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishProductNode::release_fishtype() {
  // @@protoc_insertion_point(field_release:gt_msg.FishProductNode.fishType)
  
  return fishtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishProductNode::set_allocated_fishtype(::std::string* fishtype) {
  if (fishtype != NULL) {
    
  } else {
    
  }
  fishtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fishtype);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishProductNode.fishType)
}

// optional int32 startFrame = 4;
void FishProductNode::clear_startframe() {
  startframe_ = 0;
}
 ::google::protobuf::int32 FishProductNode::startframe() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishProductNode.startFrame)
  return startframe_;
}
 void FishProductNode::set_startframe(::google::protobuf::int32 value) {
  
  startframe_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishProductNode.startFrame)
}

// repeated .gt_msg.FishProductNode childs = 5;
int FishProductNode::childs_size() const {
  return childs_.size();
}
void FishProductNode::clear_childs() {
  childs_.Clear();
}
const ::gt_msg::FishProductNode& FishProductNode::childs(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishProductNode.childs)
  return childs_.Get(index);
}
::gt_msg::FishProductNode* FishProductNode::mutable_childs(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishProductNode.childs)
  return childs_.Mutable(index);
}
::gt_msg::FishProductNode* FishProductNode::add_childs() {
  // @@protoc_insertion_point(field_add:gt_msg.FishProductNode.childs)
  return childs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FishProductNode >*
FishProductNode::mutable_childs() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishProductNode.childs)
  return &childs_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FishProductNode >&
FishProductNode::childs() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishProductNode.childs)
  return childs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishConfig::kTypeFieldNumber;
const int FishConfig::kNameFieldNumber;
const int FishConfig::kRaduisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishConfig::FishConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishConfig)
}

void FishConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishConfig::FishConfig(const FishConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishConfig)
}

void FishConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raduis_ = 0;
}

FishConfig::~FishConfig() {
  // @@protoc_insertion_point(destructor:gt_msg.FishConfig)
  SharedDtor();
}

void FishConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FishConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishConfig_descriptor_;
}

const FishConfig& FishConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishConfig* FishConfig::default_instance_ = NULL;

FishConfig* FishConfig::New(::google::protobuf::Arena* arena) const {
  FishConfig* n = new FishConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FishConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FishConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, raduis_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FishConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishConfig.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_raduis;
        break;
      }

      // optional float raduis = 3;
      case 3: {
        if (tag == 29) {
         parse_raduis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raduis_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishConfig)
  return false;
#undef DO_
}

void FishConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishConfig)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float raduis = 3;
  if (this->raduis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->raduis(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishConfig)
}

::google::protobuf::uint8* FishConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishConfig)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float raduis = 3;
  if (this->raduis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->raduis(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishConfig)
  return target;
}

int FishConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishConfig)
  int total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float raduis = 3;
  if (this->raduis() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishConfig)
    MergeFrom(*source);
  }
}

void FishConfig::MergeFrom(const FishConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.raduis() != 0) {
    set_raduis(from.raduis());
  }
}

void FishConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishConfig::CopyFrom(const FishConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishConfig::IsInitialized() const {

  return true;
}

void FishConfig::Swap(FishConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishConfig::InternalSwap(FishConfig* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(raduis_, other->raduis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishConfig_descriptor_;
  metadata.reflection = FishConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishConfig

// optional int32 type = 1;
void FishConfig::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 FishConfig::type() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishConfig.type)
  return type_;
}
 void FishConfig::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishConfig.type)
}

// optional string name = 2;
void FishConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishConfig::name() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishConfig.name)
}
 void FishConfig::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishConfig.name)
}
 void FishConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishConfig.name)
}
 ::std::string* FishConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishConfig::release_name() {
  // @@protoc_insertion_point(field_release:gt_msg.FishConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishConfig.name)
}

// optional float raduis = 3;
void FishConfig::clear_raduis() {
  raduis_ = 0;
}
 float FishConfig::raduis() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishConfig.raduis)
  return raduis_;
}
 void FishConfig::set_raduis(float value) {
  
  raduis_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishConfig.raduis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishConfigList::kFishConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishConfigList::FishConfigList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishConfigList)
}

void FishConfigList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishConfigList::FishConfigList(const FishConfigList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishConfigList)
}

void FishConfigList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FishConfigList::~FishConfigList() {
  // @@protoc_insertion_point(destructor:gt_msg.FishConfigList)
  SharedDtor();
}

void FishConfigList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishConfigList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishConfigList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishConfigList_descriptor_;
}

const FishConfigList& FishConfigList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishConfigList* FishConfigList::default_instance_ = NULL;

FishConfigList* FishConfigList::New(::google::protobuf::Arena* arena) const {
  FishConfigList* n = new FishConfigList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishConfigList)
  fishconfigs_.Clear();
}

bool FishConfigList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishConfigList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.FishConfig fishConfigs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fishConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fishconfigs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_fishConfigs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishConfigList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishConfigList)
  return false;
#undef DO_
}

void FishConfigList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishConfigList)
  // repeated .gt_msg.FishConfig fishConfigs = 1;
  for (unsigned int i = 0, n = this->fishconfigs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishconfigs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishConfigList)
}

::google::protobuf::uint8* FishConfigList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishConfigList)
  // repeated .gt_msg.FishConfig fishConfigs = 1;
  for (unsigned int i = 0, n = this->fishconfigs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fishconfigs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishConfigList)
  return target;
}

int FishConfigList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishConfigList)
  int total_size = 0;

  // repeated .gt_msg.FishConfig fishConfigs = 1;
  total_size += 1 * this->fishconfigs_size();
  for (int i = 0; i < this->fishconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishconfigs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishConfigList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishConfigList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishConfigList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishConfigList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishConfigList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishConfigList)
    MergeFrom(*source);
  }
}

void FishConfigList::MergeFrom(const FishConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishConfigList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fishconfigs_.MergeFrom(from.fishconfigs_);
}

void FishConfigList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishConfigList::CopyFrom(const FishConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishConfigList::IsInitialized() const {

  return true;
}

void FishConfigList::Swap(FishConfigList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishConfigList::InternalSwap(FishConfigList* other) {
  fishconfigs_.UnsafeArenaSwap(&other->fishconfigs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishConfigList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishConfigList_descriptor_;
  metadata.reflection = FishConfigList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishConfigList

// repeated .gt_msg.FishConfig fishConfigs = 1;
int FishConfigList::fishconfigs_size() const {
  return fishconfigs_.size();
}
void FishConfigList::clear_fishconfigs() {
  fishconfigs_.Clear();
}
const ::gt_msg::FishConfig& FishConfigList::fishconfigs(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishConfigList.fishConfigs)
  return fishconfigs_.Get(index);
}
::gt_msg::FishConfig* FishConfigList::mutable_fishconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishConfigList.fishConfigs)
  return fishconfigs_.Mutable(index);
}
::gt_msg::FishConfig* FishConfigList::add_fishconfigs() {
  // @@protoc_insertion_point(field_add:gt_msg.FishConfigList.fishConfigs)
  return fishconfigs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FishConfig >*
FishConfigList::mutable_fishconfigs() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishConfigList.fishConfigs)
  return &fishconfigs_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FishConfig >&
FishConfigList::fishconfigs() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishConfigList.fishConfigs)
  return fishconfigs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishData::kFishNameFieldNumber;
const int FishData::kFishImportanceFieldNumber;
const int FishData::kFishModelFieldNumber;
const int FishData::kFishScoreFieldNumber;
const int FishData::kFishDieEffectFieldNumber;
const int FishData::kFishActionDataListFieldNumber;
const int FishData::kAttackHightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishData::FishData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishData)
}

void FishData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishData::FishData(const FishData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishData)
}

void FishData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fishname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishimportance_ = 0;
  fishmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attackhight_ = 0;
}

FishData::~FishData() {
  // @@protoc_insertion_point(destructor:gt_msg.FishData)
  SharedDtor();
}

void FishData::SharedDtor() {
  fishname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FishData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishData_descriptor_;
}

const FishData& FishData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishData* FishData::default_instance_ = NULL;

FishData* FishData::New(::google::protobuf::Arena* arena) const {
  FishData* n = new FishData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FishData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FishData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fishimportance_, attackhight_);
  fishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  fishscore_.Clear();
  fishdieeffect_.Clear();
  fishactiondatalist_.Clear();
}

bool FishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fishName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fishname().data(), this->fishname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishData.fishName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishImportance;
        break;
      }

      // optional int32 fishImportance = 2;
      case 2: {
        if (tag == 16) {
         parse_fishImportance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishimportance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fishModel;
        break;
      }

      // optional string fishModel = 3;
      case 3: {
        if (tag == 26) {
         parse_fishModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fishmodel().data(), this->fishmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishData.fishModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FishScore;
        break;
      }

      // repeated int32 FishScore = 4;
      case 4: {
        if (tag == 34) {
         parse_FishScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishscore())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_fishscore())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fishDieEffect;
        break;
      }

      // repeated string fishDieEffect = 5;
      case 5: {
        if (tag == 42) {
         parse_fishDieEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fishdieeffect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fishdieeffect(this->fishdieeffect_size() - 1).data(),
            this->fishdieeffect(this->fishdieeffect_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishData.fishDieEffect"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fishDieEffect;
        if (input->ExpectTag(50)) goto parse_fishActionDataList;
        break;
      }

      // repeated .gt_msg.FishActionData fishActionDataList = 6;
      case 6: {
        if (tag == 50) {
         parse_fishActionDataList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fishActionDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fishactiondatalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_fishActionDataList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(61)) goto parse_AttackHight;
        break;
      }

      // optional float AttackHight = 7;
      case 7: {
        if (tag == 61) {
         parse_AttackHight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackhight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishData)
  return false;
#undef DO_
}

void FishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishData)
  // optional string fishName = 1;
  if (this->fishname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishname().data(), this->fishname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishData.fishName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fishname(), output);
  }

  // optional int32 fishImportance = 2;
  if (this->fishimportance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishimportance(), output);
  }

  // optional string fishModel = 3;
  if (this->fishmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishmodel().data(), this->fishmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishData.fishModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fishmodel(), output);
  }

  // repeated int32 FishScore = 4;
  if (this->fishscore_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fishscore_cached_byte_size_);
  }
  for (int i = 0; i < this->fishscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fishscore(i), output);
  }

  // repeated string fishDieEffect = 5;
  for (int i = 0; i < this->fishdieeffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishdieeffect(i).data(), this->fishdieeffect(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishData.fishDieEffect");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fishdieeffect(i), output);
  }

  // repeated .gt_msg.FishActionData fishActionDataList = 6;
  for (unsigned int i = 0, n = this->fishactiondatalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fishactiondatalist(i), output);
  }

  // optional float AttackHight = 7;
  if (this->attackhight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->attackhight(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishData)
}

::google::protobuf::uint8* FishData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishData)
  // optional string fishName = 1;
  if (this->fishname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishname().data(), this->fishname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishData.fishName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fishname(), target);
  }

  // optional int32 fishImportance = 2;
  if (this->fishimportance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishimportance(), target);
  }

  // optional string fishModel = 3;
  if (this->fishmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishmodel().data(), this->fishmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishData.fishModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fishmodel(), target);
  }

  // repeated int32 FishScore = 4;
  if (this->fishscore_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fishscore_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fishscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fishscore(i), target);
  }

  // repeated string fishDieEffect = 5;
  for (int i = 0; i < this->fishdieeffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishdieeffect(i).data(), this->fishdieeffect(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishData.fishDieEffect");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->fishdieeffect(i), target);
  }

  // repeated .gt_msg.FishActionData fishActionDataList = 6;
  for (unsigned int i = 0, n = this->fishactiondatalist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->fishactiondatalist(i), false, target);
  }

  // optional float AttackHight = 7;
  if (this->attackhight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->attackhight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishData)
  return target;
}

int FishData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishData)
  int total_size = 0;

  // optional string fishName = 1;
  if (this->fishname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fishname());
  }

  // optional int32 fishImportance = 2;
  if (this->fishimportance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishimportance());
  }

  // optional string fishModel = 3;
  if (this->fishmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fishmodel());
  }

  // optional float AttackHight = 7;
  if (this->attackhight() != 0) {
    total_size += 1 + 4;
  }

  // repeated int32 FishScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishscore(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fishscore_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string fishDieEffect = 5;
  total_size += 1 * this->fishdieeffect_size();
  for (int i = 0; i < this->fishdieeffect_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fishdieeffect(i));
  }

  // repeated .gt_msg.FishActionData fishActionDataList = 6;
  total_size += 1 * this->fishactiondatalist_size();
  for (int i = 0; i < this->fishactiondatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishactiondatalist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishData)
    MergeFrom(*source);
  }
}

void FishData::MergeFrom(const FishData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fishscore_.MergeFrom(from.fishscore_);
  fishdieeffect_.MergeFrom(from.fishdieeffect_);
  fishactiondatalist_.MergeFrom(from.fishactiondatalist_);
  if (from.fishname().size() > 0) {

    fishname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fishname_);
  }
  if (from.fishimportance() != 0) {
    set_fishimportance(from.fishimportance());
  }
  if (from.fishmodel().size() > 0) {

    fishmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fishmodel_);
  }
  if (from.attackhight() != 0) {
    set_attackhight(from.attackhight());
  }
}

void FishData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishData::CopyFrom(const FishData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishData::IsInitialized() const {

  return true;
}

void FishData::Swap(FishData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishData::InternalSwap(FishData* other) {
  fishname_.Swap(&other->fishname_);
  std::swap(fishimportance_, other->fishimportance_);
  fishmodel_.Swap(&other->fishmodel_);
  fishscore_.UnsafeArenaSwap(&other->fishscore_);
  fishdieeffect_.UnsafeArenaSwap(&other->fishdieeffect_);
  fishactiondatalist_.UnsafeArenaSwap(&other->fishactiondatalist_);
  std::swap(attackhight_, other->attackhight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishData_descriptor_;
  metadata.reflection = FishData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishData

// optional string fishName = 1;
void FishData::clear_fishname() {
  fishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishData::fishname() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.fishName)
  return fishname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishData::set_fishname(const ::std::string& value) {
  
  fishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishData.fishName)
}
 void FishData::set_fishname(const char* value) {
  
  fishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishData.fishName)
}
 void FishData::set_fishname(const char* value, size_t size) {
  
  fishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishData.fishName)
}
 ::std::string* FishData::mutable_fishname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishData.fishName)
  return fishname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishData::release_fishname() {
  // @@protoc_insertion_point(field_release:gt_msg.FishData.fishName)
  
  return fishname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishData::set_allocated_fishname(::std::string* fishname) {
  if (fishname != NULL) {
    
  } else {
    
  }
  fishname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fishname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishData.fishName)
}

// optional int32 fishImportance = 2;
void FishData::clear_fishimportance() {
  fishimportance_ = 0;
}
 ::google::protobuf::int32 FishData::fishimportance() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.fishImportance)
  return fishimportance_;
}
 void FishData::set_fishimportance(::google::protobuf::int32 value) {
  
  fishimportance_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishData.fishImportance)
}

// optional string fishModel = 3;
void FishData::clear_fishmodel() {
  fishmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishData::fishmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.fishModel)
  return fishmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishData::set_fishmodel(const ::std::string& value) {
  
  fishmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishData.fishModel)
}
 void FishData::set_fishmodel(const char* value) {
  
  fishmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishData.fishModel)
}
 void FishData::set_fishmodel(const char* value, size_t size) {
  
  fishmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishData.fishModel)
}
 ::std::string* FishData::mutable_fishmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishData.fishModel)
  return fishmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishData::release_fishmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.FishData.fishModel)
  
  return fishmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishData::set_allocated_fishmodel(::std::string* fishmodel) {
  if (fishmodel != NULL) {
    
  } else {
    
  }
  fishmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fishmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishData.fishModel)
}

// repeated int32 FishScore = 4;
int FishData::fishscore_size() const {
  return fishscore_.size();
}
void FishData::clear_fishscore() {
  fishscore_.Clear();
}
 ::google::protobuf::int32 FishData::fishscore(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.FishScore)
  return fishscore_.Get(index);
}
 void FishData::set_fishscore(int index, ::google::protobuf::int32 value) {
  fishscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:gt_msg.FishData.FishScore)
}
 void FishData::add_fishscore(::google::protobuf::int32 value) {
  fishscore_.Add(value);
  // @@protoc_insertion_point(field_add:gt_msg.FishData.FishScore)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishData::fishscore() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishData.FishScore)
  return fishscore_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishData::mutable_fishscore() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishData.FishScore)
  return &fishscore_;
}

// repeated string fishDieEffect = 5;
int FishData::fishdieeffect_size() const {
  return fishdieeffect_.size();
}
void FishData::clear_fishdieeffect() {
  fishdieeffect_.Clear();
}
 const ::std::string& FishData::fishdieeffect(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.fishDieEffect)
  return fishdieeffect_.Get(index);
}
 ::std::string* FishData::mutable_fishdieeffect(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishData.fishDieEffect)
  return fishdieeffect_.Mutable(index);
}
 void FishData::set_fishdieeffect(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gt_msg.FishData.fishDieEffect)
  fishdieeffect_.Mutable(index)->assign(value);
}
 void FishData::set_fishdieeffect(int index, const char* value) {
  fishdieeffect_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gt_msg.FishData.fishDieEffect)
}
 void FishData::set_fishdieeffect(int index, const char* value, size_t size) {
  fishdieeffect_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishData.fishDieEffect)
}
 ::std::string* FishData::add_fishdieeffect() {
  // @@protoc_insertion_point(field_add_mutable:gt_msg.FishData.fishDieEffect)
  return fishdieeffect_.Add();
}
 void FishData::add_fishdieeffect(const ::std::string& value) {
  fishdieeffect_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gt_msg.FishData.fishDieEffect)
}
 void FishData::add_fishdieeffect(const char* value) {
  fishdieeffect_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gt_msg.FishData.fishDieEffect)
}
 void FishData::add_fishdieeffect(const char* value, size_t size) {
  fishdieeffect_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gt_msg.FishData.fishDieEffect)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FishData::fishdieeffect() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishData.fishDieEffect)
  return fishdieeffect_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FishData::mutable_fishdieeffect() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishData.fishDieEffect)
  return &fishdieeffect_;
}

// repeated .gt_msg.FishActionData fishActionDataList = 6;
int FishData::fishactiondatalist_size() const {
  return fishactiondatalist_.size();
}
void FishData::clear_fishactiondatalist() {
  fishactiondatalist_.Clear();
}
const ::gt_msg::FishActionData& FishData::fishactiondatalist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.fishActionDataList)
  return fishactiondatalist_.Get(index);
}
::gt_msg::FishActionData* FishData::mutable_fishactiondatalist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishData.fishActionDataList)
  return fishactiondatalist_.Mutable(index);
}
::gt_msg::FishActionData* FishData::add_fishactiondatalist() {
  // @@protoc_insertion_point(field_add:gt_msg.FishData.fishActionDataList)
  return fishactiondatalist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FishActionData >*
FishData::mutable_fishactiondatalist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishData.fishActionDataList)
  return &fishactiondatalist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FishActionData >&
FishData::fishactiondatalist() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishData.fishActionDataList)
  return fishactiondatalist_;
}

// optional float AttackHight = 7;
void FishData::clear_attackhight() {
  attackhight_ = 0;
}
 float FishData::attackhight() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishData.AttackHight)
  return attackhight_;
}
 void FishData::set_attackhight(float value) {
  
  attackhight_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishData.AttackHight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishActionData::kActionNameFieldNumber;
const int FishActionData::kActionFrameFieldNumber;
const int FishActionData::kIsIdleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishActionData::FishActionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishActionData)
}

void FishActionData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishActionData::FishActionData(const FishActionData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishActionData)
}

void FishActionData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  actionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionframe_ = 0;
  isidle_ = false;
}

FishActionData::~FishActionData() {
  // @@protoc_insertion_point(destructor:gt_msg.FishActionData)
  SharedDtor();
}

void FishActionData::SharedDtor() {
  actionname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FishActionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishActionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishActionData_descriptor_;
}

const FishActionData& FishActionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishActionData* FishActionData::default_instance_ = NULL;

FishActionData* FishActionData::New(::google::protobuf::Arena* arena) const {
  FishActionData* n = new FishActionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishActionData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FishActionData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FishActionData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(actionframe_, isidle_);
  actionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FishActionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishActionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ActionName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actionname().data(), this->actionname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishActionData.ActionName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActionFrame;
        break;
      }

      // optional int32 ActionFrame = 2;
      case 2: {
        if (tag == 16) {
         parse_ActionFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsIdle;
        break;
      }

      // optional bool IsIdle = 3;
      case 3: {
        if (tag == 24) {
         parse_IsIdle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isidle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishActionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishActionData)
  return false;
#undef DO_
}

void FishActionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishActionData)
  // optional string ActionName = 1;
  if (this->actionname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishActionData.ActionName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->actionname(), output);
  }

  // optional int32 ActionFrame = 2;
  if (this->actionframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actionframe(), output);
  }

  // optional bool IsIdle = 3;
  if (this->isidle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isidle(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishActionData)
}

::google::protobuf::uint8* FishActionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishActionData)
  // optional string ActionName = 1;
  if (this->actionname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishActionData.ActionName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->actionname(), target);
  }

  // optional int32 ActionFrame = 2;
  if (this->actionframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actionframe(), target);
  }

  // optional bool IsIdle = 3;
  if (this->isidle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isidle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishActionData)
  return target;
}

int FishActionData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishActionData)
  int total_size = 0;

  // optional string ActionName = 1;
  if (this->actionname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actionname());
  }

  // optional int32 ActionFrame = 2;
  if (this->actionframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionframe());
  }

  // optional bool IsIdle = 3;
  if (this->isidle() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishActionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishActionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishActionData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishActionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishActionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishActionData)
    MergeFrom(*source);
  }
}

void FishActionData::MergeFrom(const FishActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishActionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.actionname().size() > 0) {

    actionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actionname_);
  }
  if (from.actionframe() != 0) {
    set_actionframe(from.actionframe());
  }
  if (from.isidle() != 0) {
    set_isidle(from.isidle());
  }
}

void FishActionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishActionData::CopyFrom(const FishActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishActionData::IsInitialized() const {

  return true;
}

void FishActionData::Swap(FishActionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishActionData::InternalSwap(FishActionData* other) {
  actionname_.Swap(&other->actionname_);
  std::swap(actionframe_, other->actionframe_);
  std::swap(isidle_, other->isidle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishActionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishActionData_descriptor_;
  metadata.reflection = FishActionData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishActionData

// optional string ActionName = 1;
void FishActionData::clear_actionname() {
  actionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishActionData::actionname() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishActionData.ActionName)
  return actionname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishActionData::set_actionname(const ::std::string& value) {
  
  actionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishActionData.ActionName)
}
 void FishActionData::set_actionname(const char* value) {
  
  actionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishActionData.ActionName)
}
 void FishActionData::set_actionname(const char* value, size_t size) {
  
  actionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishActionData.ActionName)
}
 ::std::string* FishActionData::mutable_actionname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishActionData.ActionName)
  return actionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishActionData::release_actionname() {
  // @@protoc_insertion_point(field_release:gt_msg.FishActionData.ActionName)
  
  return actionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishActionData::set_allocated_actionname(::std::string* actionname) {
  if (actionname != NULL) {
    
  } else {
    
  }
  actionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actionname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishActionData.ActionName)
}

// optional int32 ActionFrame = 2;
void FishActionData::clear_actionframe() {
  actionframe_ = 0;
}
 ::google::protobuf::int32 FishActionData::actionframe() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishActionData.ActionFrame)
  return actionframe_;
}
 void FishActionData::set_actionframe(::google::protobuf::int32 value) {
  
  actionframe_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishActionData.ActionFrame)
}

// optional bool IsIdle = 3;
void FishActionData::clear_isidle() {
  isidle_ = false;
}
 bool FishActionData::isidle() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishActionData.IsIdle)
  return isidle_;
}
 void FishActionData::set_isidle(bool value) {
  
  isidle_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishActionData.IsIdle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishCollider::kFishNameFieldNumber;
const int FishCollider::kZBaseFieldNumber;
const int FishCollider::kCollidersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishCollider::FishCollider()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishCollider)
}

void FishCollider::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishCollider::FishCollider(const FishCollider& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishCollider)
}

void FishCollider::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fishname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zbase_ = 0;
}

FishCollider::~FishCollider() {
  // @@protoc_insertion_point(destructor:gt_msg.FishCollider)
  SharedDtor();
}

void FishCollider::SharedDtor() {
  fishname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FishCollider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishCollider::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishCollider_descriptor_;
}

const FishCollider& FishCollider::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishCollider* FishCollider::default_instance_ = NULL;

FishCollider* FishCollider::New(::google::protobuf::Arena* arena) const {
  FishCollider* n = new FishCollider;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishCollider::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishCollider)
  fishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zbase_ = 0;
  colliders_.Clear();
}

bool FishCollider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishCollider)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fishName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fishname().data(), this->fishname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishCollider.fishName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zBase;
        break;
      }

      // optional int32 zBase = 2;
      case 2: {
        if (tag == 16) {
         parse_zBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zbase_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_colliders;
        break;
      }

      // repeated .gt_msg.ColliderCircle colliders = 3;
      case 3: {
        if (tag == 26) {
         parse_colliders:
          DO_(input->IncrementRecursionDepth());
         parse_loop_colliders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_colliders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_colliders;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishCollider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishCollider)
  return false;
#undef DO_
}

void FishCollider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishCollider)
  // optional string fishName = 1;
  if (this->fishname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishname().data(), this->fishname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishCollider.fishName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fishname(), output);
  }

  // optional int32 zBase = 2;
  if (this->zbase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zbase(), output);
  }

  // repeated .gt_msg.ColliderCircle colliders = 3;
  for (unsigned int i = 0, n = this->colliders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->colliders(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishCollider)
}

::google::protobuf::uint8* FishCollider::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishCollider)
  // optional string fishName = 1;
  if (this->fishname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fishname().data(), this->fishname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishCollider.fishName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fishname(), target);
  }

  // optional int32 zBase = 2;
  if (this->zbase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zbase(), target);
  }

  // repeated .gt_msg.ColliderCircle colliders = 3;
  for (unsigned int i = 0, n = this->colliders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->colliders(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishCollider)
  return target;
}

int FishCollider::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishCollider)
  int total_size = 0;

  // optional string fishName = 1;
  if (this->fishname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fishname());
  }

  // optional int32 zBase = 2;
  if (this->zbase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zbase());
  }

  // repeated .gt_msg.ColliderCircle colliders = 3;
  total_size += 1 * this->colliders_size();
  for (int i = 0; i < this->colliders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colliders(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishCollider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishCollider)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishCollider* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishCollider>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishCollider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishCollider)
    MergeFrom(*source);
  }
}

void FishCollider::MergeFrom(const FishCollider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishCollider)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  colliders_.MergeFrom(from.colliders_);
  if (from.fishname().size() > 0) {

    fishname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fishname_);
  }
  if (from.zbase() != 0) {
    set_zbase(from.zbase());
  }
}

void FishCollider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishCollider::CopyFrom(const FishCollider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishCollider::IsInitialized() const {

  return true;
}

void FishCollider::Swap(FishCollider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishCollider::InternalSwap(FishCollider* other) {
  fishname_.Swap(&other->fishname_);
  std::swap(zbase_, other->zbase_);
  colliders_.UnsafeArenaSwap(&other->colliders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishCollider::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishCollider_descriptor_;
  metadata.reflection = FishCollider_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishCollider

// optional string fishName = 1;
void FishCollider::clear_fishname() {
  fishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishCollider::fishname() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishCollider.fishName)
  return fishname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishCollider::set_fishname(const ::std::string& value) {
  
  fishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishCollider.fishName)
}
 void FishCollider::set_fishname(const char* value) {
  
  fishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishCollider.fishName)
}
 void FishCollider::set_fishname(const char* value, size_t size) {
  
  fishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishCollider.fishName)
}
 ::std::string* FishCollider::mutable_fishname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishCollider.fishName)
  return fishname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishCollider::release_fishname() {
  // @@protoc_insertion_point(field_release:gt_msg.FishCollider.fishName)
  
  return fishname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishCollider::set_allocated_fishname(::std::string* fishname) {
  if (fishname != NULL) {
    
  } else {
    
  }
  fishname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fishname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishCollider.fishName)
}

// optional int32 zBase = 2;
void FishCollider::clear_zbase() {
  zbase_ = 0;
}
 ::google::protobuf::int32 FishCollider::zbase() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishCollider.zBase)
  return zbase_;
}
 void FishCollider::set_zbase(::google::protobuf::int32 value) {
  
  zbase_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishCollider.zBase)
}

// repeated .gt_msg.ColliderCircle colliders = 3;
int FishCollider::colliders_size() const {
  return colliders_.size();
}
void FishCollider::clear_colliders() {
  colliders_.Clear();
}
const ::gt_msg::ColliderCircle& FishCollider::colliders(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishCollider.colliders)
  return colliders_.Get(index);
}
::gt_msg::ColliderCircle* FishCollider::mutable_colliders(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishCollider.colliders)
  return colliders_.Mutable(index);
}
::gt_msg::ColliderCircle* FishCollider::add_colliders() {
  // @@protoc_insertion_point(field_add:gt_msg.FishCollider.colliders)
  return colliders_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::ColliderCircle >*
FishCollider::mutable_colliders() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishCollider.colliders)
  return &colliders_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::ColliderCircle >&
FishCollider::colliders() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishCollider.colliders)
  return colliders_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishColliderGroup::kColliderListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishColliderGroup::FishColliderGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishColliderGroup)
}

void FishColliderGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishColliderGroup::FishColliderGroup(const FishColliderGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishColliderGroup)
}

void FishColliderGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FishColliderGroup::~FishColliderGroup() {
  // @@protoc_insertion_point(destructor:gt_msg.FishColliderGroup)
  SharedDtor();
}

void FishColliderGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishColliderGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishColliderGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishColliderGroup_descriptor_;
}

const FishColliderGroup& FishColliderGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishColliderGroup* FishColliderGroup::default_instance_ = NULL;

FishColliderGroup* FishColliderGroup::New(::google::protobuf::Arena* arena) const {
  FishColliderGroup* n = new FishColliderGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishColliderGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishColliderGroup)
  colliderlist_.Clear();
}

bool FishColliderGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishColliderGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.FishCollider colliderList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_colliderList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_colliderlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_colliderList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishColliderGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishColliderGroup)
  return false;
#undef DO_
}

void FishColliderGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishColliderGroup)
  // repeated .gt_msg.FishCollider colliderList = 1;
  for (unsigned int i = 0, n = this->colliderlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colliderlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishColliderGroup)
}

::google::protobuf::uint8* FishColliderGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishColliderGroup)
  // repeated .gt_msg.FishCollider colliderList = 1;
  for (unsigned int i = 0, n = this->colliderlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->colliderlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishColliderGroup)
  return target;
}

int FishColliderGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishColliderGroup)
  int total_size = 0;

  // repeated .gt_msg.FishCollider colliderList = 1;
  total_size += 1 * this->colliderlist_size();
  for (int i = 0; i < this->colliderlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colliderlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishColliderGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishColliderGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishColliderGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishColliderGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishColliderGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishColliderGroup)
    MergeFrom(*source);
  }
}

void FishColliderGroup::MergeFrom(const FishColliderGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishColliderGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  colliderlist_.MergeFrom(from.colliderlist_);
}

void FishColliderGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishColliderGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishColliderGroup::CopyFrom(const FishColliderGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishColliderGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishColliderGroup::IsInitialized() const {

  return true;
}

void FishColliderGroup::Swap(FishColliderGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishColliderGroup::InternalSwap(FishColliderGroup* other) {
  colliderlist_.UnsafeArenaSwap(&other->colliderlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishColliderGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishColliderGroup_descriptor_;
  metadata.reflection = FishColliderGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishColliderGroup

// repeated .gt_msg.FishCollider colliderList = 1;
int FishColliderGroup::colliderlist_size() const {
  return colliderlist_.size();
}
void FishColliderGroup::clear_colliderlist() {
  colliderlist_.Clear();
}
const ::gt_msg::FishCollider& FishColliderGroup::colliderlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishColliderGroup.colliderList)
  return colliderlist_.Get(index);
}
::gt_msg::FishCollider* FishColliderGroup::mutable_colliderlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishColliderGroup.colliderList)
  return colliderlist_.Mutable(index);
}
::gt_msg::FishCollider* FishColliderGroup::add_colliderlist() {
  // @@protoc_insertion_point(field_add:gt_msg.FishColliderGroup.colliderList)
  return colliderlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FishCollider >*
FishColliderGroup::mutable_colliderlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishColliderGroup.colliderList)
  return &colliderlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FishCollider >&
FishColliderGroup::colliderlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishColliderGroup.colliderList)
  return colliderlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletData::kConfigIDFieldNumber;
const int BulletData::kModelFieldNumber;
const int BulletData::kSpeedFieldNumber;
const int BulletData::kRadiusFieldNumber;
const int BulletData::kYuwangModelFieldNumber;
const int BulletData::kTurretModelFieldNumber;
const int BulletData::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletData::BulletData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BulletData)
}

void BulletData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BulletData::BulletData(const BulletData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BulletData)
}

void BulletData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configid_ = 0;
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_ = 0;
  radius_ = 0;
  yuwangmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  turretmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multiple_ = 0;
}

BulletData::~BulletData() {
  // @@protoc_insertion_point(destructor:gt_msg.BulletData)
  SharedDtor();
}

void BulletData::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yuwangmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  turretmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BulletData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletData_descriptor_;
}

const BulletData& BulletData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BulletData* BulletData::default_instance_ = NULL;

BulletData* BulletData::New(::google::protobuf::Arena* arena) const {
  BulletData* n = new BulletData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulletData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BulletData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BulletData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BulletData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(configid_, speed_);
  ZR_(radius_, multiple_);
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yuwangmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  turretmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BulletData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BulletData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 configID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletData.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }

      // optional int32 speed = 3;
      case 3: {
        if (tag == 24) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_radius;
        break;
      }

      // optional float radius = 4;
      case 4: {
        if (tag == 37) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_yuwangModel;
        break;
      }

      // optional string yuwangModel = 5;
      case 5: {
        if (tag == 42) {
         parse_yuwangModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yuwangmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->yuwangmodel().data(), this->yuwangmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletData.yuwangModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_turretModel;
        break;
      }

      // optional string turretModel = 6;
      case 6: {
        if (tag == 50) {
         parse_turretModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_turretmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->turretmodel().data(), this->turretmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletData.turretModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 7;
      case 7: {
        if (tag == 56) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BulletData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BulletData)
  return false;
#undef DO_
}

void BulletData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BulletData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletData.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // optional int32 speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speed(), output);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // optional string yuwangModel = 5;
  if (this->yuwangmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yuwangmodel().data(), this->yuwangmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletData.yuwangModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->yuwangmodel(), output);
  }

  // optional string turretModel = 6;
  if (this->turretmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->turretmodel().data(), this->turretmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletData.turretModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->turretmodel(), output);
  }

  // optional int32 multiple = 7;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->multiple(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BulletData)
}

::google::protobuf::uint8* BulletData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BulletData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletData.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional int32 speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speed(), target);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // optional string yuwangModel = 5;
  if (this->yuwangmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yuwangmodel().data(), this->yuwangmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletData.yuwangModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->yuwangmodel(), target);
  }

  // optional string turretModel = 6;
  if (this->turretmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->turretmodel().data(), this->turretmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletData.turretModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->turretmodel(), target);
  }

  // optional int32 multiple = 7;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->multiple(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BulletData)
  return target;
}

int BulletData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BulletData)
  int total_size = 0;

  // optional int32 configID = 1;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configid());
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional int32 speed = 3;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // optional string yuwangModel = 5;
  if (this->yuwangmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yuwangmodel());
  }

  // optional string turretModel = 6;
  if (this->turretmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->turretmodel());
  }

  // optional int32 multiple = 7;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BulletData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulletData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulletData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BulletData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BulletData)
    MergeFrom(*source);
  }
}

void BulletData::MergeFrom(const BulletData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BulletData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.yuwangmodel().size() > 0) {

    yuwangmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yuwangmodel_);
  }
  if (from.turretmodel().size() > 0) {

    turretmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.turretmodel_);
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
}

void BulletData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BulletData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletData::CopyFrom(const BulletData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BulletData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletData::IsInitialized() const {

  return true;
}

void BulletData::Swap(BulletData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletData::InternalSwap(BulletData* other) {
  std::swap(configid_, other->configid_);
  model_.Swap(&other->model_);
  std::swap(speed_, other->speed_);
  std::swap(radius_, other->radius_);
  yuwangmodel_.Swap(&other->yuwangmodel_);
  turretmodel_.Swap(&other->turretmodel_);
  std::swap(multiple_, other->multiple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulletData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletData_descriptor_;
  metadata.reflection = BulletData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulletData

// optional int32 configID = 1;
void BulletData::clear_configid() {
  configid_ = 0;
}
 ::google::protobuf::int32 BulletData::configid() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.configID)
  return configid_;
}
 void BulletData::set_configid(::google::protobuf::int32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.configID)
}

// optional string model = 2;
void BulletData::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletData::model() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletData::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.model)
}
 void BulletData::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletData.model)
}
 void BulletData::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletData.model)
}
 ::std::string* BulletData::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletData.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletData::release_model() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletData.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletData::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletData.model)
}

// optional int32 speed = 3;
void BulletData::clear_speed() {
  speed_ = 0;
}
 ::google::protobuf::int32 BulletData::speed() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.speed)
  return speed_;
}
 void BulletData::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.speed)
}

// optional float radius = 4;
void BulletData::clear_radius() {
  radius_ = 0;
}
 float BulletData::radius() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.radius)
  return radius_;
}
 void BulletData::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.radius)
}

// optional string yuwangModel = 5;
void BulletData::clear_yuwangmodel() {
  yuwangmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletData::yuwangmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.yuwangModel)
  return yuwangmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletData::set_yuwangmodel(const ::std::string& value) {
  
  yuwangmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.yuwangModel)
}
 void BulletData::set_yuwangmodel(const char* value) {
  
  yuwangmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletData.yuwangModel)
}
 void BulletData::set_yuwangmodel(const char* value, size_t size) {
  
  yuwangmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletData.yuwangModel)
}
 ::std::string* BulletData::mutable_yuwangmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletData.yuwangModel)
  return yuwangmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletData::release_yuwangmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletData.yuwangModel)
  
  return yuwangmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletData::set_allocated_yuwangmodel(::std::string* yuwangmodel) {
  if (yuwangmodel != NULL) {
    
  } else {
    
  }
  yuwangmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yuwangmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletData.yuwangModel)
}

// optional string turretModel = 6;
void BulletData::clear_turretmodel() {
  turretmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletData::turretmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.turretModel)
  return turretmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletData::set_turretmodel(const ::std::string& value) {
  
  turretmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.turretModel)
}
 void BulletData::set_turretmodel(const char* value) {
  
  turretmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletData.turretModel)
}
 void BulletData::set_turretmodel(const char* value, size_t size) {
  
  turretmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletData.turretModel)
}
 ::std::string* BulletData::mutable_turretmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletData.turretModel)
  return turretmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletData::release_turretmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletData.turretModel)
  
  return turretmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletData::set_allocated_turretmodel(::std::string* turretmodel) {
  if (turretmodel != NULL) {
    
  } else {
    
  }
  turretmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turretmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletData.turretModel)
}

// optional int32 multiple = 7;
void BulletData::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 BulletData::multiple() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletData.multiple)
  return multiple_;
}
 void BulletData::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletData.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MagicData::kConfigIDFieldNumber;
const int MagicData::kModelFieldNumber;
const int MagicData::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MagicData::MagicData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.MagicData)
}

void MagicData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MagicData::MagicData(const MagicData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.MagicData)
}

void MagicData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configid_ = 0;
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multiple_ = 0;
}

MagicData::~MagicData() {
  // @@protoc_insertion_point(destructor:gt_msg.MagicData)
  SharedDtor();
}

void MagicData::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MagicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MagicData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicData_descriptor_;
}

const MagicData& MagicData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

MagicData* MagicData::default_instance_ = NULL;

MagicData* MagicData::New(::google::protobuf::Arena* arena) const {
  MagicData* n = new MagicData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MagicData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.MagicData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MagicData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MagicData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(configid_, multiple_);
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MagicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.MagicData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 configID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.MagicData.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 7;
      case 7: {
        if (tag == 56) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.MagicData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.MagicData)
  return false;
#undef DO_
}

void MagicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.MagicData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.MagicData.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // optional int32 multiple = 7;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->multiple(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.MagicData)
}

::google::protobuf::uint8* MagicData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.MagicData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.MagicData.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional int32 multiple = 7;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->multiple(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.MagicData)
  return target;
}

int MagicData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.MagicData)
  int total_size = 0;

  // optional int32 configID = 1;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configid());
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional int32 multiple = 7;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MagicData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.MagicData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MagicData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MagicData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.MagicData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.MagicData)
    MergeFrom(*source);
  }
}

void MagicData::MergeFrom(const MagicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.MagicData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
}

void MagicData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.MagicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicData::CopyFrom(const MagicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.MagicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicData::IsInitialized() const {

  return true;
}

void MagicData::Swap(MagicData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MagicData::InternalSwap(MagicData* other) {
  std::swap(configid_, other->configid_);
  model_.Swap(&other->model_);
  std::swap(multiple_, other->multiple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MagicData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicData_descriptor_;
  metadata.reflection = MagicData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MagicData

// optional int32 configID = 1;
void MagicData::clear_configid() {
  configid_ = 0;
}
 ::google::protobuf::int32 MagicData::configid() const {
  // @@protoc_insertion_point(field_get:gt_msg.MagicData.configID)
  return configid_;
}
 void MagicData::set_configid(::google::protobuf::int32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.MagicData.configID)
}

// optional string model = 2;
void MagicData::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MagicData::model() const {
  // @@protoc_insertion_point(field_get:gt_msg.MagicData.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MagicData::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.MagicData.model)
}
 void MagicData::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.MagicData.model)
}
 void MagicData::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.MagicData.model)
}
 ::std::string* MagicData::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.MagicData.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MagicData::release_model() {
  // @@protoc_insertion_point(field_release:gt_msg.MagicData.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MagicData::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.MagicData.model)
}

// optional int32 multiple = 7;
void MagicData::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 MagicData::multiple() const {
  // @@protoc_insertion_point(field_get:gt_msg.MagicData.multiple)
  return multiple_;
}
 void MagicData::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.MagicData.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropData::kConfigIDFieldNumber;
const int PropData::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropData::PropData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.PropData)
}

void PropData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PropData::PropData(const PropData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.PropData)
}

void PropData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  configid_ = 0;
  price_ = 0;
}

PropData::~PropData() {
  // @@protoc_insertion_point(destructor:gt_msg.PropData)
  SharedDtor();
}

void PropData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropData_descriptor_;
}

const PropData& PropData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

PropData* PropData::default_instance_ = NULL;

PropData* PropData::New(::google::protobuf::Arena* arena) const {
  PropData* n = new PropData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.PropData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(configid_, price_);

#undef ZR_HELPER_
#undef ZR_

}

bool PropData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.PropData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 configID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price;
        break;
      }

      // optional int32 price = 7;
      case 7: {
        if (tag == 56) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.PropData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.PropData)
  return false;
#undef DO_
}

void PropData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.PropData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional int32 price = 7;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.PropData)
}

::google::protobuf::uint8* PropData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.PropData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional int32 price = 7;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.PropData)
  return target;
}

int PropData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.PropData)
  int total_size = 0;

  // optional int32 configID = 1;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configid());
  }

  // optional int32 price = 7;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.PropData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PropData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PropData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.PropData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.PropData)
    MergeFrom(*source);
  }
}

void PropData::MergeFrom(const PropData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.PropData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void PropData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.PropData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropData::CopyFrom(const PropData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.PropData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropData::IsInitialized() const {

  return true;
}

void PropData::Swap(PropData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropData::InternalSwap(PropData* other) {
  std::swap(configid_, other->configid_);
  std::swap(price_, other->price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropData_descriptor_;
  metadata.reflection = PropData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropData

// optional int32 configID = 1;
void PropData::clear_configid() {
  configid_ = 0;
}
 ::google::protobuf::int32 PropData::configid() const {
  // @@protoc_insertion_point(field_get:gt_msg.PropData.configID)
  return configid_;
}
 void PropData::set_configid(::google::protobuf::int32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.PropData.configID)
}

// optional int32 price = 7;
void PropData::clear_price() {
  price_ = 0;
}
 ::google::protobuf::int32 PropData::price() const {
  // @@protoc_insertion_point(field_get:gt_msg.PropData.price)
  return price_;
}
 void PropData::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.PropData.price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletExtern::kTurretIDFieldNumber;
const int BulletExtern::kTurretModelFieldNumber;
const int BulletExtern::kConfigIDFieldNumber;
const int BulletExtern::kBulletModelFieldNumber;
const int BulletExtern::kNetModelFieldNumber;
const int BulletExtern::kMultipleFieldNumber;
const int BulletExtern::kSpeedFieldNumber;
const int BulletExtern::kRadiusFieldNumber;
const int BulletExtern::kSoundIndexFieldNumber;
const int BulletExtern::kPaokouFieldNumber;
const int BulletExtern::kSkillModelFieldNumber;
const int BulletExtern::kSkillbgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletExtern::BulletExtern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BulletExtern)
}

void BulletExtern::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BulletExtern::BulletExtern(const BulletExtern& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BulletExtern)
}

void BulletExtern::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  turretid_ = 0;
  turretmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configid_ = 0;
  bulletmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multiple_ = 0;
  speed_ = 0;
  radius_ = 0;
  soundindex_ = 0;
  paokou_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillbg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BulletExtern::~BulletExtern() {
  // @@protoc_insertion_point(destructor:gt_msg.BulletExtern)
  SharedDtor();
}

void BulletExtern::SharedDtor() {
  turretmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paokou_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillbg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BulletExtern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletExtern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletExtern_descriptor_;
}

const BulletExtern& BulletExtern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BulletExtern* BulletExtern::default_instance_ = NULL;

BulletExtern* BulletExtern::New(::google::protobuf::Arena* arena) const {
  BulletExtern* n = new BulletExtern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulletExtern::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BulletExtern)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BulletExtern, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BulletExtern*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(turretid_, configid_);
  ZR_(multiple_, radius_);
  turretmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soundindex_ = 0;
  paokou_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillbg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BulletExtern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BulletExtern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TurretID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turretid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TurretModel;
        break;
      }

      // optional string TurretModel = 2;
      case 2: {
        if (tag == 18) {
         parse_TurretModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_turretmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->turretmodel().data(), this->turretmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletExtern.TurretModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ConfigID;
        break;
      }

      // optional int32 ConfigID = 3;
      case 3: {
        if (tag == 24) {
         parse_ConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BulletModel;
        break;
      }

      // optional string BulletModel = 4;
      case 4: {
        if (tag == 34) {
         parse_BulletModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bulletmodel().data(), this->bulletmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletExtern.BulletModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_NetModel;
        break;
      }

      // optional string NetModel = 5;
      case 5: {
        if (tag == 42) {
         parse_NetModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->netmodel().data(), this->netmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletExtern.NetModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Multiple;
        break;
      }

      // optional int32 Multiple = 6;
      case 6: {
        if (tag == 48) {
         parse_Multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Speed;
        break;
      }

      // optional int32 Speed = 7;
      case 7: {
        if (tag == 56) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_Radius;
        break;
      }

      // optional float Radius = 8;
      case 8: {
        if (tag == 69) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_SoundIndex;
        break;
      }

      // optional int32 SoundIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_SoundIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Paokou;
        break;
      }

      // optional string Paokou = 10;
      case 10: {
        if (tag == 82) {
         parse_Paokou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paokou()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->paokou().data(), this->paokou().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletExtern.Paokou"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SkillModel;
        break;
      }

      // optional string SkillModel = 11;
      case 11: {
        if (tag == 90) {
         parse_SkillModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skillmodel().data(), this->skillmodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletExtern.SkillModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Skillbg;
        break;
      }

      // optional string Skillbg = 12;
      case 12: {
        if (tag == 98) {
         parse_Skillbg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillbg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skillbg().data(), this->skillbg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BulletExtern.Skillbg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BulletExtern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BulletExtern)
  return false;
#undef DO_
}

void BulletExtern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BulletExtern)
  // optional int32 TurretID = 1;
  if (this->turretid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->turretid(), output);
  }

  // optional string TurretModel = 2;
  if (this->turretmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->turretmodel().data(), this->turretmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.TurretModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->turretmodel(), output);
  }

  // optional int32 ConfigID = 3;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configid(), output);
  }

  // optional string BulletModel = 4;
  if (this->bulletmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bulletmodel().data(), this->bulletmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.BulletModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bulletmodel(), output);
  }

  // optional string NetModel = 5;
  if (this->netmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmodel().data(), this->netmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.NetModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->netmodel(), output);
  }

  // optional int32 Multiple = 6;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->multiple(), output);
  }

  // optional int32 Speed = 7;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->speed(), output);
  }

  // optional float Radius = 8;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->radius(), output);
  }

  // optional int32 SoundIndex = 9;
  if (this->soundindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->soundindex(), output);
  }

  // optional string Paokou = 10;
  if (this->paokou().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paokou().data(), this->paokou().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.Paokou");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->paokou(), output);
  }

  // optional string SkillModel = 11;
  if (this->skillmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skillmodel().data(), this->skillmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.SkillModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->skillmodel(), output);
  }

  // optional string Skillbg = 12;
  if (this->skillbg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skillbg().data(), this->skillbg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.Skillbg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->skillbg(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BulletExtern)
}

::google::protobuf::uint8* BulletExtern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BulletExtern)
  // optional int32 TurretID = 1;
  if (this->turretid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->turretid(), target);
  }

  // optional string TurretModel = 2;
  if (this->turretmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->turretmodel().data(), this->turretmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.TurretModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->turretmodel(), target);
  }

  // optional int32 ConfigID = 3;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configid(), target);
  }

  // optional string BulletModel = 4;
  if (this->bulletmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bulletmodel().data(), this->bulletmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.BulletModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bulletmodel(), target);
  }

  // optional string NetModel = 5;
  if (this->netmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmodel().data(), this->netmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.NetModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->netmodel(), target);
  }

  // optional int32 Multiple = 6;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->multiple(), target);
  }

  // optional int32 Speed = 7;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->speed(), target);
  }

  // optional float Radius = 8;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->radius(), target);
  }

  // optional int32 SoundIndex = 9;
  if (this->soundindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->soundindex(), target);
  }

  // optional string Paokou = 10;
  if (this->paokou().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paokou().data(), this->paokou().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.Paokou");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->paokou(), target);
  }

  // optional string SkillModel = 11;
  if (this->skillmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skillmodel().data(), this->skillmodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.SkillModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->skillmodel(), target);
  }

  // optional string Skillbg = 12;
  if (this->skillbg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skillbg().data(), this->skillbg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BulletExtern.Skillbg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->skillbg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BulletExtern)
  return target;
}

int BulletExtern::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BulletExtern)
  int total_size = 0;

  // optional int32 TurretID = 1;
  if (this->turretid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turretid());
  }

  // optional string TurretModel = 2;
  if (this->turretmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->turretmodel());
  }

  // optional int32 ConfigID = 3;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configid());
  }

  // optional string BulletModel = 4;
  if (this->bulletmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bulletmodel());
  }

  // optional string NetModel = 5;
  if (this->netmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->netmodel());
  }

  // optional int32 Multiple = 6;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  // optional int32 Speed = 7;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional float Radius = 8;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 SoundIndex = 9;
  if (this->soundindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->soundindex());
  }

  // optional string Paokou = 10;
  if (this->paokou().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paokou());
  }

  // optional string SkillModel = 11;
  if (this->skillmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skillmodel());
  }

  // optional string Skillbg = 12;
  if (this->skillbg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skillbg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletExtern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BulletExtern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulletExtern* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulletExtern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BulletExtern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BulletExtern)
    MergeFrom(*source);
  }
}

void BulletExtern::MergeFrom(const BulletExtern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BulletExtern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.turretid() != 0) {
    set_turretid(from.turretid());
  }
  if (from.turretmodel().size() > 0) {

    turretmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.turretmodel_);
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
  if (from.bulletmodel().size() > 0) {

    bulletmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bulletmodel_);
  }
  if (from.netmodel().size() > 0) {

    netmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmodel_);
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.soundindex() != 0) {
    set_soundindex(from.soundindex());
  }
  if (from.paokou().size() > 0) {

    paokou_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paokou_);
  }
  if (from.skillmodel().size() > 0) {

    skillmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skillmodel_);
  }
  if (from.skillbg().size() > 0) {

    skillbg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skillbg_);
  }
}

void BulletExtern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BulletExtern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletExtern::CopyFrom(const BulletExtern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BulletExtern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletExtern::IsInitialized() const {

  return true;
}

void BulletExtern::Swap(BulletExtern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletExtern::InternalSwap(BulletExtern* other) {
  std::swap(turretid_, other->turretid_);
  turretmodel_.Swap(&other->turretmodel_);
  std::swap(configid_, other->configid_);
  bulletmodel_.Swap(&other->bulletmodel_);
  netmodel_.Swap(&other->netmodel_);
  std::swap(multiple_, other->multiple_);
  std::swap(speed_, other->speed_);
  std::swap(radius_, other->radius_);
  std::swap(soundindex_, other->soundindex_);
  paokou_.Swap(&other->paokou_);
  skillmodel_.Swap(&other->skillmodel_);
  skillbg_.Swap(&other->skillbg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulletExtern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletExtern_descriptor_;
  metadata.reflection = BulletExtern_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulletExtern

// optional int32 TurretID = 1;
void BulletExtern::clear_turretid() {
  turretid_ = 0;
}
 ::google::protobuf::int32 BulletExtern::turretid() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.TurretID)
  return turretid_;
}
 void BulletExtern::set_turretid(::google::protobuf::int32 value) {
  
  turretid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.TurretID)
}

// optional string TurretModel = 2;
void BulletExtern::clear_turretmodel() {
  turretmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletExtern::turretmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.TurretModel)
  return turretmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_turretmodel(const ::std::string& value) {
  
  turretmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.TurretModel)
}
 void BulletExtern::set_turretmodel(const char* value) {
  
  turretmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletExtern.TurretModel)
}
 void BulletExtern::set_turretmodel(const char* value, size_t size) {
  
  turretmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletExtern.TurretModel)
}
 ::std::string* BulletExtern::mutable_turretmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletExtern.TurretModel)
  return turretmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletExtern::release_turretmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletExtern.TurretModel)
  
  return turretmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_allocated_turretmodel(::std::string* turretmodel) {
  if (turretmodel != NULL) {
    
  } else {
    
  }
  turretmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turretmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletExtern.TurretModel)
}

// optional int32 ConfigID = 3;
void BulletExtern::clear_configid() {
  configid_ = 0;
}
 ::google::protobuf::int32 BulletExtern::configid() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.ConfigID)
  return configid_;
}
 void BulletExtern::set_configid(::google::protobuf::int32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.ConfigID)
}

// optional string BulletModel = 4;
void BulletExtern::clear_bulletmodel() {
  bulletmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletExtern::bulletmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.BulletModel)
  return bulletmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_bulletmodel(const ::std::string& value) {
  
  bulletmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.BulletModel)
}
 void BulletExtern::set_bulletmodel(const char* value) {
  
  bulletmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletExtern.BulletModel)
}
 void BulletExtern::set_bulletmodel(const char* value, size_t size) {
  
  bulletmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletExtern.BulletModel)
}
 ::std::string* BulletExtern::mutable_bulletmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletExtern.BulletModel)
  return bulletmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletExtern::release_bulletmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletExtern.BulletModel)
  
  return bulletmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_allocated_bulletmodel(::std::string* bulletmodel) {
  if (bulletmodel != NULL) {
    
  } else {
    
  }
  bulletmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bulletmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletExtern.BulletModel)
}

// optional string NetModel = 5;
void BulletExtern::clear_netmodel() {
  netmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletExtern::netmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.NetModel)
  return netmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_netmodel(const ::std::string& value) {
  
  netmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.NetModel)
}
 void BulletExtern::set_netmodel(const char* value) {
  
  netmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletExtern.NetModel)
}
 void BulletExtern::set_netmodel(const char* value, size_t size) {
  
  netmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletExtern.NetModel)
}
 ::std::string* BulletExtern::mutable_netmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletExtern.NetModel)
  return netmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletExtern::release_netmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletExtern.NetModel)
  
  return netmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_allocated_netmodel(::std::string* netmodel) {
  if (netmodel != NULL) {
    
  } else {
    
  }
  netmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletExtern.NetModel)
}

// optional int32 Multiple = 6;
void BulletExtern::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 BulletExtern::multiple() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.Multiple)
  return multiple_;
}
 void BulletExtern::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.Multiple)
}

// optional int32 Speed = 7;
void BulletExtern::clear_speed() {
  speed_ = 0;
}
 ::google::protobuf::int32 BulletExtern::speed() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.Speed)
  return speed_;
}
 void BulletExtern::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.Speed)
}

// optional float Radius = 8;
void BulletExtern::clear_radius() {
  radius_ = 0;
}
 float BulletExtern::radius() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.Radius)
  return radius_;
}
 void BulletExtern::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.Radius)
}

// optional int32 SoundIndex = 9;
void BulletExtern::clear_soundindex() {
  soundindex_ = 0;
}
 ::google::protobuf::int32 BulletExtern::soundindex() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.SoundIndex)
  return soundindex_;
}
 void BulletExtern::set_soundindex(::google::protobuf::int32 value) {
  
  soundindex_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.SoundIndex)
}

// optional string Paokou = 10;
void BulletExtern::clear_paokou() {
  paokou_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletExtern::paokou() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.Paokou)
  return paokou_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_paokou(const ::std::string& value) {
  
  paokou_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.Paokou)
}
 void BulletExtern::set_paokou(const char* value) {
  
  paokou_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletExtern.Paokou)
}
 void BulletExtern::set_paokou(const char* value, size_t size) {
  
  paokou_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletExtern.Paokou)
}
 ::std::string* BulletExtern::mutable_paokou() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletExtern.Paokou)
  return paokou_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletExtern::release_paokou() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletExtern.Paokou)
  
  return paokou_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_allocated_paokou(::std::string* paokou) {
  if (paokou != NULL) {
    
  } else {
    
  }
  paokou_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paokou);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletExtern.Paokou)
}

// optional string SkillModel = 11;
void BulletExtern::clear_skillmodel() {
  skillmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletExtern::skillmodel() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.SkillModel)
  return skillmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_skillmodel(const ::std::string& value) {
  
  skillmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.SkillModel)
}
 void BulletExtern::set_skillmodel(const char* value) {
  
  skillmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletExtern.SkillModel)
}
 void BulletExtern::set_skillmodel(const char* value, size_t size) {
  
  skillmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletExtern.SkillModel)
}
 ::std::string* BulletExtern::mutable_skillmodel() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletExtern.SkillModel)
  return skillmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletExtern::release_skillmodel() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletExtern.SkillModel)
  
  return skillmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_allocated_skillmodel(::std::string* skillmodel) {
  if (skillmodel != NULL) {
    
  } else {
    
  }
  skillmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skillmodel);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletExtern.SkillModel)
}

// optional string Skillbg = 12;
void BulletExtern::clear_skillbg() {
  skillbg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletExtern::skillbg() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletExtern.Skillbg)
  return skillbg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_skillbg(const ::std::string& value) {
  
  skillbg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BulletExtern.Skillbg)
}
 void BulletExtern::set_skillbg(const char* value) {
  
  skillbg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BulletExtern.Skillbg)
}
 void BulletExtern::set_skillbg(const char* value, size_t size) {
  
  skillbg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BulletExtern.Skillbg)
}
 ::std::string* BulletExtern::mutable_skillbg() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletExtern.Skillbg)
  return skillbg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletExtern::release_skillbg() {
  // @@protoc_insertion_point(field_release:gt_msg.BulletExtern.Skillbg)
  
  return skillbg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletExtern::set_allocated_skillbg(::std::string* skillbg) {
  if (skillbg != NULL) {
    
  } else {
    
  }
  skillbg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skillbg);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BulletExtern.Skillbg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletConfig::kBulletListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletConfig::BulletConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BulletConfig)
}

void BulletConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BulletConfig::BulletConfig(const BulletConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BulletConfig)
}

void BulletConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BulletConfig::~BulletConfig() {
  // @@protoc_insertion_point(destructor:gt_msg.BulletConfig)
  SharedDtor();
}

void BulletConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletConfig_descriptor_;
}

const BulletConfig& BulletConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BulletConfig* BulletConfig::default_instance_ = NULL;

BulletConfig* BulletConfig::New(::google::protobuf::Arena* arena) const {
  BulletConfig* n = new BulletConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulletConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BulletConfig)
  bulletlist_.Clear();
}

bool BulletConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BulletConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.BulletExtern bulletList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bulletList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bulletlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_bulletList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BulletConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BulletConfig)
  return false;
#undef DO_
}

void BulletConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BulletConfig)
  // repeated .gt_msg.BulletExtern bulletList = 1;
  for (unsigned int i = 0, n = this->bulletlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bulletlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BulletConfig)
}

::google::protobuf::uint8* BulletConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BulletConfig)
  // repeated .gt_msg.BulletExtern bulletList = 1;
  for (unsigned int i = 0, n = this->bulletlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bulletlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BulletConfig)
  return target;
}

int BulletConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BulletConfig)
  int total_size = 0;

  // repeated .gt_msg.BulletExtern bulletList = 1;
  total_size += 1 * this->bulletlist_size();
  for (int i = 0; i < this->bulletlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BulletConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulletConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulletConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BulletConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BulletConfig)
    MergeFrom(*source);
  }
}

void BulletConfig::MergeFrom(const BulletConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BulletConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bulletlist_.MergeFrom(from.bulletlist_);
}

void BulletConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BulletConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletConfig::CopyFrom(const BulletConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BulletConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletConfig::IsInitialized() const {

  return true;
}

void BulletConfig::Swap(BulletConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletConfig::InternalSwap(BulletConfig* other) {
  bulletlist_.UnsafeArenaSwap(&other->bulletlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulletConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletConfig_descriptor_;
  metadata.reflection = BulletConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulletConfig

// repeated .gt_msg.BulletExtern bulletList = 1;
int BulletConfig::bulletlist_size() const {
  return bulletlist_.size();
}
void BulletConfig::clear_bulletlist() {
  bulletlist_.Clear();
}
const ::gt_msg::BulletExtern& BulletConfig::bulletlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletConfig.bulletList)
  return bulletlist_.Get(index);
}
::gt_msg::BulletExtern* BulletConfig::mutable_bulletlist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.BulletConfig.bulletList)
  return bulletlist_.Mutable(index);
}
::gt_msg::BulletExtern* BulletConfig::add_bulletlist() {
  // @@protoc_insertion_point(field_add:gt_msg.BulletConfig.bulletList)
  return bulletlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::BulletExtern >*
BulletConfig::mutable_bulletlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.BulletConfig.bulletList)
  return &bulletlist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::BulletExtern >&
BulletConfig::bulletlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.BulletConfig.bulletList)
  return bulletlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstantData::kConfigIDFieldNumber;
const int InstantData::kMultipleFieldNumber;
const int InstantData::kSpeedFieldNumber;
const int InstantData::kModelFieldNumber;
const int InstantData::kEffectFieldNumber;
const int InstantData::kDiscribeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstantData::InstantData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.InstantData)
}

void InstantData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InstantData::InstantData(const InstantData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.InstantData)
}

void InstantData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configid_ = 0;
  multiple_ = 0;
  speed_ = 0;
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discribe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InstantData::~InstantData() {
  // @@protoc_insertion_point(destructor:gt_msg.InstantData)
  SharedDtor();
}

void InstantData::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discribe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InstantData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstantData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstantData_descriptor_;
}

const InstantData& InstantData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

InstantData* InstantData::default_instance_ = NULL;

InstantData* InstantData::New(::google::protobuf::Arena* arena) const {
  InstantData* n = new InstantData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstantData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.InstantData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InstantData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InstantData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(configid_, multiple_);
  speed_ = 0;
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool InstantData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.InstantData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 configID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 2;
      case 2: {
        if (tag == 16) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }

      // optional int32 speed = 3;
      case 3: {
        if (tag == 24) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // optional string model = 4;
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.InstantData.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_effect;
        break;
      }

      // optional string effect = 5;
      case 5: {
        if (tag == 42) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.InstantData.effect"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_discribe;
        break;
      }

      // optional string discribe = 6;
      case 6: {
        if (tag == 50) {
         parse_discribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discribe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->discribe().data(), this->discribe().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.InstantData.discribe"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.InstantData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.InstantData)
  return false;
#undef DO_
}

void InstantData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.InstantData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional int32 multiple = 2;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->multiple(), output);
  }

  // optional int32 speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speed(), output);
  }

  // optional string model = 4;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.InstantData.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string effect = 5;
  if (this->effect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.InstantData.effect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->effect(), output);
  }

  // optional string discribe = 6;
  if (this->discribe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discribe().data(), this->discribe().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.InstantData.discribe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->discribe(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.InstantData)
}

::google::protobuf::uint8* InstantData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.InstantData)
  // optional int32 configID = 1;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional int32 multiple = 2;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->multiple(), target);
  }

  // optional int32 speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speed(), target);
  }

  // optional string model = 4;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.InstantData.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional string effect = 5;
  if (this->effect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.InstantData.effect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->effect(), target);
  }

  // optional string discribe = 6;
  if (this->discribe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discribe().data(), this->discribe().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.InstantData.discribe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->discribe(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.InstantData)
  return target;
}

int InstantData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.InstantData)
  int total_size = 0;

  // optional int32 configID = 1;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configid());
  }

  // optional int32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  // optional int32 speed = 3;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional string model = 4;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional string effect = 5;
  if (this->effect().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->effect());
  }

  // optional string discribe = 6;
  if (this->discribe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->discribe());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.InstantData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstantData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstantData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.InstantData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.InstantData)
    MergeFrom(*source);
  }
}

void InstantData::MergeFrom(const InstantData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.InstantData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.effect().size() > 0) {

    effect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect_);
  }
  if (from.discribe().size() > 0) {

    discribe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discribe_);
  }
}

void InstantData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.InstantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantData::CopyFrom(const InstantData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.InstantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantData::IsInitialized() const {

  return true;
}

void InstantData::Swap(InstantData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstantData::InternalSwap(InstantData* other) {
  std::swap(configid_, other->configid_);
  std::swap(multiple_, other->multiple_);
  std::swap(speed_, other->speed_);
  model_.Swap(&other->model_);
  effect_.Swap(&other->effect_);
  discribe_.Swap(&other->discribe_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstantData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstantData_descriptor_;
  metadata.reflection = InstantData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstantData

// optional int32 configID = 1;
void InstantData::clear_configid() {
  configid_ = 0;
}
 ::google::protobuf::int32 InstantData::configid() const {
  // @@protoc_insertion_point(field_get:gt_msg.InstantData.configID)
  return configid_;
}
 void InstantData::set_configid(::google::protobuf::int32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.InstantData.configID)
}

// optional int32 multiple = 2;
void InstantData::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 InstantData::multiple() const {
  // @@protoc_insertion_point(field_get:gt_msg.InstantData.multiple)
  return multiple_;
}
 void InstantData::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.InstantData.multiple)
}

// optional int32 speed = 3;
void InstantData::clear_speed() {
  speed_ = 0;
}
 ::google::protobuf::int32 InstantData::speed() const {
  // @@protoc_insertion_point(field_get:gt_msg.InstantData.speed)
  return speed_;
}
 void InstantData::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.InstantData.speed)
}

// optional string model = 4;
void InstantData::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InstantData::model() const {
  // @@protoc_insertion_point(field_get:gt_msg.InstantData.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstantData::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.InstantData.model)
}
 void InstantData::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.InstantData.model)
}
 void InstantData::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.InstantData.model)
}
 ::std::string* InstantData::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.InstantData.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstantData::release_model() {
  // @@protoc_insertion_point(field_release:gt_msg.InstantData.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstantData::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.InstantData.model)
}

// optional string effect = 5;
void InstantData::clear_effect() {
  effect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InstantData::effect() const {
  // @@protoc_insertion_point(field_get:gt_msg.InstantData.effect)
  return effect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstantData::set_effect(const ::std::string& value) {
  
  effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.InstantData.effect)
}
 void InstantData::set_effect(const char* value) {
  
  effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.InstantData.effect)
}
 void InstantData::set_effect(const char* value, size_t size) {
  
  effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.InstantData.effect)
}
 ::std::string* InstantData::mutable_effect() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.InstantData.effect)
  return effect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstantData::release_effect() {
  // @@protoc_insertion_point(field_release:gt_msg.InstantData.effect)
  
  return effect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstantData::set_allocated_effect(::std::string* effect) {
  if (effect != NULL) {
    
  } else {
    
  }
  effect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effect);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.InstantData.effect)
}

// optional string discribe = 6;
void InstantData::clear_discribe() {
  discribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InstantData::discribe() const {
  // @@protoc_insertion_point(field_get:gt_msg.InstantData.discribe)
  return discribe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstantData::set_discribe(const ::std::string& value) {
  
  discribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.InstantData.discribe)
}
 void InstantData::set_discribe(const char* value) {
  
  discribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.InstantData.discribe)
}
 void InstantData::set_discribe(const char* value, size_t size) {
  
  discribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.InstantData.discribe)
}
 ::std::string* InstantData::mutable_discribe() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.InstantData.discribe)
  return discribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstantData::release_discribe() {
  // @@protoc_insertion_point(field_release:gt_msg.InstantData.discribe)
  
  return discribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstantData::set_allocated_discribe(::std::string* discribe) {
  if (discribe != NULL) {
    
  } else {
    
  }
  discribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discribe);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.InstantData.discribe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreezeData::kFrameFieldNumber;
const int FreezeData::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreezeData::FreezeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FreezeData)
}

void FreezeData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FreezeData::FreezeData(const FreezeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FreezeData)
}

void FreezeData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
  duration_ = 0;
}

FreezeData::~FreezeData() {
  // @@protoc_insertion_point(destructor:gt_msg.FreezeData)
  SharedDtor();
}

void FreezeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreezeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreezeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreezeData_descriptor_;
}

const FreezeData& FreezeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FreezeData* FreezeData::default_instance_ = NULL;

FreezeData* FreezeData::New(::google::protobuf::Arena* arena) const {
  FreezeData* n = new FreezeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreezeData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FreezeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FreezeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FreezeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, duration_);

#undef ZR_HELPER_
#undef ZR_

}

bool FreezeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FreezeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FreezeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FreezeData)
  return false;
#undef DO_
}

void FreezeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FreezeData)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FreezeData)
}

::google::protobuf::uint8* FreezeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FreezeData)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FreezeData)
  return target;
}

int FreezeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FreezeData)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreezeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FreezeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FreezeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FreezeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FreezeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FreezeData)
    MergeFrom(*source);
  }
}

void FreezeData::MergeFrom(const FreezeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FreezeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void FreezeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FreezeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreezeData::CopyFrom(const FreezeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FreezeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeData::IsInitialized() const {

  return true;
}

void FreezeData::Swap(FreezeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreezeData::InternalSwap(FreezeData* other) {
  std::swap(frame_, other->frame_);
  std::swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreezeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreezeData_descriptor_;
  metadata.reflection = FreezeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FreezeData

// optional int32 frame = 1;
void FreezeData::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 FreezeData::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.FreezeData.frame)
  return frame_;
}
 void FreezeData::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FreezeData.frame)
}

// optional int32 duration = 2;
void FreezeData::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 FreezeData::duration() const {
  // @@protoc_insertion_point(field_get:gt_msg.FreezeData.duration)
  return duration_;
}
 void FreezeData::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FreezeData.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastData::kFrameFieldNumber;
const int FastData::kSpeedFieldNumber;
const int FastData::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastData::FastData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FastData)
}

void FastData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FastData::FastData(const FastData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FastData)
}

void FastData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
  speed_ = 0;
  duration_ = 0;
}

FastData::~FastData() {
  // @@protoc_insertion_point(destructor:gt_msg.FastData)
  SharedDtor();
}

void FastData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FastData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastData_descriptor_;
}

const FastData& FastData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FastData* FastData::default_instance_ = NULL;

FastData* FastData::New(::google::protobuf::Arena* arena) const {
  FastData* n = new FastData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FastData::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FastData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FastData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FastData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, duration_);

#undef ZR_HELPER_
#undef ZR_

}

bool FastData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FastData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_speed;
        break;
      }

      // optional float speed = 2;
      case 2: {
        if (tag == 21) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Duration;
        break;
      }

      // optional int32 Duration = 3;
      case 3: {
        if (tag == 24) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FastData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FastData)
  return false;
#undef DO_
}

void FastData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FastData)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional float speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // optional int32 Duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FastData)
}

::google::protobuf::uint8* FastData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FastData)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional float speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // optional int32 Duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FastData)
  return target;
}

int FastData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FastData)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional float speed = 2;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 Duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FastData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FastData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FastData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FastData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FastData)
    MergeFrom(*source);
  }
}

void FastData::MergeFrom(const FastData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FastData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void FastData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FastData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastData::CopyFrom(const FastData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FastData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastData::IsInitialized() const {

  return true;
}

void FastData::Swap(FastData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastData::InternalSwap(FastData* other) {
  std::swap(frame_, other->frame_);
  std::swap(speed_, other->speed_);
  std::swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FastData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastData_descriptor_;
  metadata.reflection = FastData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FastData

// optional int32 frame = 1;
void FastData::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 FastData::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastData.frame)
  return frame_;
}
 void FastData::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastData.frame)
}

// optional float speed = 2;
void FastData::clear_speed() {
  speed_ = 0;
}
 float FastData::speed() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastData.speed)
  return speed_;
}
 void FastData::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastData.speed)
}

// optional int32 Duration = 3;
void FastData::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 FastData::duration() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastData.Duration)
  return duration_;
}
 void FastData::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastData.Duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinFreeRequestfish3d::kUserIdFieldNumber;
const int JoinFreeRequestfish3d::kTableIdFieldNumber;
const int JoinFreeRequestfish3d::kSeatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinFreeRequestfish3d::JoinFreeRequestfish3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.JoinFreeRequestfish3d)
}

void JoinFreeRequestfish3d::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JoinFreeRequestfish3d::JoinFreeRequestfish3d(const JoinFreeRequestfish3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.JoinFreeRequestfish3d)
}

void JoinFreeRequestfish3d::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  seatid_ = 0;
}

JoinFreeRequestfish3d::~JoinFreeRequestfish3d() {
  // @@protoc_insertion_point(destructor:gt_msg.JoinFreeRequestfish3d)
  SharedDtor();
}

void JoinFreeRequestfish3d::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void JoinFreeRequestfish3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinFreeRequestfish3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinFreeRequestfish3d_descriptor_;
}

const JoinFreeRequestfish3d& JoinFreeRequestfish3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

JoinFreeRequestfish3d* JoinFreeRequestfish3d::default_instance_ = NULL;

JoinFreeRequestfish3d* JoinFreeRequestfish3d::New(::google::protobuf::Arena* arena) const {
  JoinFreeRequestfish3d* n = new JoinFreeRequestfish3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinFreeRequestfish3d::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.JoinFreeRequestfish3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinFreeRequestfish3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinFreeRequestfish3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tableid_, seatid_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool JoinFreeRequestfish3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.JoinFreeRequestfish3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.JoinFreeRequestfish3d.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // optional int32 tableId = 2;
      case 2: {
        if (tag == 16) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatId;
        break;
      }

      // optional int32 seatId = 3;
      case 3: {
        if (tag == 24) {
         parse_seatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.JoinFreeRequestfish3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.JoinFreeRequestfish3d)
  return false;
#undef DO_
}

void JoinFreeRequestfish3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.JoinFreeRequestfish3d)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.JoinFreeRequestfish3d.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int32 tableId = 2;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 seatId = 3;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.JoinFreeRequestfish3d)
}

::google::protobuf::uint8* JoinFreeRequestfish3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.JoinFreeRequestfish3d)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.JoinFreeRequestfish3d.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional int32 tableId = 2;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 seatId = 3;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.JoinFreeRequestfish3d)
  return target;
}

int JoinFreeRequestfish3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.JoinFreeRequestfish3d)
  int total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 tableId = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tableid());
  }

  // optional int32 seatId = 3;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinFreeRequestfish3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.JoinFreeRequestfish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JoinFreeRequestfish3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinFreeRequestfish3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.JoinFreeRequestfish3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.JoinFreeRequestfish3d)
    MergeFrom(*source);
  }
}

void JoinFreeRequestfish3d::MergeFrom(const JoinFreeRequestfish3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.JoinFreeRequestfish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
}

void JoinFreeRequestfish3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.JoinFreeRequestfish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinFreeRequestfish3d::CopyFrom(const JoinFreeRequestfish3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.JoinFreeRequestfish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinFreeRequestfish3d::IsInitialized() const {

  return true;
}

void JoinFreeRequestfish3d::Swap(JoinFreeRequestfish3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinFreeRequestfish3d::InternalSwap(JoinFreeRequestfish3d* other) {
  userid_.Swap(&other->userid_);
  std::swap(tableid_, other->tableid_);
  std::swap(seatid_, other->seatid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinFreeRequestfish3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinFreeRequestfish3d_descriptor_;
  metadata.reflection = JoinFreeRequestfish3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinFreeRequestfish3d

// optional string userId = 1;
void JoinFreeRequestfish3d::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& JoinFreeRequestfish3d::userid() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeRequestfish3d.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinFreeRequestfish3d::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeRequestfish3d.userId)
}
 void JoinFreeRequestfish3d::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.JoinFreeRequestfish3d.userId)
}
 void JoinFreeRequestfish3d::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.JoinFreeRequestfish3d.userId)
}
 ::std::string* JoinFreeRequestfish3d::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.JoinFreeRequestfish3d.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JoinFreeRequestfish3d::release_userid() {
  // @@protoc_insertion_point(field_release:gt_msg.JoinFreeRequestfish3d.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinFreeRequestfish3d::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.JoinFreeRequestfish3d.userId)
}

// optional int32 tableId = 2;
void JoinFreeRequestfish3d::clear_tableid() {
  tableid_ = 0;
}
 ::google::protobuf::int32 JoinFreeRequestfish3d::tableid() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeRequestfish3d.tableId)
  return tableid_;
}
 void JoinFreeRequestfish3d::set_tableid(::google::protobuf::int32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeRequestfish3d.tableId)
}

// optional int32 seatId = 3;
void JoinFreeRequestfish3d::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 JoinFreeRequestfish3d::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeRequestfish3d.seatId)
  return seatid_;
}
 void JoinFreeRequestfish3d::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeRequestfish3d.seatId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinFreeResponsefish3d::kNowFrameFieldNumber;
const int JoinFreeResponsefish3d::kRootMessageFieldNumber;
const int JoinFreeResponsefish3d::kScoreRatioFieldNumber;
const int JoinFreeResponsefish3d::kBcFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionTimeAllFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionTimeRemainFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionRedPackSumFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionBulletTurretidFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionBulletConfigIdFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionBulletCountFieldNumber;
const int JoinFreeResponsefish3d::kCompetitionBulletRemainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinFreeResponsefish3d::JoinFreeResponsefish3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.JoinFreeResponsefish3d)
}

void JoinFreeResponsefish3d::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  bc_ = const_cast< ::gt_msg::BulletConfig*>(&::gt_msg::BulletConfig::default_instance());
}

JoinFreeResponsefish3d::JoinFreeResponsefish3d(const JoinFreeResponsefish3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.JoinFreeResponsefish3d)
}

void JoinFreeResponsefish3d::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nowframe_ = 0;
  scoreratio_ = 0;
  bc_ = NULL;
  competitiontimeall_ = 0;
  competitiontimeremain_ = 0;
  competitionredpacksum_ = 0;
  competitionbulletturretid_ = 0;
  competitionbulletconfigid_ = 0;
  competitionbulletcount_ = 0;
  competitionbulletremain_ = 0;
}

JoinFreeResponsefish3d::~JoinFreeResponsefish3d() {
  // @@protoc_insertion_point(destructor:gt_msg.JoinFreeResponsefish3d)
  SharedDtor();
}

void JoinFreeResponsefish3d::SharedDtor() {
  if (this != default_instance_) {
    delete bc_;
  }
}

void JoinFreeResponsefish3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinFreeResponsefish3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinFreeResponsefish3d_descriptor_;
}

const JoinFreeResponsefish3d& JoinFreeResponsefish3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

JoinFreeResponsefish3d* JoinFreeResponsefish3d::default_instance_ = NULL;

JoinFreeResponsefish3d* JoinFreeResponsefish3d::New(::google::protobuf::Arena* arena) const {
  JoinFreeResponsefish3d* n = new JoinFreeResponsefish3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinFreeResponsefish3d::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.JoinFreeResponsefish3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinFreeResponsefish3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinFreeResponsefish3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nowframe_, scoreratio_);
  ZR_(competitiontimeall_, competitionbulletturretid_);
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) delete bc_;
  bc_ = NULL;
  ZR_(competitionbulletconfigid_, competitionbulletremain_);

#undef ZR_HELPER_
#undef ZR_

  rootmessage_.Clear();
}

bool JoinFreeResponsefish3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.JoinFreeResponsefish3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nowFrame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rootMessage;
        break;
      }

      // repeated string rootMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_rootMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rootmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rootmessage(this->rootmessage_size() - 1).data(),
            this->rootmessage(this->rootmessage_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.JoinFreeResponsefish3d.rootMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rootMessage;
        if (input->ExpectTag(24)) goto parse_ScoreRatio;
        break;
      }

      // optional int32 ScoreRatio = 3;
      case 3: {
        if (tag == 24) {
         parse_ScoreRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoreratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bc;
        break;
      }

      // optional .gt_msg.BulletConfig bc = 4;
      case 4: {
        if (tag == 34) {
         parse_bc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CompetitionTimeRemain;
        break;
      }

      // optional int32 CompetitionTimeRemain = 5;
      case 5: {
        if (tag == 40) {
         parse_CompetitionTimeRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitiontimeremain_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CompetitionRedPackSum;
        break;
      }

      // optional int32 CompetitionRedPackSum = 6;
      case 6: {
        if (tag == 48) {
         parse_CompetitionRedPackSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitionredpacksum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CompetitionBulletTurretid;
        break;
      }

      // optional int32 CompetitionBulletTurretid = 7;
      case 7: {
        if (tag == 56) {
         parse_CompetitionBulletTurretid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitionbulletturretid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CompetitionBulletConfigId;
        break;
      }

      // optional int32 CompetitionBulletConfigId = 8;
      case 8: {
        if (tag == 64) {
         parse_CompetitionBulletConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitionbulletconfigid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CompetitionBulletCount;
        break;
      }

      // optional int32 CompetitionBulletCount = 9;
      case 9: {
        if (tag == 72) {
         parse_CompetitionBulletCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitionbulletcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_CompetitionBulletRemain;
        break;
      }

      // optional int32 CompetitionBulletRemain = 10;
      case 10: {
        if (tag == 80) {
         parse_CompetitionBulletRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitionbulletremain_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_CompetitionTimeAll;
        break;
      }

      // optional int32 CompetitionTimeAll = 11;
      case 11: {
        if (tag == 88) {
         parse_CompetitionTimeAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &competitiontimeall_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.JoinFreeResponsefish3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.JoinFreeResponsefish3d)
  return false;
#undef DO_
}

void JoinFreeResponsefish3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.JoinFreeResponsefish3d)
  // optional int32 nowFrame = 1;
  if (this->nowframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nowframe(), output);
  }

  // repeated string rootMessage = 2;
  for (int i = 0; i < this->rootmessage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootmessage(i).data(), this->rootmessage(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.JoinFreeResponsefish3d.rootMessage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rootmessage(i), output);
  }

  // optional int32 ScoreRatio = 3;
  if (this->scoreratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scoreratio(), output);
  }

  // optional .gt_msg.BulletConfig bc = 4;
  if (this->has_bc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bc_, output);
  }

  // optional int32 CompetitionTimeRemain = 5;
  if (this->competitiontimeremain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->competitiontimeremain(), output);
  }

  // optional int32 CompetitionRedPackSum = 6;
  if (this->competitionredpacksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->competitionredpacksum(), output);
  }

  // optional int32 CompetitionBulletTurretid = 7;
  if (this->competitionbulletturretid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->competitionbulletturretid(), output);
  }

  // optional int32 CompetitionBulletConfigId = 8;
  if (this->competitionbulletconfigid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->competitionbulletconfigid(), output);
  }

  // optional int32 CompetitionBulletCount = 9;
  if (this->competitionbulletcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->competitionbulletcount(), output);
  }

  // optional int32 CompetitionBulletRemain = 10;
  if (this->competitionbulletremain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->competitionbulletremain(), output);
  }

  // optional int32 CompetitionTimeAll = 11;
  if (this->competitiontimeall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->competitiontimeall(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.JoinFreeResponsefish3d)
}

::google::protobuf::uint8* JoinFreeResponsefish3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.JoinFreeResponsefish3d)
  // optional int32 nowFrame = 1;
  if (this->nowframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nowframe(), target);
  }

  // repeated string rootMessage = 2;
  for (int i = 0; i < this->rootmessage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootmessage(i).data(), this->rootmessage(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.JoinFreeResponsefish3d.rootMessage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->rootmessage(i), target);
  }

  // optional int32 ScoreRatio = 3;
  if (this->scoreratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scoreratio(), target);
  }

  // optional .gt_msg.BulletConfig bc = 4;
  if (this->has_bc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bc_, false, target);
  }

  // optional int32 CompetitionTimeRemain = 5;
  if (this->competitiontimeremain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->competitiontimeremain(), target);
  }

  // optional int32 CompetitionRedPackSum = 6;
  if (this->competitionredpacksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->competitionredpacksum(), target);
  }

  // optional int32 CompetitionBulletTurretid = 7;
  if (this->competitionbulletturretid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->competitionbulletturretid(), target);
  }

  // optional int32 CompetitionBulletConfigId = 8;
  if (this->competitionbulletconfigid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->competitionbulletconfigid(), target);
  }

  // optional int32 CompetitionBulletCount = 9;
  if (this->competitionbulletcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->competitionbulletcount(), target);
  }

  // optional int32 CompetitionBulletRemain = 10;
  if (this->competitionbulletremain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->competitionbulletremain(), target);
  }

  // optional int32 CompetitionTimeAll = 11;
  if (this->competitiontimeall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->competitiontimeall(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.JoinFreeResponsefish3d)
  return target;
}

int JoinFreeResponsefish3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.JoinFreeResponsefish3d)
  int total_size = 0;

  // optional int32 nowFrame = 1;
  if (this->nowframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nowframe());
  }

  // optional int32 ScoreRatio = 3;
  if (this->scoreratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scoreratio());
  }

  // optional .gt_msg.BulletConfig bc = 4;
  if (this->has_bc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bc_);
  }

  // optional int32 CompetitionTimeAll = 11;
  if (this->competitiontimeall() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitiontimeall());
  }

  // optional int32 CompetitionTimeRemain = 5;
  if (this->competitiontimeremain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitiontimeremain());
  }

  // optional int32 CompetitionRedPackSum = 6;
  if (this->competitionredpacksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitionredpacksum());
  }

  // optional int32 CompetitionBulletTurretid = 7;
  if (this->competitionbulletturretid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitionbulletturretid());
  }

  // optional int32 CompetitionBulletConfigId = 8;
  if (this->competitionbulletconfigid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitionbulletconfigid());
  }

  // optional int32 CompetitionBulletCount = 9;
  if (this->competitionbulletcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitionbulletcount());
  }

  // optional int32 CompetitionBulletRemain = 10;
  if (this->competitionbulletremain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->competitionbulletremain());
  }

  // repeated string rootMessage = 2;
  total_size += 1 * this->rootmessage_size();
  for (int i = 0; i < this->rootmessage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rootmessage(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinFreeResponsefish3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.JoinFreeResponsefish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JoinFreeResponsefish3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinFreeResponsefish3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.JoinFreeResponsefish3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.JoinFreeResponsefish3d)
    MergeFrom(*source);
  }
}

void JoinFreeResponsefish3d::MergeFrom(const JoinFreeResponsefish3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.JoinFreeResponsefish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rootmessage_.MergeFrom(from.rootmessage_);
  if (from.nowframe() != 0) {
    set_nowframe(from.nowframe());
  }
  if (from.scoreratio() != 0) {
    set_scoreratio(from.scoreratio());
  }
  if (from.has_bc()) {
    mutable_bc()->::gt_msg::BulletConfig::MergeFrom(from.bc());
  }
  if (from.competitiontimeall() != 0) {
    set_competitiontimeall(from.competitiontimeall());
  }
  if (from.competitiontimeremain() != 0) {
    set_competitiontimeremain(from.competitiontimeremain());
  }
  if (from.competitionredpacksum() != 0) {
    set_competitionredpacksum(from.competitionredpacksum());
  }
  if (from.competitionbulletturretid() != 0) {
    set_competitionbulletturretid(from.competitionbulletturretid());
  }
  if (from.competitionbulletconfigid() != 0) {
    set_competitionbulletconfigid(from.competitionbulletconfigid());
  }
  if (from.competitionbulletcount() != 0) {
    set_competitionbulletcount(from.competitionbulletcount());
  }
  if (from.competitionbulletremain() != 0) {
    set_competitionbulletremain(from.competitionbulletremain());
  }
}

void JoinFreeResponsefish3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.JoinFreeResponsefish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinFreeResponsefish3d::CopyFrom(const JoinFreeResponsefish3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.JoinFreeResponsefish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinFreeResponsefish3d::IsInitialized() const {

  return true;
}

void JoinFreeResponsefish3d::Swap(JoinFreeResponsefish3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinFreeResponsefish3d::InternalSwap(JoinFreeResponsefish3d* other) {
  std::swap(nowframe_, other->nowframe_);
  rootmessage_.UnsafeArenaSwap(&other->rootmessage_);
  std::swap(scoreratio_, other->scoreratio_);
  std::swap(bc_, other->bc_);
  std::swap(competitiontimeall_, other->competitiontimeall_);
  std::swap(competitiontimeremain_, other->competitiontimeremain_);
  std::swap(competitionredpacksum_, other->competitionredpacksum_);
  std::swap(competitionbulletturretid_, other->competitionbulletturretid_);
  std::swap(competitionbulletconfigid_, other->competitionbulletconfigid_);
  std::swap(competitionbulletcount_, other->competitionbulletcount_);
  std::swap(competitionbulletremain_, other->competitionbulletremain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinFreeResponsefish3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinFreeResponsefish3d_descriptor_;
  metadata.reflection = JoinFreeResponsefish3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinFreeResponsefish3d

// optional int32 nowFrame = 1;
void JoinFreeResponsefish3d::clear_nowframe() {
  nowframe_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::nowframe() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.nowFrame)
  return nowframe_;
}
 void JoinFreeResponsefish3d::set_nowframe(::google::protobuf::int32 value) {
  
  nowframe_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.nowFrame)
}

// repeated string rootMessage = 2;
int JoinFreeResponsefish3d::rootmessage_size() const {
  return rootmessage_.size();
}
void JoinFreeResponsefish3d::clear_rootmessage() {
  rootmessage_.Clear();
}
 const ::std::string& JoinFreeResponsefish3d::rootmessage(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.rootMessage)
  return rootmessage_.Get(index);
}
 ::std::string* JoinFreeResponsefish3d::mutable_rootmessage(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.JoinFreeResponsefish3d.rootMessage)
  return rootmessage_.Mutable(index);
}
 void JoinFreeResponsefish3d::set_rootmessage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.rootMessage)
  rootmessage_.Mutable(index)->assign(value);
}
 void JoinFreeResponsefish3d::set_rootmessage(int index, const char* value) {
  rootmessage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gt_msg.JoinFreeResponsefish3d.rootMessage)
}
 void JoinFreeResponsefish3d::set_rootmessage(int index, const char* value, size_t size) {
  rootmessage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt_msg.JoinFreeResponsefish3d.rootMessage)
}
 ::std::string* JoinFreeResponsefish3d::add_rootmessage() {
  // @@protoc_insertion_point(field_add_mutable:gt_msg.JoinFreeResponsefish3d.rootMessage)
  return rootmessage_.Add();
}
 void JoinFreeResponsefish3d::add_rootmessage(const ::std::string& value) {
  rootmessage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gt_msg.JoinFreeResponsefish3d.rootMessage)
}
 void JoinFreeResponsefish3d::add_rootmessage(const char* value) {
  rootmessage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gt_msg.JoinFreeResponsefish3d.rootMessage)
}
 void JoinFreeResponsefish3d::add_rootmessage(const char* value, size_t size) {
  rootmessage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gt_msg.JoinFreeResponsefish3d.rootMessage)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JoinFreeResponsefish3d::rootmessage() const {
  // @@protoc_insertion_point(field_list:gt_msg.JoinFreeResponsefish3d.rootMessage)
  return rootmessage_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JoinFreeResponsefish3d::mutable_rootmessage() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.JoinFreeResponsefish3d.rootMessage)
  return &rootmessage_;
}

// optional int32 ScoreRatio = 3;
void JoinFreeResponsefish3d::clear_scoreratio() {
  scoreratio_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::scoreratio() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.ScoreRatio)
  return scoreratio_;
}
 void JoinFreeResponsefish3d::set_scoreratio(::google::protobuf::int32 value) {
  
  scoreratio_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.ScoreRatio)
}

// optional .gt_msg.BulletConfig bc = 4;
bool JoinFreeResponsefish3d::has_bc() const {
  return !_is_default_instance_ && bc_ != NULL;
}
void JoinFreeResponsefish3d::clear_bc() {
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) delete bc_;
  bc_ = NULL;
}
const ::gt_msg::BulletConfig& JoinFreeResponsefish3d::bc() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.bc)
  return bc_ != NULL ? *bc_ : *default_instance_->bc_;
}
::gt_msg::BulletConfig* JoinFreeResponsefish3d::mutable_bc() {
  
  if (bc_ == NULL) {
    bc_ = new ::gt_msg::BulletConfig;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.JoinFreeResponsefish3d.bc)
  return bc_;
}
::gt_msg::BulletConfig* JoinFreeResponsefish3d::release_bc() {
  // @@protoc_insertion_point(field_release:gt_msg.JoinFreeResponsefish3d.bc)
  
  ::gt_msg::BulletConfig* temp = bc_;
  bc_ = NULL;
  return temp;
}
void JoinFreeResponsefish3d::set_allocated_bc(::gt_msg::BulletConfig* bc) {
  delete bc_;
  bc_ = bc;
  if (bc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.JoinFreeResponsefish3d.bc)
}

// optional int32 CompetitionTimeAll = 11;
void JoinFreeResponsefish3d::clear_competitiontimeall() {
  competitiontimeall_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitiontimeall() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionTimeAll)
  return competitiontimeall_;
}
 void JoinFreeResponsefish3d::set_competitiontimeall(::google::protobuf::int32 value) {
  
  competitiontimeall_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionTimeAll)
}

// optional int32 CompetitionTimeRemain = 5;
void JoinFreeResponsefish3d::clear_competitiontimeremain() {
  competitiontimeremain_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitiontimeremain() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionTimeRemain)
  return competitiontimeremain_;
}
 void JoinFreeResponsefish3d::set_competitiontimeremain(::google::protobuf::int32 value) {
  
  competitiontimeremain_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionTimeRemain)
}

// optional int32 CompetitionRedPackSum = 6;
void JoinFreeResponsefish3d::clear_competitionredpacksum() {
  competitionredpacksum_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitionredpacksum() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionRedPackSum)
  return competitionredpacksum_;
}
 void JoinFreeResponsefish3d::set_competitionredpacksum(::google::protobuf::int32 value) {
  
  competitionredpacksum_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionRedPackSum)
}

// optional int32 CompetitionBulletTurretid = 7;
void JoinFreeResponsefish3d::clear_competitionbulletturretid() {
  competitionbulletturretid_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitionbulletturretid() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionBulletTurretid)
  return competitionbulletturretid_;
}
 void JoinFreeResponsefish3d::set_competitionbulletturretid(::google::protobuf::int32 value) {
  
  competitionbulletturretid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionBulletTurretid)
}

// optional int32 CompetitionBulletConfigId = 8;
void JoinFreeResponsefish3d::clear_competitionbulletconfigid() {
  competitionbulletconfigid_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitionbulletconfigid() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionBulletConfigId)
  return competitionbulletconfigid_;
}
 void JoinFreeResponsefish3d::set_competitionbulletconfigid(::google::protobuf::int32 value) {
  
  competitionbulletconfigid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionBulletConfigId)
}

// optional int32 CompetitionBulletCount = 9;
void JoinFreeResponsefish3d::clear_competitionbulletcount() {
  competitionbulletcount_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitionbulletcount() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionBulletCount)
  return competitionbulletcount_;
}
 void JoinFreeResponsefish3d::set_competitionbulletcount(::google::protobuf::int32 value) {
  
  competitionbulletcount_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionBulletCount)
}

// optional int32 CompetitionBulletRemain = 10;
void JoinFreeResponsefish3d::clear_competitionbulletremain() {
  competitionbulletremain_ = 0;
}
 ::google::protobuf::int32 JoinFreeResponsefish3d::competitionbulletremain() const {
  // @@protoc_insertion_point(field_get:gt_msg.JoinFreeResponsefish3d.CompetitionBulletRemain)
  return competitionbulletremain_;
}
 void JoinFreeResponsefish3d::set_competitionbulletremain(::google::protobuf::int32 value) {
  
  competitionbulletremain_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.JoinFreeResponsefish3d.CompetitionBulletRemain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfig::kGunPosFieldNumber;
const int GameConfig::kTurretPosFieldNumber;
const int GameConfig::kFishConfigsFieldNumber;
const int GameConfig::kPropConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfig::GameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.GameConfig)
}

void GameConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameConfig::GameConfig(const GameConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.GameConfig)
}

void GameConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GameConfig::~GameConfig() {
  // @@protoc_insertion_point(destructor:gt_msg.GameConfig)
  SharedDtor();
}

void GameConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameConfig_descriptor_;
}

const GameConfig& GameConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

GameConfig* GameConfig::default_instance_ = NULL;

GameConfig* GameConfig::New(::google::protobuf::Arena* arena) const {
  GameConfig* n = new GameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.GameConfig)
  gunpos_.Clear();
  turretpos_.Clear();
  fishconfigs_.Clear();
  propconfigs_.Clear();
}

bool GameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.GameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt_msg.Vec2 gunPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gunPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gunpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_gunPos;
        if (input->ExpectTag(18)) goto parse_loop_turretPos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gt_msg.Vec2 turretPos = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_turretPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_turretpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_turretPos;
        if (input->ExpectTag(26)) goto parse_loop_fishConfigs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gt_msg.FishData fishConfigs = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fishConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fishconfigs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fishConfigs;
        if (input->ExpectTag(50)) goto parse_loop_propConfigs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gt_msg.PropData propConfigs = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_propConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_propconfigs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_propConfigs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.GameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.GameConfig)
  return false;
#undef DO_
}

void GameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.GameConfig)
  // repeated .gt_msg.Vec2 gunPos = 1;
  for (unsigned int i = 0, n = this->gunpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gunpos(i), output);
  }

  // repeated .gt_msg.Vec2 turretPos = 2;
  for (unsigned int i = 0, n = this->turretpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->turretpos(i), output);
  }

  // repeated .gt_msg.FishData fishConfigs = 3;
  for (unsigned int i = 0, n = this->fishconfigs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fishconfigs(i), output);
  }

  // repeated .gt_msg.PropData propConfigs = 6;
  for (unsigned int i = 0, n = this->propconfigs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->propconfigs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.GameConfig)
}

::google::protobuf::uint8* GameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.GameConfig)
  // repeated .gt_msg.Vec2 gunPos = 1;
  for (unsigned int i = 0, n = this->gunpos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->gunpos(i), false, target);
  }

  // repeated .gt_msg.Vec2 turretPos = 2;
  for (unsigned int i = 0, n = this->turretpos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->turretpos(i), false, target);
  }

  // repeated .gt_msg.FishData fishConfigs = 3;
  for (unsigned int i = 0, n = this->fishconfigs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fishconfigs(i), false, target);
  }

  // repeated .gt_msg.PropData propConfigs = 6;
  for (unsigned int i = 0, n = this->propconfigs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->propconfigs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.GameConfig)
  return target;
}

int GameConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.GameConfig)
  int total_size = 0;

  // repeated .gt_msg.Vec2 gunPos = 1;
  total_size += 1 * this->gunpos_size();
  for (int i = 0; i < this->gunpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gunpos(i));
  }

  // repeated .gt_msg.Vec2 turretPos = 2;
  total_size += 1 * this->turretpos_size();
  for (int i = 0; i < this->turretpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turretpos(i));
  }

  // repeated .gt_msg.FishData fishConfigs = 3;
  total_size += 1 * this->fishconfigs_size();
  for (int i = 0; i < this->fishconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishconfigs(i));
  }

  // repeated .gt_msg.PropData propConfigs = 6;
  total_size += 1 * this->propconfigs_size();
  for (int i = 0; i < this->propconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propconfigs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.GameConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.GameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.GameConfig)
    MergeFrom(*source);
  }
}

void GameConfig::MergeFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.GameConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  gunpos_.MergeFrom(from.gunpos_);
  turretpos_.MergeFrom(from.turretpos_);
  fishconfigs_.MergeFrom(from.fishconfigs_);
  propconfigs_.MergeFrom(from.propconfigs_);
}

void GameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfig::CopyFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfig::IsInitialized() const {

  return true;
}

void GameConfig::Swap(GameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfig::InternalSwap(GameConfig* other) {
  gunpos_.UnsafeArenaSwap(&other->gunpos_);
  turretpos_.UnsafeArenaSwap(&other->turretpos_);
  fishconfigs_.UnsafeArenaSwap(&other->fishconfigs_);
  propconfigs_.UnsafeArenaSwap(&other->propconfigs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameConfig_descriptor_;
  metadata.reflection = GameConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConfig

// repeated .gt_msg.Vec2 gunPos = 1;
int GameConfig::gunpos_size() const {
  return gunpos_.size();
}
void GameConfig::clear_gunpos() {
  gunpos_.Clear();
}
const ::gt_msg::Vec2& GameConfig::gunpos(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.GameConfig.gunPos)
  return gunpos_.Get(index);
}
::gt_msg::Vec2* GameConfig::mutable_gunpos(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.GameConfig.gunPos)
  return gunpos_.Mutable(index);
}
::gt_msg::Vec2* GameConfig::add_gunpos() {
  // @@protoc_insertion_point(field_add:gt_msg.GameConfig.gunPos)
  return gunpos_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::Vec2 >*
GameConfig::mutable_gunpos() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.GameConfig.gunPos)
  return &gunpos_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::Vec2 >&
GameConfig::gunpos() const {
  // @@protoc_insertion_point(field_list:gt_msg.GameConfig.gunPos)
  return gunpos_;
}

// repeated .gt_msg.Vec2 turretPos = 2;
int GameConfig::turretpos_size() const {
  return turretpos_.size();
}
void GameConfig::clear_turretpos() {
  turretpos_.Clear();
}
const ::gt_msg::Vec2& GameConfig::turretpos(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.GameConfig.turretPos)
  return turretpos_.Get(index);
}
::gt_msg::Vec2* GameConfig::mutable_turretpos(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.GameConfig.turretPos)
  return turretpos_.Mutable(index);
}
::gt_msg::Vec2* GameConfig::add_turretpos() {
  // @@protoc_insertion_point(field_add:gt_msg.GameConfig.turretPos)
  return turretpos_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::Vec2 >*
GameConfig::mutable_turretpos() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.GameConfig.turretPos)
  return &turretpos_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::Vec2 >&
GameConfig::turretpos() const {
  // @@protoc_insertion_point(field_list:gt_msg.GameConfig.turretPos)
  return turretpos_;
}

// repeated .gt_msg.FishData fishConfigs = 3;
int GameConfig::fishconfigs_size() const {
  return fishconfigs_.size();
}
void GameConfig::clear_fishconfigs() {
  fishconfigs_.Clear();
}
const ::gt_msg::FishData& GameConfig::fishconfigs(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.GameConfig.fishConfigs)
  return fishconfigs_.Get(index);
}
::gt_msg::FishData* GameConfig::mutable_fishconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.GameConfig.fishConfigs)
  return fishconfigs_.Mutable(index);
}
::gt_msg::FishData* GameConfig::add_fishconfigs() {
  // @@protoc_insertion_point(field_add:gt_msg.GameConfig.fishConfigs)
  return fishconfigs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FishData >*
GameConfig::mutable_fishconfigs() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.GameConfig.fishConfigs)
  return &fishconfigs_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FishData >&
GameConfig::fishconfigs() const {
  // @@protoc_insertion_point(field_list:gt_msg.GameConfig.fishConfigs)
  return fishconfigs_;
}

// repeated .gt_msg.PropData propConfigs = 6;
int GameConfig::propconfigs_size() const {
  return propconfigs_.size();
}
void GameConfig::clear_propconfigs() {
  propconfigs_.Clear();
}
const ::gt_msg::PropData& GameConfig::propconfigs(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.GameConfig.propConfigs)
  return propconfigs_.Get(index);
}
::gt_msg::PropData* GameConfig::mutable_propconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.GameConfig.propConfigs)
  return propconfigs_.Mutable(index);
}
::gt_msg::PropData* GameConfig::add_propconfigs() {
  // @@protoc_insertion_point(field_add:gt_msg.GameConfig.propConfigs)
  return propconfigs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::PropData >*
GameConfig::mutable_propconfigs() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.GameConfig.propConfigs)
  return &propconfigs_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::PropData >&
GameConfig::propconfigs() const {
  // @@protoc_insertion_point(field_list:gt_msg.GameConfig.propConfigs)
  return propconfigs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentFrame::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentFrame::CurrentFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.CurrentFrame)
}

void CurrentFrame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CurrentFrame::CurrentFrame(const CurrentFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.CurrentFrame)
}

void CurrentFrame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
}

CurrentFrame::~CurrentFrame() {
  // @@protoc_insertion_point(destructor:gt_msg.CurrentFrame)
  SharedDtor();
}

void CurrentFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentFrame_descriptor_;
}

const CurrentFrame& CurrentFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

CurrentFrame* CurrentFrame::default_instance_ = NULL;

CurrentFrame* CurrentFrame::New(::google::protobuf::Arena* arena) const {
  CurrentFrame* n = new CurrentFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrentFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.CurrentFrame)
  frame_ = 0;
}

bool CurrentFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.CurrentFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.CurrentFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.CurrentFrame)
  return false;
#undef DO_
}

void CurrentFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.CurrentFrame)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.CurrentFrame)
}

::google::protobuf::uint8* CurrentFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.CurrentFrame)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.CurrentFrame)
  return target;
}

int CurrentFrame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.CurrentFrame)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.CurrentFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurrentFrame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.CurrentFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.CurrentFrame)
    MergeFrom(*source);
  }
}

void CurrentFrame::MergeFrom(const CurrentFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.CurrentFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
}

void CurrentFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.CurrentFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentFrame::CopyFrom(const CurrentFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.CurrentFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentFrame::IsInitialized() const {

  return true;
}

void CurrentFrame::Swap(CurrentFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentFrame::InternalSwap(CurrentFrame* other) {
  std::swap(frame_, other->frame_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrentFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentFrame_descriptor_;
  metadata.reflection = CurrentFrame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrentFrame

// optional int32 frame = 1;
void CurrentFrame::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 CurrentFrame::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.CurrentFrame.frame)
  return frame_;
}
 void CurrentFrame::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CurrentFrame.frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishCoin::kSeatIdFieldNumber;
const int FishCoin::kScoreNowFieldNumber;
const int FishCoin::kBulletRemainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishCoin::FishCoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishCoin)
}

void FishCoin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishCoin::FishCoin(const FishCoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishCoin)
}

void FishCoin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  seatid_ = 0;
  scorenow_ = GOOGLE_LONGLONG(0);
  bulletremain_ = 0;
}

FishCoin::~FishCoin() {
  // @@protoc_insertion_point(destructor:gt_msg.FishCoin)
  SharedDtor();
}

void FishCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishCoin_descriptor_;
}

const FishCoin& FishCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishCoin* FishCoin::default_instance_ = NULL;

FishCoin* FishCoin::New(::google::protobuf::Arena* arena) const {
  FishCoin* n = new FishCoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishCoin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FishCoin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FishCoin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(scorenow_, bulletremain_);

#undef ZR_HELPER_
#undef ZR_

}

bool FishCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishCoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scoreNow;
        break;
      }

      // optional int64 scoreNow = 2;
      case 2: {
        if (tag == 16) {
         parse_scoreNow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scorenow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bulletRemain;
        break;
      }

      // optional int32 bulletRemain = 3;
      case 3: {
        if (tag == 24) {
         parse_bulletRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletremain_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishCoin)
  return false;
#undef DO_
}

void FishCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishCoin)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int64 scoreNow = 2;
  if (this->scorenow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->scorenow(), output);
  }

  // optional int32 bulletRemain = 3;
  if (this->bulletremain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bulletremain(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishCoin)
}

::google::protobuf::uint8* FishCoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishCoin)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int64 scoreNow = 2;
  if (this->scorenow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->scorenow(), target);
  }

  // optional int32 bulletRemain = 3;
  if (this->bulletremain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bulletremain(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishCoin)
  return target;
}

int FishCoin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishCoin)
  int total_size = 0;

  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // optional int64 scoreNow = 2;
  if (this->scorenow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scorenow());
  }

  // optional int32 bulletRemain = 3;
  if (this->bulletremain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bulletremain());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishCoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishCoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishCoin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishCoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishCoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishCoin)
    MergeFrom(*source);
  }
}

void FishCoin::MergeFrom(const FishCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishCoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.scorenow() != 0) {
    set_scorenow(from.scorenow());
  }
  if (from.bulletremain() != 0) {
    set_bulletremain(from.bulletremain());
  }
}

void FishCoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishCoin::CopyFrom(const FishCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishCoin::IsInitialized() const {

  return true;
}

void FishCoin::Swap(FishCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishCoin::InternalSwap(FishCoin* other) {
  std::swap(seatid_, other->seatid_);
  std::swap(scorenow_, other->scorenow_);
  std::swap(bulletremain_, other->bulletremain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishCoin_descriptor_;
  metadata.reflection = FishCoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishCoin

// optional int32 seatId = 1;
void FishCoin::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 FishCoin::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishCoin.seatId)
  return seatid_;
}
 void FishCoin::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishCoin.seatId)
}

// optional int64 scoreNow = 2;
void FishCoin::clear_scorenow() {
  scorenow_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FishCoin::scorenow() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishCoin.scoreNow)
  return scorenow_;
}
 void FishCoin::set_scorenow(::google::protobuf::int64 value) {
  
  scorenow_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishCoin.scoreNow)
}

// optional int32 bulletRemain = 3;
void FishCoin::clear_bulletremain() {
  bulletremain_ = 0;
}
 ::google::protobuf::int32 FishCoin::bulletremain() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishCoin.bulletRemain)
  return bulletremain_;
}
 void FishCoin::set_bulletremain(::google::protobuf::int32 value) {
  
  bulletremain_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishCoin.bulletRemain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneFishs::kFishsFieldNumber;
const int SceneFishs::kFreezeFieldNumber;
const int SceneFishs::kFastsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneFishs::SceneFishs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.SceneFishs)
}

void SceneFishs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fishs_ = const_cast< ::gt_msg::EstablishFish*>(&::gt_msg::EstablishFish::default_instance());
}

SceneFishs::SceneFishs(const SceneFishs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.SceneFishs)
}

void SceneFishs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fishs_ = NULL;
}

SceneFishs::~SceneFishs() {
  // @@protoc_insertion_point(destructor:gt_msg.SceneFishs)
  SharedDtor();
}

void SceneFishs::SharedDtor() {
  if (this != default_instance_) {
    delete fishs_;
  }
}

void SceneFishs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneFishs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneFishs_descriptor_;
}

const SceneFishs& SceneFishs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

SceneFishs* SceneFishs::default_instance_ = NULL;

SceneFishs* SceneFishs::New(::google::protobuf::Arena* arena) const {
  SceneFishs* n = new SceneFishs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneFishs::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.SceneFishs)
  if (GetArenaNoVirtual() == NULL && fishs_ != NULL) delete fishs_;
  fishs_ = NULL;
  freeze_.Clear();
  fasts_.Clear();
}

bool SceneFishs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.SceneFishs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt_msg.EstablishFish fishs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fishs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_freeze;
        break;
      }

      // repeated .gt_msg.FreezeData freeze = 2;
      case 2: {
        if (tag == 18) {
         parse_freeze:
          DO_(input->IncrementRecursionDepth());
         parse_loop_freeze:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_freeze()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_freeze;
        if (input->ExpectTag(26)) goto parse_loop_fasts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gt_msg.FastData fasts = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fasts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fasts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fasts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.SceneFishs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.SceneFishs)
  return false;
#undef DO_
}

void SceneFishs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.SceneFishs)
  // optional .gt_msg.EstablishFish fishs = 1;
  if (this->has_fishs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fishs_, output);
  }

  // repeated .gt_msg.FreezeData freeze = 2;
  for (unsigned int i = 0, n = this->freeze_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->freeze(i), output);
  }

  // repeated .gt_msg.FastData fasts = 3;
  for (unsigned int i = 0, n = this->fasts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fasts(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.SceneFishs)
}

::google::protobuf::uint8* SceneFishs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.SceneFishs)
  // optional .gt_msg.EstablishFish fishs = 1;
  if (this->has_fishs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fishs_, false, target);
  }

  // repeated .gt_msg.FreezeData freeze = 2;
  for (unsigned int i = 0, n = this->freeze_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->freeze(i), false, target);
  }

  // repeated .gt_msg.FastData fasts = 3;
  for (unsigned int i = 0, n = this->fasts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fasts(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.SceneFishs)
  return target;
}

int SceneFishs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.SceneFishs)
  int total_size = 0;

  // optional .gt_msg.EstablishFish fishs = 1;
  if (this->has_fishs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fishs_);
  }

  // repeated .gt_msg.FreezeData freeze = 2;
  total_size += 1 * this->freeze_size();
  for (int i = 0; i < this->freeze_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freeze(i));
  }

  // repeated .gt_msg.FastData fasts = 3;
  total_size += 1 * this->fasts_size();
  for (int i = 0; i < this->fasts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fasts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneFishs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.SceneFishs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SceneFishs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneFishs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.SceneFishs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.SceneFishs)
    MergeFrom(*source);
  }
}

void SceneFishs::MergeFrom(const SceneFishs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.SceneFishs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  freeze_.MergeFrom(from.freeze_);
  fasts_.MergeFrom(from.fasts_);
  if (from.has_fishs()) {
    mutable_fishs()->::gt_msg::EstablishFish::MergeFrom(from.fishs());
  }
}

void SceneFishs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.SceneFishs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneFishs::CopyFrom(const SceneFishs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.SceneFishs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneFishs::IsInitialized() const {

  return true;
}

void SceneFishs::Swap(SceneFishs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneFishs::InternalSwap(SceneFishs* other) {
  std::swap(fishs_, other->fishs_);
  freeze_.UnsafeArenaSwap(&other->freeze_);
  fasts_.UnsafeArenaSwap(&other->fasts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneFishs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneFishs_descriptor_;
  metadata.reflection = SceneFishs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneFishs

// optional .gt_msg.EstablishFish fishs = 1;
bool SceneFishs::has_fishs() const {
  return !_is_default_instance_ && fishs_ != NULL;
}
void SceneFishs::clear_fishs() {
  if (GetArenaNoVirtual() == NULL && fishs_ != NULL) delete fishs_;
  fishs_ = NULL;
}
const ::gt_msg::EstablishFish& SceneFishs::fishs() const {
  // @@protoc_insertion_point(field_get:gt_msg.SceneFishs.fishs)
  return fishs_ != NULL ? *fishs_ : *default_instance_->fishs_;
}
::gt_msg::EstablishFish* SceneFishs::mutable_fishs() {
  
  if (fishs_ == NULL) {
    fishs_ = new ::gt_msg::EstablishFish;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.SceneFishs.fishs)
  return fishs_;
}
::gt_msg::EstablishFish* SceneFishs::release_fishs() {
  // @@protoc_insertion_point(field_release:gt_msg.SceneFishs.fishs)
  
  ::gt_msg::EstablishFish* temp = fishs_;
  fishs_ = NULL;
  return temp;
}
void SceneFishs::set_allocated_fishs(::gt_msg::EstablishFish* fishs) {
  delete fishs_;
  fishs_ = fishs;
  if (fishs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.SceneFishs.fishs)
}

// repeated .gt_msg.FreezeData freeze = 2;
int SceneFishs::freeze_size() const {
  return freeze_.size();
}
void SceneFishs::clear_freeze() {
  freeze_.Clear();
}
const ::gt_msg::FreezeData& SceneFishs::freeze(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.SceneFishs.freeze)
  return freeze_.Get(index);
}
::gt_msg::FreezeData* SceneFishs::mutable_freeze(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.SceneFishs.freeze)
  return freeze_.Mutable(index);
}
::gt_msg::FreezeData* SceneFishs::add_freeze() {
  // @@protoc_insertion_point(field_add:gt_msg.SceneFishs.freeze)
  return freeze_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FreezeData >*
SceneFishs::mutable_freeze() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.SceneFishs.freeze)
  return &freeze_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FreezeData >&
SceneFishs::freeze() const {
  // @@protoc_insertion_point(field_list:gt_msg.SceneFishs.freeze)
  return freeze_;
}

// repeated .gt_msg.FastData fasts = 3;
int SceneFishs::fasts_size() const {
  return fasts_.size();
}
void SceneFishs::clear_fasts() {
  fasts_.Clear();
}
const ::gt_msg::FastData& SceneFishs::fasts(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.SceneFishs.fasts)
  return fasts_.Get(index);
}
::gt_msg::FastData* SceneFishs::mutable_fasts(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.SceneFishs.fasts)
  return fasts_.Mutable(index);
}
::gt_msg::FastData* SceneFishs::add_fasts() {
  // @@protoc_insertion_point(field_add:gt_msg.SceneFishs.fasts)
  return fasts_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FastData >*
SceneFishs::mutable_fasts() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.SceneFishs.fasts)
  return &fasts_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FastData >&
SceneFishs::fasts() const {
  // @@protoc_insertion_point(field_list:gt_msg.SceneFishs.fasts)
  return fasts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstablishFishExternal::kFishFieldNumber;
const int EstablishFishExternal::kOnlyOneFieldNumber;
const int EstablishFishExternal::kWaitUntilStartFieldNumber;
const int EstablishFishExternal::kWaitUntilDoneFieldNumber;
const int EstablishFishExternal::kRootMessageFieldNumber;
const int EstablishFishExternal::kRedBagScoreFieldNumber;
const int EstablishFishExternal::kRedBagTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstablishFishExternal::EstablishFishExternal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.EstablishFishExternal)
}

void EstablishFishExternal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fish_ = const_cast< ::gt_msg::EstablishFish*>(&::gt_msg::EstablishFish::default_instance());
}

EstablishFishExternal::EstablishFishExternal(const EstablishFishExternal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.EstablishFishExternal)
}

void EstablishFishExternal::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fish_ = NULL;
  onlyone_ = false;
  waituntilstart_ = false;
  waituntildone_ = false;
  rootmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redbagscore_ = 0;
  redbagtype_ = 0;
}

EstablishFishExternal::~EstablishFishExternal() {
  // @@protoc_insertion_point(destructor:gt_msg.EstablishFishExternal)
  SharedDtor();
}

void EstablishFishExternal::SharedDtor() {
  rootmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete fish_;
  }
}

void EstablishFishExternal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EstablishFishExternal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EstablishFishExternal_descriptor_;
}

const EstablishFishExternal& EstablishFishExternal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

EstablishFishExternal* EstablishFishExternal::default_instance_ = NULL;

EstablishFishExternal* EstablishFishExternal::New(::google::protobuf::Arena* arena) const {
  EstablishFishExternal* n = new EstablishFishExternal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EstablishFishExternal::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.EstablishFishExternal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EstablishFishExternal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EstablishFishExternal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(onlyone_, redbagscore_);
  if (GetArenaNoVirtual() == NULL && fish_ != NULL) delete fish_;
  fish_ = NULL;
  rootmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redbagtype_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool EstablishFishExternal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.EstablishFishExternal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt_msg.EstablishFish fish = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OnlyOne;
        break;
      }

      // optional bool OnlyOne = 2;
      case 2: {
        if (tag == 16) {
         parse_OnlyOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onlyone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WaitUntilStart;
        break;
      }

      // optional bool WaitUntilStart = 3;
      case 3: {
        if (tag == 24) {
         parse_WaitUntilStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &waituntilstart_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WaitUntilDone;
        break;
      }

      // optional bool WaitUntilDone = 4;
      case 4: {
        if (tag == 32) {
         parse_WaitUntilDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &waituntildone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RootMessage;
        break;
      }

      // optional string RootMessage = 5;
      case 5: {
        if (tag == 42) {
         parse_RootMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rootmessage().data(), this->rootmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.EstablishFishExternal.RootMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RedBagScore;
        break;
      }

      // optional int32 RedBagScore = 6;
      case 6: {
        if (tag == 48) {
         parse_RedBagScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redbagscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RedBagType;
        break;
      }

      // optional int32 RedBagType = 7;
      case 7: {
        if (tag == 56) {
         parse_RedBagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redbagtype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.EstablishFishExternal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.EstablishFishExternal)
  return false;
#undef DO_
}

void EstablishFishExternal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.EstablishFishExternal)
  // optional .gt_msg.EstablishFish fish = 1;
  if (this->has_fish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fish_, output);
  }

  // optional bool OnlyOne = 2;
  if (this->onlyone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->onlyone(), output);
  }

  // optional bool WaitUntilStart = 3;
  if (this->waituntilstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->waituntilstart(), output);
  }

  // optional bool WaitUntilDone = 4;
  if (this->waituntildone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->waituntildone(), output);
  }

  // optional string RootMessage = 5;
  if (this->rootmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootmessage().data(), this->rootmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFishExternal.RootMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rootmessage(), output);
  }

  // optional int32 RedBagScore = 6;
  if (this->redbagscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->redbagscore(), output);
  }

  // optional int32 RedBagType = 7;
  if (this->redbagtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->redbagtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.EstablishFishExternal)
}

::google::protobuf::uint8* EstablishFishExternal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.EstablishFishExternal)
  // optional .gt_msg.EstablishFish fish = 1;
  if (this->has_fish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fish_, false, target);
  }

  // optional bool OnlyOne = 2;
  if (this->onlyone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->onlyone(), target);
  }

  // optional bool WaitUntilStart = 3;
  if (this->waituntilstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->waituntilstart(), target);
  }

  // optional bool WaitUntilDone = 4;
  if (this->waituntildone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->waituntildone(), target);
  }

  // optional string RootMessage = 5;
  if (this->rootmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootmessage().data(), this->rootmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFishExternal.RootMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rootmessage(), target);
  }

  // optional int32 RedBagScore = 6;
  if (this->redbagscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->redbagscore(), target);
  }

  // optional int32 RedBagType = 7;
  if (this->redbagtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->redbagtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.EstablishFishExternal)
  return target;
}

int EstablishFishExternal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.EstablishFishExternal)
  int total_size = 0;

  // optional .gt_msg.EstablishFish fish = 1;
  if (this->has_fish()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fish_);
  }

  // optional bool OnlyOne = 2;
  if (this->onlyone() != 0) {
    total_size += 1 + 1;
  }

  // optional bool WaitUntilStart = 3;
  if (this->waituntilstart() != 0) {
    total_size += 1 + 1;
  }

  // optional bool WaitUntilDone = 4;
  if (this->waituntildone() != 0) {
    total_size += 1 + 1;
  }

  // optional string RootMessage = 5;
  if (this->rootmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rootmessage());
  }

  // optional int32 RedBagScore = 6;
  if (this->redbagscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redbagscore());
  }

  // optional int32 RedBagType = 7;
  if (this->redbagtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redbagtype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EstablishFishExternal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.EstablishFishExternal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EstablishFishExternal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EstablishFishExternal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.EstablishFishExternal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.EstablishFishExternal)
    MergeFrom(*source);
  }
}

void EstablishFishExternal::MergeFrom(const EstablishFishExternal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.EstablishFishExternal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_fish()) {
    mutable_fish()->::gt_msg::EstablishFish::MergeFrom(from.fish());
  }
  if (from.onlyone() != 0) {
    set_onlyone(from.onlyone());
  }
  if (from.waituntilstart() != 0) {
    set_waituntilstart(from.waituntilstart());
  }
  if (from.waituntildone() != 0) {
    set_waituntildone(from.waituntildone());
  }
  if (from.rootmessage().size() > 0) {

    rootmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rootmessage_);
  }
  if (from.redbagscore() != 0) {
    set_redbagscore(from.redbagscore());
  }
  if (from.redbagtype() != 0) {
    set_redbagtype(from.redbagtype());
  }
}

void EstablishFishExternal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.EstablishFishExternal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstablishFishExternal::CopyFrom(const EstablishFishExternal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.EstablishFishExternal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstablishFishExternal::IsInitialized() const {

  return true;
}

void EstablishFishExternal::Swap(EstablishFishExternal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstablishFishExternal::InternalSwap(EstablishFishExternal* other) {
  std::swap(fish_, other->fish_);
  std::swap(onlyone_, other->onlyone_);
  std::swap(waituntilstart_, other->waituntilstart_);
  std::swap(waituntildone_, other->waituntildone_);
  rootmessage_.Swap(&other->rootmessage_);
  std::swap(redbagscore_, other->redbagscore_);
  std::swap(redbagtype_, other->redbagtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EstablishFishExternal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EstablishFishExternal_descriptor_;
  metadata.reflection = EstablishFishExternal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EstablishFishExternal

// optional .gt_msg.EstablishFish fish = 1;
bool EstablishFishExternal::has_fish() const {
  return !_is_default_instance_ && fish_ != NULL;
}
void EstablishFishExternal::clear_fish() {
  if (GetArenaNoVirtual() == NULL && fish_ != NULL) delete fish_;
  fish_ = NULL;
}
const ::gt_msg::EstablishFish& EstablishFishExternal::fish() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.fish)
  return fish_ != NULL ? *fish_ : *default_instance_->fish_;
}
::gt_msg::EstablishFish* EstablishFishExternal::mutable_fish() {
  
  if (fish_ == NULL) {
    fish_ = new ::gt_msg::EstablishFish;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFishExternal.fish)
  return fish_;
}
::gt_msg::EstablishFish* EstablishFishExternal::release_fish() {
  // @@protoc_insertion_point(field_release:gt_msg.EstablishFishExternal.fish)
  
  ::gt_msg::EstablishFish* temp = fish_;
  fish_ = NULL;
  return temp;
}
void EstablishFishExternal::set_allocated_fish(::gt_msg::EstablishFish* fish) {
  delete fish_;
  fish_ = fish;
  if (fish) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.EstablishFishExternal.fish)
}

// optional bool OnlyOne = 2;
void EstablishFishExternal::clear_onlyone() {
  onlyone_ = false;
}
 bool EstablishFishExternal::onlyone() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.OnlyOne)
  return onlyone_;
}
 void EstablishFishExternal::set_onlyone(bool value) {
  
  onlyone_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFishExternal.OnlyOne)
}

// optional bool WaitUntilStart = 3;
void EstablishFishExternal::clear_waituntilstart() {
  waituntilstart_ = false;
}
 bool EstablishFishExternal::waituntilstart() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.WaitUntilStart)
  return waituntilstart_;
}
 void EstablishFishExternal::set_waituntilstart(bool value) {
  
  waituntilstart_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFishExternal.WaitUntilStart)
}

// optional bool WaitUntilDone = 4;
void EstablishFishExternal::clear_waituntildone() {
  waituntildone_ = false;
}
 bool EstablishFishExternal::waituntildone() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.WaitUntilDone)
  return waituntildone_;
}
 void EstablishFishExternal::set_waituntildone(bool value) {
  
  waituntildone_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFishExternal.WaitUntilDone)
}

// optional string RootMessage = 5;
void EstablishFishExternal::clear_rootmessage() {
  rootmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EstablishFishExternal::rootmessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.RootMessage)
  return rootmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EstablishFishExternal::set_rootmessage(const ::std::string& value) {
  
  rootmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFishExternal.RootMessage)
}
 void EstablishFishExternal::set_rootmessage(const char* value) {
  
  rootmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.EstablishFishExternal.RootMessage)
}
 void EstablishFishExternal::set_rootmessage(const char* value, size_t size) {
  
  rootmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.EstablishFishExternal.RootMessage)
}
 ::std::string* EstablishFishExternal::mutable_rootmessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFishExternal.RootMessage)
  return rootmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EstablishFishExternal::release_rootmessage() {
  // @@protoc_insertion_point(field_release:gt_msg.EstablishFishExternal.RootMessage)
  
  return rootmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EstablishFishExternal::set_allocated_rootmessage(::std::string* rootmessage) {
  if (rootmessage != NULL) {
    
  } else {
    
  }
  rootmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rootmessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.EstablishFishExternal.RootMessage)
}

// optional int32 RedBagScore = 6;
void EstablishFishExternal::clear_redbagscore() {
  redbagscore_ = 0;
}
 ::google::protobuf::int32 EstablishFishExternal::redbagscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.RedBagScore)
  return redbagscore_;
}
 void EstablishFishExternal::set_redbagscore(::google::protobuf::int32 value) {
  
  redbagscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFishExternal.RedBagScore)
}

// optional int32 RedBagType = 7;
void EstablishFishExternal::clear_redbagtype() {
  redbagtype_ = 0;
}
 ::google::protobuf::int32 EstablishFishExternal::redbagtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFishExternal.RedBagType)
  return redbagtype_;
}
 void EstablishFishExternal::set_redbagtype(::google::protobuf::int32 value) {
  
  redbagtype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFishExternal.RedBagType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstablishFish::kFishIdFieldNumber;
const int EstablishFish::kFishTypeFieldNumber;
const int EstablishFish::kPathNameFieldNumber;
const int EstablishFish::kFrameFieldNumber;
const int EstablishFish::kDeepFieldNumber;
const int EstablishFish::kSkillTypeFieldNumber;
const int EstablishFish::kRandomNumFieldNumber;
const int EstablishFish::kFastenOldFishFieldNumber;
const int EstablishFish::kFastenInFieldNumber;
const int EstablishFish::kTowardFieldNumber;
const int EstablishFish::kOffsetFieldNumber;
const int EstablishFish::kFoldXFieldNumber;
const int EstablishFish::kFoldYFieldNumber;
const int EstablishFish::kFoldZFieldNumber;
const int EstablishFish::kSpeedScaleFieldNumber;
const int EstablishFish::kEnterMessageFieldNumber;
const int EstablishFish::kLeaveMessageFieldNumber;
const int EstablishFish::kMessageListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstablishFish::EstablishFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.EstablishFish)
}

void EstablishFish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  offset_ = const_cast< ::gt_msg::Vec3*>(&::gt_msg::Vec3::default_instance());
}

EstablishFish::EstablishFish(const EstablishFish& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.EstablishFish)
}

void EstablishFish::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fishid_ = 0;
  fishtype_ = 0;
  frame_ = 0;
  deep_ = 0;
  skilltype_ = 0;
  randomnum_ = 0;
  fastenoldfish_ = false;
  fastenin_ = false;
  toward_ = 0;
  offset_ = NULL;
  foldx_ = false;
  foldy_ = false;
  foldz_ = false;
  speedscale_ = 0;
  entermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavemessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EstablishFish::~EstablishFish() {
  // @@protoc_insertion_point(destructor:gt_msg.EstablishFish)
  SharedDtor();
}

void EstablishFish::SharedDtor() {
  entermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavemessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete offset_;
  }
}

void EstablishFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EstablishFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EstablishFish_descriptor_;
}

const EstablishFish& EstablishFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

EstablishFish* EstablishFish::default_instance_ = NULL;

EstablishFish* EstablishFish::New(::google::protobuf::Arena* arena) const {
  EstablishFish* n = new EstablishFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EstablishFish::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.EstablishFish)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EstablishFish, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EstablishFish*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fishid_, fishtype_);
  ZR_(frame_, randomnum_);
  fastenoldfish_ = false;
  ZR_(fastenin_, foldy_);
  ZR_(foldz_, speedscale_);
  toward_ = 0;
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
  entermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  pathname_.Clear();
  messagelist_.Clear();
}

bool EstablishFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.EstablishFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishType;
        break;
      }

      // optional int32 fishType = 2;
      case 2: {
        if (tag == 16) {
         parse_fishType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishtype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pathName;
        break;
      }

      // repeated string pathName = 3;
      case 3: {
        if (tag == 26) {
         parse_pathName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pathname(this->pathname_size() - 1).data(),
            this->pathname(this->pathname_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.EstablishFish.pathName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pathName;
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // optional int32 frame = 4;
      case 4: {
        if (tag == 32) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deep;
        break;
      }

      // optional int32 deep = 5;
      case 5: {
        if (tag == 40) {
         parse_deep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deep_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skillType;
        break;
      }

      // optional int32 skillType = 6;
      case 6: {
        if (tag == 48) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_randomNum;
        break;
      }

      // optional int32 randomNum = 7;
      case 7: {
        if (tag == 56) {
         parse_randomNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randomnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_FastenOldFish;
        break;
      }

      // optional bool FastenOldFish = 8;
      case 8: {
        if (tag == 64) {
         parse_FastenOldFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fastenoldfish_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fastenIn;
        break;
      }

      // optional bool fastenIn = 9;
      case 9: {
        if (tag == 72) {
         parse_fastenIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fastenin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_toward;
        break;
      }

      // optional int32 toward = 10;
      case 10: {
        if (tag == 80) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_offset;
        break;
      }

      // optional .gt_msg.Vec3 offset = 11;
      case 11: {
        if (tag == 90) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_foldX;
        break;
      }

      // optional bool foldX = 12;
      case 12: {
        if (tag == 96) {
         parse_foldX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_foldY;
        break;
      }

      // optional bool foldY = 13;
      case 13: {
        if (tag == 104) {
         parse_foldY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_foldZ;
        break;
      }

      // optional bool foldZ = 14;
      case 14: {
        if (tag == 112) {
         parse_foldZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_speedScale;
        break;
      }

      // optional float speedScale = 15;
      case 15: {
        if (tag == 125) {
         parse_speedScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_EnterMessage;
        break;
      }

      // optional string EnterMessage = 16;
      case 16: {
        if (tag == 130) {
         parse_EnterMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entermessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entermessage().data(), this->entermessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.EstablishFish.EnterMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_LeaveMessage;
        break;
      }

      // optional string LeaveMessage = 17;
      case 17: {
        if (tag == 138) {
         parse_LeaveMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leavemessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leavemessage().data(), this->leavemessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.EstablishFish.LeaveMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_messageList;
        break;
      }

      // repeated .gt_msg.MessageTimer messageList = 18;
      case 18: {
        if (tag == 146) {
         parse_messageList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messageList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messagelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_messageList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.EstablishFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.EstablishFish)
  return false;
#undef DO_
}

void EstablishFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.EstablishFish)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishtype(), output);
  }

  // repeated string pathName = 3;
  for (int i = 0; i < this->pathname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname(i).data(), this->pathname(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFish.pathName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pathname(i), output);
  }

  // optional int32 frame = 4;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frame(), output);
  }

  // optional int32 deep = 5;
  if (this->deep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deep(), output);
  }

  // optional int32 skillType = 6;
  if (this->skilltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skilltype(), output);
  }

  // optional int32 randomNum = 7;
  if (this->randomnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->randomnum(), output);
  }

  // optional bool FastenOldFish = 8;
  if (this->fastenoldfish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fastenoldfish(), output);
  }

  // optional bool fastenIn = 9;
  if (this->fastenin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fastenin(), output);
  }

  // optional int32 toward = 10;
  if (this->toward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->toward(), output);
  }

  // optional .gt_msg.Vec3 offset = 11;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->offset_, output);
  }

  // optional bool foldX = 12;
  if (this->foldx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->foldx(), output);
  }

  // optional bool foldY = 13;
  if (this->foldy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->foldy(), output);
  }

  // optional bool foldZ = 14;
  if (this->foldz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->foldz(), output);
  }

  // optional float speedScale = 15;
  if (this->speedscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->speedscale(), output);
  }

  // optional string EnterMessage = 16;
  if (this->entermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entermessage().data(), this->entermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFish.EnterMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->entermessage(), output);
  }

  // optional string LeaveMessage = 17;
  if (this->leavemessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leavemessage().data(), this->leavemessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFish.LeaveMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->leavemessage(), output);
  }

  // repeated .gt_msg.MessageTimer messageList = 18;
  for (unsigned int i = 0, n = this->messagelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->messagelist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.EstablishFish)
}

::google::protobuf::uint8* EstablishFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.EstablishFish)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishtype(), target);
  }

  // repeated string pathName = 3;
  for (int i = 0; i < this->pathname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pathname(i).data(), this->pathname(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFish.pathName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->pathname(i), target);
  }

  // optional int32 frame = 4;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frame(), target);
  }

  // optional int32 deep = 5;
  if (this->deep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deep(), target);
  }

  // optional int32 skillType = 6;
  if (this->skilltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skilltype(), target);
  }

  // optional int32 randomNum = 7;
  if (this->randomnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->randomnum(), target);
  }

  // optional bool FastenOldFish = 8;
  if (this->fastenoldfish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fastenoldfish(), target);
  }

  // optional bool fastenIn = 9;
  if (this->fastenin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fastenin(), target);
  }

  // optional int32 toward = 10;
  if (this->toward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->toward(), target);
  }

  // optional .gt_msg.Vec3 offset = 11;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->offset_, false, target);
  }

  // optional bool foldX = 12;
  if (this->foldx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->foldx(), target);
  }

  // optional bool foldY = 13;
  if (this->foldy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->foldy(), target);
  }

  // optional bool foldZ = 14;
  if (this->foldz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->foldz(), target);
  }

  // optional float speedScale = 15;
  if (this->speedscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->speedscale(), target);
  }

  // optional string EnterMessage = 16;
  if (this->entermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entermessage().data(), this->entermessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFish.EnterMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->entermessage(), target);
  }

  // optional string LeaveMessage = 17;
  if (this->leavemessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leavemessage().data(), this->leavemessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.EstablishFish.LeaveMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->leavemessage(), target);
  }

  // repeated .gt_msg.MessageTimer messageList = 18;
  for (unsigned int i = 0, n = this->messagelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->messagelist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.EstablishFish)
  return target;
}

int EstablishFish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.EstablishFish)
  int total_size = 0;

  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishtype());
  }

  // optional int32 frame = 4;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional int32 deep = 5;
  if (this->deep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deep());
  }

  // optional int32 skillType = 6;
  if (this->skilltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skilltype());
  }

  // optional int32 randomNum = 7;
  if (this->randomnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->randomnum());
  }

  // optional bool FastenOldFish = 8;
  if (this->fastenoldfish() != 0) {
    total_size += 1 + 1;
  }

  // optional bool fastenIn = 9;
  if (this->fastenin() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 toward = 10;
  if (this->toward() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toward());
  }

  // optional .gt_msg.Vec3 offset = 11;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional bool foldX = 12;
  if (this->foldx() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldY = 13;
  if (this->foldy() != 0) {
    total_size += 1 + 1;
  }

  // optional bool foldZ = 14;
  if (this->foldz() != 0) {
    total_size += 1 + 1;
  }

  // optional float speedScale = 15;
  if (this->speedscale() != 0) {
    total_size += 1 + 4;
  }

  // optional string EnterMessage = 16;
  if (this->entermessage().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entermessage());
  }

  // optional string LeaveMessage = 17;
  if (this->leavemessage().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leavemessage());
  }

  // repeated string pathName = 3;
  total_size += 1 * this->pathname_size();
  for (int i = 0; i < this->pathname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pathname(i));
  }

  // repeated .gt_msg.MessageTimer messageList = 18;
  total_size += 2 * this->messagelist_size();
  for (int i = 0; i < this->messagelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EstablishFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.EstablishFish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EstablishFish* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EstablishFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.EstablishFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.EstablishFish)
    MergeFrom(*source);
  }
}

void EstablishFish::MergeFrom(const EstablishFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.EstablishFish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathname_.MergeFrom(from.pathname_);
  messagelist_.MergeFrom(from.messagelist_);
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
  if (from.fishtype() != 0) {
    set_fishtype(from.fishtype());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.deep() != 0) {
    set_deep(from.deep());
  }
  if (from.skilltype() != 0) {
    set_skilltype(from.skilltype());
  }
  if (from.randomnum() != 0) {
    set_randomnum(from.randomnum());
  }
  if (from.fastenoldfish() != 0) {
    set_fastenoldfish(from.fastenoldfish());
  }
  if (from.fastenin() != 0) {
    set_fastenin(from.fastenin());
  }
  if (from.toward() != 0) {
    set_toward(from.toward());
  }
  if (from.has_offset()) {
    mutable_offset()->::gt_msg::Vec3::MergeFrom(from.offset());
  }
  if (from.foldx() != 0) {
    set_foldx(from.foldx());
  }
  if (from.foldy() != 0) {
    set_foldy(from.foldy());
  }
  if (from.foldz() != 0) {
    set_foldz(from.foldz());
  }
  if (from.speedscale() != 0) {
    set_speedscale(from.speedscale());
  }
  if (from.entermessage().size() > 0) {

    entermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entermessage_);
  }
  if (from.leavemessage().size() > 0) {

    leavemessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leavemessage_);
  }
}

void EstablishFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.EstablishFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstablishFish::CopyFrom(const EstablishFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.EstablishFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstablishFish::IsInitialized() const {

  return true;
}

void EstablishFish::Swap(EstablishFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstablishFish::InternalSwap(EstablishFish* other) {
  std::swap(fishid_, other->fishid_);
  std::swap(fishtype_, other->fishtype_);
  pathname_.UnsafeArenaSwap(&other->pathname_);
  std::swap(frame_, other->frame_);
  std::swap(deep_, other->deep_);
  std::swap(skilltype_, other->skilltype_);
  std::swap(randomnum_, other->randomnum_);
  std::swap(fastenoldfish_, other->fastenoldfish_);
  std::swap(fastenin_, other->fastenin_);
  std::swap(toward_, other->toward_);
  std::swap(offset_, other->offset_);
  std::swap(foldx_, other->foldx_);
  std::swap(foldy_, other->foldy_);
  std::swap(foldz_, other->foldz_);
  std::swap(speedscale_, other->speedscale_);
  entermessage_.Swap(&other->entermessage_);
  leavemessage_.Swap(&other->leavemessage_);
  messagelist_.UnsafeArenaSwap(&other->messagelist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EstablishFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EstablishFish_descriptor_;
  metadata.reflection = EstablishFish_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EstablishFish

// optional int32 fishId = 1;
void EstablishFish::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 EstablishFish::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.fishId)
  return fishid_;
}
 void EstablishFish::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.fishId)
}

// optional int32 fishType = 2;
void EstablishFish::clear_fishtype() {
  fishtype_ = 0;
}
 ::google::protobuf::int32 EstablishFish::fishtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.fishType)
  return fishtype_;
}
 void EstablishFish::set_fishtype(::google::protobuf::int32 value) {
  
  fishtype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.fishType)
}

// repeated string pathName = 3;
int EstablishFish::pathname_size() const {
  return pathname_.size();
}
void EstablishFish::clear_pathname() {
  pathname_.Clear();
}
 const ::std::string& EstablishFish::pathname(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.pathName)
  return pathname_.Get(index);
}
 ::std::string* EstablishFish::mutable_pathname(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFish.pathName)
  return pathname_.Mutable(index);
}
 void EstablishFish::set_pathname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.pathName)
  pathname_.Mutable(index)->assign(value);
}
 void EstablishFish::set_pathname(int index, const char* value) {
  pathname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gt_msg.EstablishFish.pathName)
}
 void EstablishFish::set_pathname(int index, const char* value, size_t size) {
  pathname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt_msg.EstablishFish.pathName)
}
 ::std::string* EstablishFish::add_pathname() {
  // @@protoc_insertion_point(field_add_mutable:gt_msg.EstablishFish.pathName)
  return pathname_.Add();
}
 void EstablishFish::add_pathname(const ::std::string& value) {
  pathname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gt_msg.EstablishFish.pathName)
}
 void EstablishFish::add_pathname(const char* value) {
  pathname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gt_msg.EstablishFish.pathName)
}
 void EstablishFish::add_pathname(const char* value, size_t size) {
  pathname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gt_msg.EstablishFish.pathName)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
EstablishFish::pathname() const {
  // @@protoc_insertion_point(field_list:gt_msg.EstablishFish.pathName)
  return pathname_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
EstablishFish::mutable_pathname() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.EstablishFish.pathName)
  return &pathname_;
}

// optional int32 frame = 4;
void EstablishFish::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 EstablishFish::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.frame)
  return frame_;
}
 void EstablishFish::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.frame)
}

// optional int32 deep = 5;
void EstablishFish::clear_deep() {
  deep_ = 0;
}
 ::google::protobuf::int32 EstablishFish::deep() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.deep)
  return deep_;
}
 void EstablishFish::set_deep(::google::protobuf::int32 value) {
  
  deep_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.deep)
}

// optional int32 skillType = 6;
void EstablishFish::clear_skilltype() {
  skilltype_ = 0;
}
 ::google::protobuf::int32 EstablishFish::skilltype() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.skillType)
  return skilltype_;
}
 void EstablishFish::set_skilltype(::google::protobuf::int32 value) {
  
  skilltype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.skillType)
}

// optional int32 randomNum = 7;
void EstablishFish::clear_randomnum() {
  randomnum_ = 0;
}
 ::google::protobuf::int32 EstablishFish::randomnum() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.randomNum)
  return randomnum_;
}
 void EstablishFish::set_randomnum(::google::protobuf::int32 value) {
  
  randomnum_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.randomNum)
}

// optional bool FastenOldFish = 8;
void EstablishFish::clear_fastenoldfish() {
  fastenoldfish_ = false;
}
 bool EstablishFish::fastenoldfish() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.FastenOldFish)
  return fastenoldfish_;
}
 void EstablishFish::set_fastenoldfish(bool value) {
  
  fastenoldfish_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.FastenOldFish)
}

// optional bool fastenIn = 9;
void EstablishFish::clear_fastenin() {
  fastenin_ = false;
}
 bool EstablishFish::fastenin() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.fastenIn)
  return fastenin_;
}
 void EstablishFish::set_fastenin(bool value) {
  
  fastenin_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.fastenIn)
}

// optional int32 toward = 10;
void EstablishFish::clear_toward() {
  toward_ = 0;
}
 ::google::protobuf::int32 EstablishFish::toward() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.toward)
  return toward_;
}
 void EstablishFish::set_toward(::google::protobuf::int32 value) {
  
  toward_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.toward)
}

// optional .gt_msg.Vec3 offset = 11;
bool EstablishFish::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void EstablishFish::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::gt_msg::Vec3& EstablishFish::offset() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::gt_msg::Vec3* EstablishFish::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::gt_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFish.offset)
  return offset_;
}
::gt_msg::Vec3* EstablishFish::release_offset() {
  // @@protoc_insertion_point(field_release:gt_msg.EstablishFish.offset)
  
  ::gt_msg::Vec3* temp = offset_;
  offset_ = NULL;
  return temp;
}
void EstablishFish::set_allocated_offset(::gt_msg::Vec3* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.EstablishFish.offset)
}

// optional bool foldX = 12;
void EstablishFish::clear_foldx() {
  foldx_ = false;
}
 bool EstablishFish::foldx() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.foldX)
  return foldx_;
}
 void EstablishFish::set_foldx(bool value) {
  
  foldx_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.foldX)
}

// optional bool foldY = 13;
void EstablishFish::clear_foldy() {
  foldy_ = false;
}
 bool EstablishFish::foldy() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.foldY)
  return foldy_;
}
 void EstablishFish::set_foldy(bool value) {
  
  foldy_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.foldY)
}

// optional bool foldZ = 14;
void EstablishFish::clear_foldz() {
  foldz_ = false;
}
 bool EstablishFish::foldz() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.foldZ)
  return foldz_;
}
 void EstablishFish::set_foldz(bool value) {
  
  foldz_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.foldZ)
}

// optional float speedScale = 15;
void EstablishFish::clear_speedscale() {
  speedscale_ = 0;
}
 float EstablishFish::speedscale() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.speedScale)
  return speedscale_;
}
 void EstablishFish::set_speedscale(float value) {
  
  speedscale_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.speedScale)
}

// optional string EnterMessage = 16;
void EstablishFish::clear_entermessage() {
  entermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EstablishFish::entermessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.EnterMessage)
  return entermessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EstablishFish::set_entermessage(const ::std::string& value) {
  
  entermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.EnterMessage)
}
 void EstablishFish::set_entermessage(const char* value) {
  
  entermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.EstablishFish.EnterMessage)
}
 void EstablishFish::set_entermessage(const char* value, size_t size) {
  
  entermessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.EstablishFish.EnterMessage)
}
 ::std::string* EstablishFish::mutable_entermessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFish.EnterMessage)
  return entermessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EstablishFish::release_entermessage() {
  // @@protoc_insertion_point(field_release:gt_msg.EstablishFish.EnterMessage)
  
  return entermessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EstablishFish::set_allocated_entermessage(::std::string* entermessage) {
  if (entermessage != NULL) {
    
  } else {
    
  }
  entermessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entermessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.EstablishFish.EnterMessage)
}

// optional string LeaveMessage = 17;
void EstablishFish::clear_leavemessage() {
  leavemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EstablishFish::leavemessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.LeaveMessage)
  return leavemessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EstablishFish::set_leavemessage(const ::std::string& value) {
  
  leavemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.EstablishFish.LeaveMessage)
}
 void EstablishFish::set_leavemessage(const char* value) {
  
  leavemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.EstablishFish.LeaveMessage)
}
 void EstablishFish::set_leavemessage(const char* value, size_t size) {
  
  leavemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.EstablishFish.LeaveMessage)
}
 ::std::string* EstablishFish::mutable_leavemessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFish.LeaveMessage)
  return leavemessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EstablishFish::release_leavemessage() {
  // @@protoc_insertion_point(field_release:gt_msg.EstablishFish.LeaveMessage)
  
  return leavemessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EstablishFish::set_allocated_leavemessage(::std::string* leavemessage) {
  if (leavemessage != NULL) {
    
  } else {
    
  }
  leavemessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leavemessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.EstablishFish.LeaveMessage)
}

// repeated .gt_msg.MessageTimer messageList = 18;
int EstablishFish::messagelist_size() const {
  return messagelist_.size();
}
void EstablishFish::clear_messagelist() {
  messagelist_.Clear();
}
const ::gt_msg::MessageTimer& EstablishFish::messagelist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishFish.messageList)
  return messagelist_.Get(index);
}
::gt_msg::MessageTimer* EstablishFish::mutable_messagelist(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishFish.messageList)
  return messagelist_.Mutable(index);
}
::gt_msg::MessageTimer* EstablishFish::add_messagelist() {
  // @@protoc_insertion_point(field_add:gt_msg.EstablishFish.messageList)
  return messagelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::MessageTimer >*
EstablishFish::mutable_messagelist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.EstablishFish.messageList)
  return &messagelist_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::MessageTimer >&
EstablishFish::messagelist() const {
  // @@protoc_insertion_point(field_list:gt_msg.EstablishFish.messageList)
  return messagelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatchFish::kSeatIdFieldNumber;
const int CatchFish::kFishIdFieldNumber;
const int CatchFish::kFrameFieldNumber;
const int CatchFish::kFishScoreFieldNumber;
const int CatchFish::kLinkFishIdFieldNumber;
const int CatchFish::kScoreNowFieldNumber;
const int CatchFish::kDieTypeFieldNumber;
const int CatchFish::kRedBagScoreFieldNumber;
const int CatchFish::kRedBagScoreAllFieldNumber;
const int CatchFish::kRedBagresultCodeFieldNumber;
const int CatchFish::kRedBagresultMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatchFish::CatchFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.CatchFish)
}

void CatchFish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CatchFish::CatchFish(const CatchFish& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.CatchFish)
}

void CatchFish::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seatid_ = 0;
  fishid_ = 0;
  frame_ = 0;
  fish_score_ = GOOGLE_LONGLONG(0);
  link_fish_id_ = 0;
  scorenow_ = GOOGLE_LONGLONG(0);
  dietype_ = 0;
  redbagscore_ = 0;
  redbagscoreall_ = 0;
  redbagresultcode_ = 0;
  redbagresultmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CatchFish::~CatchFish() {
  // @@protoc_insertion_point(destructor:gt_msg.CatchFish)
  SharedDtor();
}

void CatchFish::SharedDtor() {
  redbagresultmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CatchFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchFish_descriptor_;
}

const CatchFish& CatchFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

CatchFish* CatchFish::default_instance_ = NULL;

CatchFish* CatchFish::New(::google::protobuf::Arena* arena) const {
  CatchFish* n = new CatchFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CatchFish::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.CatchFish)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CatchFish, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CatchFish*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seatid_, redbagscore_);
  ZR_(redbagscoreall_, redbagresultcode_);
  redbagresultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CatchFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.CatchFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishId;
        break;
      }

      // optional int32 fishId = 2;
      case 2: {
        if (tag == 16) {
         parse_fishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame;
        break;
      }

      // optional int32 frame = 3;
      case 3: {
        if (tag == 24) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fish_score;
        break;
      }

      // optional int64 fish_score = 4;
      case 4: {
        if (tag == 32) {
         parse_fish_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fish_score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_link_fish_id;
        break;
      }

      // optional int32 link_fish_id = 5;
      case 5: {
        if (tag == 40) {
         parse_link_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_fish_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_scoreNow;
        break;
      }

      // optional int64 scoreNow = 6;
      case 6: {
        if (tag == 48) {
         parse_scoreNow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scorenow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dieType;
        break;
      }

      // optional int32 dieType = 7;
      case 7: {
        if (tag == 56) {
         parse_dieType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dietype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_redBagScore;
        break;
      }

      // optional int32 redBagScore = 8;
      case 8: {
        if (tag == 64) {
         parse_redBagScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redbagscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_redBagScoreAll;
        break;
      }

      // optional int32 redBagScoreAll = 9;
      case 9: {
        if (tag == 72) {
         parse_redBagScoreAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redbagscoreall_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_redBagresultCode;
        break;
      }

      // optional int32 redBagresultCode = 10;
      case 10: {
        if (tag == 80) {
         parse_redBagresultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redbagresultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_redBagresultMessage;
        break;
      }

      // optional string redBagresultMessage = 11;
      case 11: {
        if (tag == 90) {
         parse_redBagresultMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redbagresultmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->redbagresultmessage().data(), this->redbagresultmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.CatchFish.redBagresultMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.CatchFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.CatchFish)
  return false;
#undef DO_
}

void CatchFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.CatchFish)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 fishId = 2;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }

  // optional int32 frame = 3;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame(), output);
  }

  // optional int64 fish_score = 4;
  if (this->fish_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fish_score(), output);
  }

  // optional int32 link_fish_id = 5;
  if (this->link_fish_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->link_fish_id(), output);
  }

  // optional int64 scoreNow = 6;
  if (this->scorenow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->scorenow(), output);
  }

  // optional int32 dieType = 7;
  if (this->dietype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dietype(), output);
  }

  // optional int32 redBagScore = 8;
  if (this->redbagscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->redbagscore(), output);
  }

  // optional int32 redBagScoreAll = 9;
  if (this->redbagscoreall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->redbagscoreall(), output);
  }

  // optional int32 redBagresultCode = 10;
  if (this->redbagresultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->redbagresultcode(), output);
  }

  // optional string redBagresultMessage = 11;
  if (this->redbagresultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redbagresultmessage().data(), this->redbagresultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.CatchFish.redBagresultMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->redbagresultmessage(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.CatchFish)
}

::google::protobuf::uint8* CatchFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.CatchFish)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 fishId = 2;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishid(), target);
  }

  // optional int32 frame = 3;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frame(), target);
  }

  // optional int64 fish_score = 4;
  if (this->fish_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->fish_score(), target);
  }

  // optional int32 link_fish_id = 5;
  if (this->link_fish_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->link_fish_id(), target);
  }

  // optional int64 scoreNow = 6;
  if (this->scorenow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->scorenow(), target);
  }

  // optional int32 dieType = 7;
  if (this->dietype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dietype(), target);
  }

  // optional int32 redBagScore = 8;
  if (this->redbagscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->redbagscore(), target);
  }

  // optional int32 redBagScoreAll = 9;
  if (this->redbagscoreall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->redbagscoreall(), target);
  }

  // optional int32 redBagresultCode = 10;
  if (this->redbagresultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->redbagresultcode(), target);
  }

  // optional string redBagresultMessage = 11;
  if (this->redbagresultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redbagresultmessage().data(), this->redbagresultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.CatchFish.redBagresultMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->redbagresultmessage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.CatchFish)
  return target;
}

int CatchFish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.CatchFish)
  int total_size = 0;

  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // optional int32 fishId = 2;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  // optional int32 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional int64 fish_score = 4;
  if (this->fish_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fish_score());
  }

  // optional int32 link_fish_id = 5;
  if (this->link_fish_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_fish_id());
  }

  // optional int64 scoreNow = 6;
  if (this->scorenow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scorenow());
  }

  // optional int32 dieType = 7;
  if (this->dietype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dietype());
  }

  // optional int32 redBagScore = 8;
  if (this->redbagscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redbagscore());
  }

  // optional int32 redBagScoreAll = 9;
  if (this->redbagscoreall() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redbagscoreall());
  }

  // optional int32 redBagresultCode = 10;
  if (this->redbagresultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redbagresultcode());
  }

  // optional string redBagresultMessage = 11;
  if (this->redbagresultmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redbagresultmessage());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.CatchFish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CatchFish* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CatchFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.CatchFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.CatchFish)
    MergeFrom(*source);
  }
}

void CatchFish::MergeFrom(const CatchFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.CatchFish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.fish_score() != 0) {
    set_fish_score(from.fish_score());
  }
  if (from.link_fish_id() != 0) {
    set_link_fish_id(from.link_fish_id());
  }
  if (from.scorenow() != 0) {
    set_scorenow(from.scorenow());
  }
  if (from.dietype() != 0) {
    set_dietype(from.dietype());
  }
  if (from.redbagscore() != 0) {
    set_redbagscore(from.redbagscore());
  }
  if (from.redbagscoreall() != 0) {
    set_redbagscoreall(from.redbagscoreall());
  }
  if (from.redbagresultcode() != 0) {
    set_redbagresultcode(from.redbagresultcode());
  }
  if (from.redbagresultmessage().size() > 0) {

    redbagresultmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redbagresultmessage_);
  }
}

void CatchFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.CatchFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchFish::CopyFrom(const CatchFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.CatchFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchFish::IsInitialized() const {

  return true;
}

void CatchFish::Swap(CatchFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatchFish::InternalSwap(CatchFish* other) {
  std::swap(seatid_, other->seatid_);
  std::swap(fishid_, other->fishid_);
  std::swap(frame_, other->frame_);
  std::swap(fish_score_, other->fish_score_);
  std::swap(link_fish_id_, other->link_fish_id_);
  std::swap(scorenow_, other->scorenow_);
  std::swap(dietype_, other->dietype_);
  std::swap(redbagscore_, other->redbagscore_);
  std::swap(redbagscoreall_, other->redbagscoreall_);
  std::swap(redbagresultcode_, other->redbagresultcode_);
  redbagresultmessage_.Swap(&other->redbagresultmessage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CatchFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchFish_descriptor_;
  metadata.reflection = CatchFish_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CatchFish

// optional int32 seatId = 1;
void CatchFish::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 CatchFish::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.seatId)
  return seatid_;
}
 void CatchFish::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.seatId)
}

// optional int32 fishId = 2;
void CatchFish::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 CatchFish::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.fishId)
  return fishid_;
}
 void CatchFish::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.fishId)
}

// optional int32 frame = 3;
void CatchFish::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 CatchFish::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.frame)
  return frame_;
}
 void CatchFish::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.frame)
}

// optional int64 fish_score = 4;
void CatchFish::clear_fish_score() {
  fish_score_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CatchFish::fish_score() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.fish_score)
  return fish_score_;
}
 void CatchFish::set_fish_score(::google::protobuf::int64 value) {
  
  fish_score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.fish_score)
}

// optional int32 link_fish_id = 5;
void CatchFish::clear_link_fish_id() {
  link_fish_id_ = 0;
}
 ::google::protobuf::int32 CatchFish::link_fish_id() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.link_fish_id)
  return link_fish_id_;
}
 void CatchFish::set_link_fish_id(::google::protobuf::int32 value) {
  
  link_fish_id_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.link_fish_id)
}

// optional int64 scoreNow = 6;
void CatchFish::clear_scorenow() {
  scorenow_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CatchFish::scorenow() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.scoreNow)
  return scorenow_;
}
 void CatchFish::set_scorenow(::google::protobuf::int64 value) {
  
  scorenow_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.scoreNow)
}

// optional int32 dieType = 7;
void CatchFish::clear_dietype() {
  dietype_ = 0;
}
 ::google::protobuf::int32 CatchFish::dietype() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.dieType)
  return dietype_;
}
 void CatchFish::set_dietype(::google::protobuf::int32 value) {
  
  dietype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.dieType)
}

// optional int32 redBagScore = 8;
void CatchFish::clear_redbagscore() {
  redbagscore_ = 0;
}
 ::google::protobuf::int32 CatchFish::redbagscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.redBagScore)
  return redbagscore_;
}
 void CatchFish::set_redbagscore(::google::protobuf::int32 value) {
  
  redbagscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.redBagScore)
}

// optional int32 redBagScoreAll = 9;
void CatchFish::clear_redbagscoreall() {
  redbagscoreall_ = 0;
}
 ::google::protobuf::int32 CatchFish::redbagscoreall() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.redBagScoreAll)
  return redbagscoreall_;
}
 void CatchFish::set_redbagscoreall(::google::protobuf::int32 value) {
  
  redbagscoreall_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.redBagScoreAll)
}

// optional int32 redBagresultCode = 10;
void CatchFish::clear_redbagresultcode() {
  redbagresultcode_ = 0;
}
 ::google::protobuf::int32 CatchFish::redbagresultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.redBagresultCode)
  return redbagresultcode_;
}
 void CatchFish::set_redbagresultcode(::google::protobuf::int32 value) {
  
  redbagresultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.redBagresultCode)
}

// optional string redBagresultMessage = 11;
void CatchFish::clear_redbagresultmessage() {
  redbagresultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CatchFish::redbagresultmessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.CatchFish.redBagresultMessage)
  return redbagresultmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CatchFish::set_redbagresultmessage(const ::std::string& value) {
  
  redbagresultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.CatchFish.redBagresultMessage)
}
 void CatchFish::set_redbagresultmessage(const char* value) {
  
  redbagresultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.CatchFish.redBagresultMessage)
}
 void CatchFish::set_redbagresultmessage(const char* value, size_t size) {
  
  redbagresultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.CatchFish.redBagresultMessage)
}
 ::std::string* CatchFish::mutable_redbagresultmessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.CatchFish.redBagresultMessage)
  return redbagresultmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CatchFish::release_redbagresultmessage() {
  // @@protoc_insertion_point(field_release:gt_msg.CatchFish.redBagresultMessage)
  
  return redbagresultmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CatchFish::set_allocated_redbagresultmessage(::std::string* redbagresultmessage) {
  if (redbagresultmessage != NULL) {
    
  } else {
    
  }
  redbagresultmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redbagresultmessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.CatchFish.redBagresultMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstablishBulletRequest::kFrameFieldNumber;
const int EstablishBulletRequest::kLockFishIdFieldNumber;
const int EstablishBulletRequest::kTerminalFieldNumber;
const int EstablishBulletRequest::kBulletTypeFieldNumber;
const int EstablishBulletRequest::kBulletTurretIDFieldNumber;
const int EstablishBulletRequest::kBulletConfigIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstablishBulletRequest::EstablishBulletRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.EstablishBulletRequest)
}

void EstablishBulletRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  terminal_ = const_cast< ::gt_msg::Vec2*>(&::gt_msg::Vec2::default_instance());
}

EstablishBulletRequest::EstablishBulletRequest(const EstablishBulletRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.EstablishBulletRequest)
}

void EstablishBulletRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
  lockfishid_ = 0;
  terminal_ = NULL;
  bullettype_ = 0;
  bulletturretid_ = 0;
  bulletconfigid_ = 0;
}

EstablishBulletRequest::~EstablishBulletRequest() {
  // @@protoc_insertion_point(destructor:gt_msg.EstablishBulletRequest)
  SharedDtor();
}

void EstablishBulletRequest::SharedDtor() {
  if (this != default_instance_) {
    delete terminal_;
  }
}

void EstablishBulletRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EstablishBulletRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EstablishBulletRequest_descriptor_;
}

const EstablishBulletRequest& EstablishBulletRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

EstablishBulletRequest* EstablishBulletRequest::default_instance_ = NULL;

EstablishBulletRequest* EstablishBulletRequest::New(::google::protobuf::Arena* arena) const {
  EstablishBulletRequest* n = new EstablishBulletRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EstablishBulletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.EstablishBulletRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EstablishBulletRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EstablishBulletRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, lockfishid_);
  ZR_(bullettype_, bulletconfigid_);
  if (GetArenaNoVirtual() == NULL && terminal_ != NULL) delete terminal_;
  terminal_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool EstablishBulletRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.EstablishBulletRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lockFishId;
        break;
      }

      // optional int32 lockFishId = 2;
      case 2: {
        if (tag == 16) {
         parse_lockFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockfishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terminal;
        break;
      }

      // optional .gt_msg.Vec2 terminal = 3;
      case 3: {
        if (tag == 26) {
         parse_terminal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bulletType;
        break;
      }

      // optional int32 bulletType = 4;
      case 4: {
        if (tag == 32) {
         parse_bulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullettype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bulletTurretID;
        break;
      }

      // optional int32 bulletTurretID = 5;
      case 5: {
        if (tag == 40) {
         parse_bulletTurretID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletturretid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bulletConfigID;
        break;
      }

      // optional int32 bulletConfigID = 6;
      case 6: {
        if (tag == 48) {
         parse_bulletConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletconfigid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.EstablishBulletRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.EstablishBulletRequest)
  return false;
#undef DO_
}

void EstablishBulletRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.EstablishBulletRequest)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional int32 lockFishId = 2;
  if (this->lockfishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lockfishid(), output);
  }

  // optional .gt_msg.Vec2 terminal = 3;
  if (this->has_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->terminal_, output);
  }

  // optional int32 bulletType = 4;
  if (this->bullettype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullettype(), output);
  }

  // optional int32 bulletTurretID = 5;
  if (this->bulletturretid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bulletturretid(), output);
  }

  // optional int32 bulletConfigID = 6;
  if (this->bulletconfigid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bulletconfigid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.EstablishBulletRequest)
}

::google::protobuf::uint8* EstablishBulletRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.EstablishBulletRequest)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional int32 lockFishId = 2;
  if (this->lockfishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lockfishid(), target);
  }

  // optional .gt_msg.Vec2 terminal = 3;
  if (this->has_terminal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->terminal_, false, target);
  }

  // optional int32 bulletType = 4;
  if (this->bullettype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullettype(), target);
  }

  // optional int32 bulletTurretID = 5;
  if (this->bulletturretid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bulletturretid(), target);
  }

  // optional int32 bulletConfigID = 6;
  if (this->bulletconfigid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bulletconfigid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.EstablishBulletRequest)
  return target;
}

int EstablishBulletRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.EstablishBulletRequest)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional int32 lockFishId = 2;
  if (this->lockfishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lockfishid());
  }

  // optional .gt_msg.Vec2 terminal = 3;
  if (this->has_terminal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->terminal_);
  }

  // optional int32 bulletType = 4;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullettype());
  }

  // optional int32 bulletTurretID = 5;
  if (this->bulletturretid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bulletturretid());
  }

  // optional int32 bulletConfigID = 6;
  if (this->bulletconfigid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bulletconfigid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EstablishBulletRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.EstablishBulletRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EstablishBulletRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EstablishBulletRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.EstablishBulletRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.EstablishBulletRequest)
    MergeFrom(*source);
  }
}

void EstablishBulletRequest::MergeFrom(const EstablishBulletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.EstablishBulletRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.lockfishid() != 0) {
    set_lockfishid(from.lockfishid());
  }
  if (from.has_terminal()) {
    mutable_terminal()->::gt_msg::Vec2::MergeFrom(from.terminal());
  }
  if (from.bullettype() != 0) {
    set_bullettype(from.bullettype());
  }
  if (from.bulletturretid() != 0) {
    set_bulletturretid(from.bulletturretid());
  }
  if (from.bulletconfigid() != 0) {
    set_bulletconfigid(from.bulletconfigid());
  }
}

void EstablishBulletRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.EstablishBulletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstablishBulletRequest::CopyFrom(const EstablishBulletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.EstablishBulletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstablishBulletRequest::IsInitialized() const {

  return true;
}

void EstablishBulletRequest::Swap(EstablishBulletRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstablishBulletRequest::InternalSwap(EstablishBulletRequest* other) {
  std::swap(frame_, other->frame_);
  std::swap(lockfishid_, other->lockfishid_);
  std::swap(terminal_, other->terminal_);
  std::swap(bullettype_, other->bullettype_);
  std::swap(bulletturretid_, other->bulletturretid_);
  std::swap(bulletconfigid_, other->bulletconfigid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EstablishBulletRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EstablishBulletRequest_descriptor_;
  metadata.reflection = EstablishBulletRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EstablishBulletRequest

// optional int32 frame = 1;
void EstablishBulletRequest::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 EstablishBulletRequest::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishBulletRequest.frame)
  return frame_;
}
 void EstablishBulletRequest::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishBulletRequest.frame)
}

// optional int32 lockFishId = 2;
void EstablishBulletRequest::clear_lockfishid() {
  lockfishid_ = 0;
}
 ::google::protobuf::int32 EstablishBulletRequest::lockfishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishBulletRequest.lockFishId)
  return lockfishid_;
}
 void EstablishBulletRequest::set_lockfishid(::google::protobuf::int32 value) {
  
  lockfishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishBulletRequest.lockFishId)
}

// optional .gt_msg.Vec2 terminal = 3;
bool EstablishBulletRequest::has_terminal() const {
  return !_is_default_instance_ && terminal_ != NULL;
}
void EstablishBulletRequest::clear_terminal() {
  if (GetArenaNoVirtual() == NULL && terminal_ != NULL) delete terminal_;
  terminal_ = NULL;
}
const ::gt_msg::Vec2& EstablishBulletRequest::terminal() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishBulletRequest.terminal)
  return terminal_ != NULL ? *terminal_ : *default_instance_->terminal_;
}
::gt_msg::Vec2* EstablishBulletRequest::mutable_terminal() {
  
  if (terminal_ == NULL) {
    terminal_ = new ::gt_msg::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.EstablishBulletRequest.terminal)
  return terminal_;
}
::gt_msg::Vec2* EstablishBulletRequest::release_terminal() {
  // @@protoc_insertion_point(field_release:gt_msg.EstablishBulletRequest.terminal)
  
  ::gt_msg::Vec2* temp = terminal_;
  terminal_ = NULL;
  return temp;
}
void EstablishBulletRequest::set_allocated_terminal(::gt_msg::Vec2* terminal) {
  delete terminal_;
  terminal_ = terminal;
  if (terminal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.EstablishBulletRequest.terminal)
}

// optional int32 bulletType = 4;
void EstablishBulletRequest::clear_bullettype() {
  bullettype_ = 0;
}
 ::google::protobuf::int32 EstablishBulletRequest::bullettype() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishBulletRequest.bulletType)
  return bullettype_;
}
 void EstablishBulletRequest::set_bullettype(::google::protobuf::int32 value) {
  
  bullettype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishBulletRequest.bulletType)
}

// optional int32 bulletTurretID = 5;
void EstablishBulletRequest::clear_bulletturretid() {
  bulletturretid_ = 0;
}
 ::google::protobuf::int32 EstablishBulletRequest::bulletturretid() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishBulletRequest.bulletTurretID)
  return bulletturretid_;
}
 void EstablishBulletRequest::set_bulletturretid(::google::protobuf::int32 value) {
  
  bulletturretid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishBulletRequest.bulletTurretID)
}

// optional int32 bulletConfigID = 6;
void EstablishBulletRequest::clear_bulletconfigid() {
  bulletconfigid_ = 0;
}
 ::google::protobuf::int32 EstablishBulletRequest::bulletconfigid() const {
  // @@protoc_insertion_point(field_get:gt_msg.EstablishBulletRequest.bulletConfigID)
  return bulletconfigid_;
}
 void EstablishBulletRequest::set_bulletconfigid(::google::protobuf::int32 value) {
  
  bulletconfigid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.EstablishBulletRequest.bulletConfigID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateBullet::kSeatIdFieldNumber;
const int CreateBullet::kSpeedFieldNumber;
const int CreateBullet::kFrameFieldNumber;
const int CreateBullet::kTerminalFieldNumber;
const int CreateBullet::kLockFishIdFieldNumber;
const int CreateBullet::kBulletTypeFieldNumber;
const int CreateBullet::kScoreNowFieldNumber;
const int CreateBullet::kBulletTurretIDFieldNumber;
const int CreateBullet::kBulletConfigIDFieldNumber;
const int CreateBullet::kUserIDFieldNumber;
const int CreateBullet::kBulletRemainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateBullet::CreateBullet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.CreateBullet)
}

void CreateBullet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  terminal_ = const_cast< ::gt_msg::Vec2*>(&::gt_msg::Vec2::default_instance());
}

CreateBullet::CreateBullet(const CreateBullet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.CreateBullet)
}

void CreateBullet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  seatid_ = 0;
  speed_ = 0;
  frame_ = 0;
  terminal_ = NULL;
  lockfishid_ = 0;
  bullettype_ = 0;
  scorenow_ = GOOGLE_LONGLONG(0);
  bulletturretid_ = 0;
  bulletconfigid_ = 0;
  userid_ = 0;
  bulletremain_ = 0;
}

CreateBullet::~CreateBullet() {
  // @@protoc_insertion_point(destructor:gt_msg.CreateBullet)
  SharedDtor();
}

void CreateBullet::SharedDtor() {
  if (this != default_instance_) {
    delete terminal_;
  }
}

void CreateBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBullet_descriptor_;
}

const CreateBullet& CreateBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

CreateBullet* CreateBullet::default_instance_ = NULL;

CreateBullet* CreateBullet::New(::google::protobuf::Arena* arena) const {
  CreateBullet* n = new CreateBullet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.CreateBullet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateBullet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateBullet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seatid_, speed_);
  ZR_(frame_, bulletturretid_);
  if (GetArenaNoVirtual() == NULL && terminal_ != NULL) delete terminal_;
  terminal_ = NULL;
  ZR_(bulletconfigid_, bulletremain_);

#undef ZR_HELPER_
#undef ZR_

}

bool CreateBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.CreateBullet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }

      // optional int32 speed = 2;
      case 2: {
        if (tag == 16) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame;
        break;
      }

      // optional int32 frame = 3;
      case 3: {
        if (tag == 24) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_terminal;
        break;
      }

      // optional .gt_msg.Vec2 terminal = 4;
      case 4: {
        if (tag == 34) {
         parse_terminal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lockFishId;
        break;
      }

      // optional int32 lockFishId = 5;
      case 5: {
        if (tag == 40) {
         parse_lockFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockfishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bulletType;
        break;
      }

      // optional int32 bulletType = 6;
      case 6: {
        if (tag == 48) {
         parse_bulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullettype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_scoreNow;
        break;
      }

      // optional int64 scoreNow = 7;
      case 7: {
        if (tag == 56) {
         parse_scoreNow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scorenow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bulletTurretID;
        break;
      }

      // optional int32 bulletTurretID = 8;
      case 8: {
        if (tag == 64) {
         parse_bulletTurretID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletturretid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bulletConfigID;
        break;
      }

      // optional int32 bulletConfigID = 9;
      case 9: {
        if (tag == 72) {
         parse_bulletConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletconfigid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 10;
      case 10: {
        if (tag == 80) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_BulletRemain;
        break;
      }

      // optional int32 BulletRemain = 11;
      case 11: {
        if (tag == 88) {
         parse_BulletRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletremain_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.CreateBullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.CreateBullet)
  return false;
#undef DO_
}

void CreateBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.CreateBullet)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  // optional int32 frame = 3;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame(), output);
  }

  // optional .gt_msg.Vec2 terminal = 4;
  if (this->has_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->terminal_, output);
  }

  // optional int32 lockFishId = 5;
  if (this->lockfishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lockfishid(), output);
  }

  // optional int32 bulletType = 6;
  if (this->bullettype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bullettype(), output);
  }

  // optional int64 scoreNow = 7;
  if (this->scorenow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->scorenow(), output);
  }

  // optional int32 bulletTurretID = 8;
  if (this->bulletturretid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bulletturretid(), output);
  }

  // optional int32 bulletConfigID = 9;
  if (this->bulletconfigid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bulletconfigid(), output);
  }

  // optional int32 UserID = 10;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->userid(), output);
  }

  // optional int32 BulletRemain = 11;
  if (this->bulletremain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bulletremain(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.CreateBullet)
}

::google::protobuf::uint8* CreateBullet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.CreateBullet)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  // optional int32 frame = 3;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frame(), target);
  }

  // optional .gt_msg.Vec2 terminal = 4;
  if (this->has_terminal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->terminal_, false, target);
  }

  // optional int32 lockFishId = 5;
  if (this->lockfishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lockfishid(), target);
  }

  // optional int32 bulletType = 6;
  if (this->bullettype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bullettype(), target);
  }

  // optional int64 scoreNow = 7;
  if (this->scorenow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->scorenow(), target);
  }

  // optional int32 bulletTurretID = 8;
  if (this->bulletturretid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bulletturretid(), target);
  }

  // optional int32 bulletConfigID = 9;
  if (this->bulletconfigid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bulletconfigid(), target);
  }

  // optional int32 UserID = 10;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->userid(), target);
  }

  // optional int32 BulletRemain = 11;
  if (this->bulletremain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bulletremain(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.CreateBullet)
  return target;
}

int CreateBullet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.CreateBullet)
  int total_size = 0;

  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // optional int32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional int32 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional .gt_msg.Vec2 terminal = 4;
  if (this->has_terminal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->terminal_);
  }

  // optional int32 lockFishId = 5;
  if (this->lockfishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lockfishid());
  }

  // optional int32 bulletType = 6;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullettype());
  }

  // optional int64 scoreNow = 7;
  if (this->scorenow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scorenow());
  }

  // optional int32 bulletTurretID = 8;
  if (this->bulletturretid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bulletturretid());
  }

  // optional int32 bulletConfigID = 9;
  if (this->bulletconfigid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bulletconfigid());
  }

  // optional int32 UserID = 10;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional int32 BulletRemain = 11;
  if (this->bulletremain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bulletremain());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateBullet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.CreateBullet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateBullet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateBullet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.CreateBullet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.CreateBullet)
    MergeFrom(*source);
  }
}

void CreateBullet::MergeFrom(const CreateBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.CreateBullet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.has_terminal()) {
    mutable_terminal()->::gt_msg::Vec2::MergeFrom(from.terminal());
  }
  if (from.lockfishid() != 0) {
    set_lockfishid(from.lockfishid());
  }
  if (from.bullettype() != 0) {
    set_bullettype(from.bullettype());
  }
  if (from.scorenow() != 0) {
    set_scorenow(from.scorenow());
  }
  if (from.bulletturretid() != 0) {
    set_bulletturretid(from.bulletturretid());
  }
  if (from.bulletconfigid() != 0) {
    set_bulletconfigid(from.bulletconfigid());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.bulletremain() != 0) {
    set_bulletremain(from.bulletremain());
  }
}

void CreateBullet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.CreateBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBullet::CopyFrom(const CreateBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.CreateBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBullet::IsInitialized() const {

  return true;
}

void CreateBullet::Swap(CreateBullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateBullet::InternalSwap(CreateBullet* other) {
  std::swap(seatid_, other->seatid_);
  std::swap(speed_, other->speed_);
  std::swap(frame_, other->frame_);
  std::swap(terminal_, other->terminal_);
  std::swap(lockfishid_, other->lockfishid_);
  std::swap(bullettype_, other->bullettype_);
  std::swap(scorenow_, other->scorenow_);
  std::swap(bulletturretid_, other->bulletturretid_);
  std::swap(bulletconfigid_, other->bulletconfigid_);
  std::swap(userid_, other->userid_);
  std::swap(bulletremain_, other->bulletremain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateBullet_descriptor_;
  metadata.reflection = CreateBullet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateBullet

// optional int32 seatId = 1;
void CreateBullet::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 CreateBullet::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.seatId)
  return seatid_;
}
 void CreateBullet::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.seatId)
}

// optional int32 speed = 2;
void CreateBullet::clear_speed() {
  speed_ = 0;
}
 ::google::protobuf::int32 CreateBullet::speed() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.speed)
  return speed_;
}
 void CreateBullet::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.speed)
}

// optional int32 frame = 3;
void CreateBullet::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 CreateBullet::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.frame)
  return frame_;
}
 void CreateBullet::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.frame)
}

// optional .gt_msg.Vec2 terminal = 4;
bool CreateBullet::has_terminal() const {
  return !_is_default_instance_ && terminal_ != NULL;
}
void CreateBullet::clear_terminal() {
  if (GetArenaNoVirtual() == NULL && terminal_ != NULL) delete terminal_;
  terminal_ = NULL;
}
const ::gt_msg::Vec2& CreateBullet::terminal() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.terminal)
  return terminal_ != NULL ? *terminal_ : *default_instance_->terminal_;
}
::gt_msg::Vec2* CreateBullet::mutable_terminal() {
  
  if (terminal_ == NULL) {
    terminal_ = new ::gt_msg::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.CreateBullet.terminal)
  return terminal_;
}
::gt_msg::Vec2* CreateBullet::release_terminal() {
  // @@protoc_insertion_point(field_release:gt_msg.CreateBullet.terminal)
  
  ::gt_msg::Vec2* temp = terminal_;
  terminal_ = NULL;
  return temp;
}
void CreateBullet::set_allocated_terminal(::gt_msg::Vec2* terminal) {
  delete terminal_;
  terminal_ = terminal;
  if (terminal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.CreateBullet.terminal)
}

// optional int32 lockFishId = 5;
void CreateBullet::clear_lockfishid() {
  lockfishid_ = 0;
}
 ::google::protobuf::int32 CreateBullet::lockfishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.lockFishId)
  return lockfishid_;
}
 void CreateBullet::set_lockfishid(::google::protobuf::int32 value) {
  
  lockfishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.lockFishId)
}

// optional int32 bulletType = 6;
void CreateBullet::clear_bullettype() {
  bullettype_ = 0;
}
 ::google::protobuf::int32 CreateBullet::bullettype() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.bulletType)
  return bullettype_;
}
 void CreateBullet::set_bullettype(::google::protobuf::int32 value) {
  
  bullettype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.bulletType)
}

// optional int64 scoreNow = 7;
void CreateBullet::clear_scorenow() {
  scorenow_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CreateBullet::scorenow() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.scoreNow)
  return scorenow_;
}
 void CreateBullet::set_scorenow(::google::protobuf::int64 value) {
  
  scorenow_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.scoreNow)
}

// optional int32 bulletTurretID = 8;
void CreateBullet::clear_bulletturretid() {
  bulletturretid_ = 0;
}
 ::google::protobuf::int32 CreateBullet::bulletturretid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.bulletTurretID)
  return bulletturretid_;
}
 void CreateBullet::set_bulletturretid(::google::protobuf::int32 value) {
  
  bulletturretid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.bulletTurretID)
}

// optional int32 bulletConfigID = 9;
void CreateBullet::clear_bulletconfigid() {
  bulletconfigid_ = 0;
}
 ::google::protobuf::int32 CreateBullet::bulletconfigid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.bulletConfigID)
  return bulletconfigid_;
}
 void CreateBullet::set_bulletconfigid(::google::protobuf::int32 value) {
  
  bulletconfigid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.bulletConfigID)
}

// optional int32 UserID = 10;
void CreateBullet::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 CreateBullet::userid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.UserID)
  return userid_;
}
 void CreateBullet::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.UserID)
}

// optional int32 BulletRemain = 11;
void CreateBullet::clear_bulletremain() {
  bulletremain_ = 0;
}
 ::google::protobuf::int32 CreateBullet::bulletremain() const {
  // @@protoc_insertion_point(field_get:gt_msg.CreateBullet.BulletRemain)
  return bulletremain_;
}
 void CreateBullet::set_bulletremain(::google::protobuf::int32 value) {
  
  bulletremain_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CreateBullet.BulletRemain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreezeFish::kFrameFieldNumber;
const int FreezeFish::kDurationFieldNumber;
const int FreezeFish::kFishListFieldNumber;
const int FreezeFish::kShowEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreezeFish::FreezeFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FreezeFish)
}

void FreezeFish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FreezeFish::FreezeFish(const FreezeFish& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FreezeFish)
}

void FreezeFish::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
  duration_ = 0;
  showeffect_ = false;
}

FreezeFish::~FreezeFish() {
  // @@protoc_insertion_point(destructor:gt_msg.FreezeFish)
  SharedDtor();
}

void FreezeFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreezeFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreezeFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreezeFish_descriptor_;
}

const FreezeFish& FreezeFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FreezeFish* FreezeFish::default_instance_ = NULL;

FreezeFish* FreezeFish::New(::google::protobuf::Arena* arena) const {
  FreezeFish* n = new FreezeFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreezeFish::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FreezeFish)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FreezeFish, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FreezeFish*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, duration_);
  showeffect_ = false;

#undef ZR_HELPER_
#undef ZR_

  fishlist_.Clear();
}

bool FreezeFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FreezeFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fishList;
        break;
      }

      // repeated int32 fishList = 3;
      case 3: {
        if (tag == 26) {
         parse_fishList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishlist())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_fishlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_showEffect;
        break;
      }

      // optional bool showEffect = 4;
      case 4: {
        if (tag == 32) {
         parse_showEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showeffect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FreezeFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FreezeFish)
  return false;
#undef DO_
}

void FreezeFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FreezeFish)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // repeated int32 fishList = 3;
  if (this->fishlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fishlist_cached_byte_size_);
  }
  for (int i = 0; i < this->fishlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fishlist(i), output);
  }

  // optional bool showEffect = 4;
  if (this->showeffect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->showeffect(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FreezeFish)
}

::google::protobuf::uint8* FreezeFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FreezeFish)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // repeated int32 fishList = 3;
  if (this->fishlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fishlist_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fishlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fishlist(i), target);
  }

  // optional bool showEffect = 4;
  if (this->showeffect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->showeffect(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FreezeFish)
  return target;
}

int FreezeFish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FreezeFish)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // optional bool showEffect = 4;
  if (this->showeffect() != 0) {
    total_size += 1 + 1;
  }

  // repeated int32 fishList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishlist(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fishlist_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreezeFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FreezeFish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FreezeFish* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FreezeFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FreezeFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FreezeFish)
    MergeFrom(*source);
  }
}

void FreezeFish::MergeFrom(const FreezeFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FreezeFish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fishlist_.MergeFrom(from.fishlist_);
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.showeffect() != 0) {
    set_showeffect(from.showeffect());
  }
}

void FreezeFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FreezeFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreezeFish::CopyFrom(const FreezeFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FreezeFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeFish::IsInitialized() const {

  return true;
}

void FreezeFish::Swap(FreezeFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreezeFish::InternalSwap(FreezeFish* other) {
  std::swap(frame_, other->frame_);
  std::swap(duration_, other->duration_);
  fishlist_.UnsafeArenaSwap(&other->fishlist_);
  std::swap(showeffect_, other->showeffect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreezeFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreezeFish_descriptor_;
  metadata.reflection = FreezeFish_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FreezeFish

// optional int32 frame = 1;
void FreezeFish::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 FreezeFish::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.FreezeFish.frame)
  return frame_;
}
 void FreezeFish::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FreezeFish.frame)
}

// optional int32 duration = 2;
void FreezeFish::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 FreezeFish::duration() const {
  // @@protoc_insertion_point(field_get:gt_msg.FreezeFish.duration)
  return duration_;
}
 void FreezeFish::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FreezeFish.duration)
}

// repeated int32 fishList = 3;
int FreezeFish::fishlist_size() const {
  return fishlist_.size();
}
void FreezeFish::clear_fishlist() {
  fishlist_.Clear();
}
 ::google::protobuf::int32 FreezeFish::fishlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FreezeFish.fishList)
  return fishlist_.Get(index);
}
 void FreezeFish::set_fishlist(int index, ::google::protobuf::int32 value) {
  fishlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:gt_msg.FreezeFish.fishList)
}
 void FreezeFish::add_fishlist(::google::protobuf::int32 value) {
  fishlist_.Add(value);
  // @@protoc_insertion_point(field_add:gt_msg.FreezeFish.fishList)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FreezeFish::fishlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.FreezeFish.fishList)
  return fishlist_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FreezeFish::mutable_fishlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FreezeFish.fishList)
  return &fishlist_;
}

// optional bool showEffect = 4;
void FreezeFish::clear_showeffect() {
  showeffect_ = false;
}
 bool FreezeFish::showeffect() const {
  // @@protoc_insertion_point(field_get:gt_msg.FreezeFish.showEffect)
  return showeffect_;
}
 void FreezeFish::set_showeffect(bool value) {
  
  showeffect_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FreezeFish.showEffect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastEscape::kFrameFieldNumber;
const int FastEscape::kSpeedFieldNumber;
const int FastEscape::kDurationFieldNumber;
const int FastEscape::kFishListFieldNumber;
const int FastEscape::kShowEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastEscape::FastEscape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FastEscape)
}

void FastEscape::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FastEscape::FastEscape(const FastEscape& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FastEscape)
}

void FastEscape::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
  speed_ = 0;
  duration_ = 0;
  showeffect_ = false;
}

FastEscape::~FastEscape() {
  // @@protoc_insertion_point(destructor:gt_msg.FastEscape)
  SharedDtor();
}

void FastEscape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FastEscape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastEscape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastEscape_descriptor_;
}

const FastEscape& FastEscape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FastEscape* FastEscape::default_instance_ = NULL;

FastEscape* FastEscape::New(::google::protobuf::Arena* arena) const {
  FastEscape* n = new FastEscape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FastEscape::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FastEscape)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FastEscape, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FastEscape*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, speed_);
  ZR_(duration_, showeffect_);

#undef ZR_HELPER_
#undef ZR_

  fishlist_.Clear();
}

bool FastEscape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FastEscape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_speed;
        break;
      }

      // optional float speed = 2;
      case 2: {
        if (tag == 21) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional int32 duration = 3;
      case 3: {
        if (tag == 24) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fishList;
        break;
      }

      // repeated int32 fishList = 4;
      case 4: {
        if (tag == 34) {
         parse_fishList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishlist())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_fishlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_showEffect;
        break;
      }

      // optional bool showEffect = 5;
      case 5: {
        if (tag == 40) {
         parse_showEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showeffect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FastEscape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FastEscape)
  return false;
#undef DO_
}

void FastEscape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FastEscape)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional float speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // optional int32 duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // repeated int32 fishList = 4;
  if (this->fishlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fishlist_cached_byte_size_);
  }
  for (int i = 0; i < this->fishlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fishlist(i), output);
  }

  // optional bool showEffect = 5;
  if (this->showeffect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->showeffect(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FastEscape)
}

::google::protobuf::uint8* FastEscape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FastEscape)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional float speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // optional int32 duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // repeated int32 fishList = 4;
  if (this->fishlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fishlist_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fishlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fishlist(i), target);
  }

  // optional bool showEffect = 5;
  if (this->showeffect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->showeffect(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FastEscape)
  return target;
}

int FastEscape::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FastEscape)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional float speed = 2;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // optional bool showEffect = 5;
  if (this->showeffect() != 0) {
    total_size += 1 + 1;
  }

  // repeated int32 fishList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishlist(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fishlist_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastEscape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FastEscape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FastEscape* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FastEscape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FastEscape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FastEscape)
    MergeFrom(*source);
  }
}

void FastEscape::MergeFrom(const FastEscape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FastEscape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fishlist_.MergeFrom(from.fishlist_);
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.showeffect() != 0) {
    set_showeffect(from.showeffect());
  }
}

void FastEscape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FastEscape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastEscape::CopyFrom(const FastEscape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FastEscape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastEscape::IsInitialized() const {

  return true;
}

void FastEscape::Swap(FastEscape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastEscape::InternalSwap(FastEscape* other) {
  std::swap(frame_, other->frame_);
  std::swap(speed_, other->speed_);
  std::swap(duration_, other->duration_);
  fishlist_.UnsafeArenaSwap(&other->fishlist_);
  std::swap(showeffect_, other->showeffect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FastEscape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastEscape_descriptor_;
  metadata.reflection = FastEscape_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FastEscape

// optional int32 frame = 1;
void FastEscape::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 FastEscape::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastEscape.frame)
  return frame_;
}
 void FastEscape::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastEscape.frame)
}

// optional float speed = 2;
void FastEscape::clear_speed() {
  speed_ = 0;
}
 float FastEscape::speed() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastEscape.speed)
  return speed_;
}
 void FastEscape::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastEscape.speed)
}

// optional int32 duration = 3;
void FastEscape::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 FastEscape::duration() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastEscape.duration)
  return duration_;
}
 void FastEscape::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastEscape.duration)
}

// repeated int32 fishList = 4;
int FastEscape::fishlist_size() const {
  return fishlist_.size();
}
void FastEscape::clear_fishlist() {
  fishlist_.Clear();
}
 ::google::protobuf::int32 FastEscape::fishlist(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FastEscape.fishList)
  return fishlist_.Get(index);
}
 void FastEscape::set_fishlist(int index, ::google::protobuf::int32 value) {
  fishlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:gt_msg.FastEscape.fishList)
}
 void FastEscape::add_fishlist(::google::protobuf::int32 value) {
  fishlist_.Add(value);
  // @@protoc_insertion_point(field_add:gt_msg.FastEscape.fishList)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FastEscape::fishlist() const {
  // @@protoc_insertion_point(field_list:gt_msg.FastEscape.fishList)
  return fishlist_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FastEscape::mutable_fishlist() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FastEscape.fishList)
  return &fishlist_;
}

// optional bool showEffect = 5;
void FastEscape::clear_showeffect() {
  showeffect_ = false;
}
 bool FastEscape::showeffect() const {
  // @@protoc_insertion_point(field_get:gt_msg.FastEscape.showEffect)
  return showeffect_;
}
 void FastEscape::set_showeffect(bool value) {
  
  showeffect_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FastEscape.showEffect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishAppearNotify::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishAppearNotify::FishAppearNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishAppearNotify)
}

void FishAppearNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishAppearNotify::FishAppearNotify(const FishAppearNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishAppearNotify)
}

void FishAppearNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FishAppearNotify::~FishAppearNotify() {
  // @@protoc_insertion_point(destructor:gt_msg.FishAppearNotify)
  SharedDtor();
}

void FishAppearNotify::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FishAppearNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishAppearNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishAppearNotify_descriptor_;
}

const FishAppearNotify& FishAppearNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishAppearNotify* FishAppearNotify::default_instance_ = NULL;

FishAppearNotify* FishAppearNotify::New(::google::protobuf::Arena* arena) const {
  FishAppearNotify* n = new FishAppearNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishAppearNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishAppearNotify)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FishAppearNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishAppearNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.FishAppearNotify.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishAppearNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishAppearNotify)
  return false;
#undef DO_
}

void FishAppearNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishAppearNotify)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishAppearNotify.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishAppearNotify)
}

::google::protobuf::uint8* FishAppearNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishAppearNotify)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.FishAppearNotify.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishAppearNotify)
  return target;
}

int FishAppearNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishAppearNotify)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishAppearNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishAppearNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishAppearNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishAppearNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishAppearNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishAppearNotify)
    MergeFrom(*source);
  }
}

void FishAppearNotify::MergeFrom(const FishAppearNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishAppearNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FishAppearNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishAppearNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishAppearNotify::CopyFrom(const FishAppearNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishAppearNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishAppearNotify::IsInitialized() const {

  return true;
}

void FishAppearNotify::Swap(FishAppearNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishAppearNotify::InternalSwap(FishAppearNotify* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishAppearNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishAppearNotify_descriptor_;
  metadata.reflection = FishAppearNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishAppearNotify

// optional string name = 1;
void FishAppearNotify::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FishAppearNotify::name() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishAppearNotify.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishAppearNotify::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.FishAppearNotify.name)
}
 void FishAppearNotify::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.FishAppearNotify.name)
}
 void FishAppearNotify::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.FishAppearNotify.name)
}
 ::std::string* FishAppearNotify::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.FishAppearNotify.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FishAppearNotify::release_name() {
  // @@protoc_insertion_point(field_release:gt_msg.FishAppearNotify.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FishAppearNotify::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishAppearNotify.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastSkillResponse::kSkillConfigIDFieldNumber;
const int CastSkillResponse::kSeatIdFieldNumber;
const int CastSkillResponse::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastSkillResponse::CastSkillResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.CastSkillResponse)
}

void CastSkillResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CastSkillResponse::CastSkillResponse(const CastSkillResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.CastSkillResponse)
}

void CastSkillResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  skillconfigid_ = 0;
  seatid_ = 0;
  resultcode_ = 0;
}

CastSkillResponse::~CastSkillResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.CastSkillResponse)
  SharedDtor();
}

void CastSkillResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CastSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastSkillResponse_descriptor_;
}

const CastSkillResponse& CastSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

CastSkillResponse* CastSkillResponse::default_instance_ = NULL;

CastSkillResponse* CastSkillResponse::New(::google::protobuf::Arena* arena) const {
  CastSkillResponse* n = new CastSkillResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastSkillResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.CastSkillResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CastSkillResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CastSkillResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(skillconfigid_, resultcode_);

#undef ZR_HELPER_
#undef ZR_

}

bool CastSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.CastSkillResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillConfigID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillconfigid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatId;
        break;
      }

      // optional int32 seatId = 2;
      case 2: {
        if (tag == 16) {
         parse_seatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 3;
      case 3: {
        if (tag == 24) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.CastSkillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.CastSkillResponse)
  return false;
#undef DO_
}

void CastSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.CastSkillResponse)
  // optional int32 skillConfigID = 1;
  if (this->skillconfigid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillconfigid(), output);
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 resultCode = 3;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resultcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.CastSkillResponse)
}

::google::protobuf::uint8* CastSkillResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.CastSkillResponse)
  // optional int32 skillConfigID = 1;
  if (this->skillconfigid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillconfigid(), target);
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 resultCode = 3;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resultcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.CastSkillResponse)
  return target;
}

int CastSkillResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.CastSkillResponse)
  int total_size = 0;

  // optional int32 skillConfigID = 1;
  if (this->skillconfigid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skillconfigid());
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // optional int32 resultCode = 3;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.CastSkillResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CastSkillResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CastSkillResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.CastSkillResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.CastSkillResponse)
    MergeFrom(*source);
  }
}

void CastSkillResponse::MergeFrom(const CastSkillResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.CastSkillResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.skillconfigid() != 0) {
    set_skillconfigid(from.skillconfigid());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
}

void CastSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.CastSkillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastSkillResponse::CopyFrom(const CastSkillResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.CastSkillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastSkillResponse::IsInitialized() const {

  return true;
}

void CastSkillResponse::Swap(CastSkillResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastSkillResponse::InternalSwap(CastSkillResponse* other) {
  std::swap(skillconfigid_, other->skillconfigid_);
  std::swap(seatid_, other->seatid_);
  std::swap(resultcode_, other->resultcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastSkillResponse_descriptor_;
  metadata.reflection = CastSkillResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastSkillResponse

// optional int32 skillConfigID = 1;
void CastSkillResponse::clear_skillconfigid() {
  skillconfigid_ = 0;
}
 ::google::protobuf::int32 CastSkillResponse::skillconfigid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CastSkillResponse.skillConfigID)
  return skillconfigid_;
}
 void CastSkillResponse::set_skillconfigid(::google::protobuf::int32 value) {
  
  skillconfigid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CastSkillResponse.skillConfigID)
}

// optional int32 seatId = 2;
void CastSkillResponse::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 CastSkillResponse::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.CastSkillResponse.seatId)
  return seatid_;
}
 void CastSkillResponse::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CastSkillResponse.seatId)
}

// optional int32 resultCode = 3;
void CastSkillResponse::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 CastSkillResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.CastSkillResponse.resultCode)
  return resultcode_;
}
 void CastSkillResponse::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CastSkillResponse.resultCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UsePropResponse::kPropConfigIDFieldNumber;
const int UsePropResponse::kSeatIdFieldNumber;
const int UsePropResponse::kResultCodeFieldNumber;
const int UsePropResponse::kDiscribeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UsePropResponse::UsePropResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.UsePropResponse)
}

void UsePropResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UsePropResponse::UsePropResponse(const UsePropResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.UsePropResponse)
}

void UsePropResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  propconfigid_ = 0;
  seatid_ = 0;
  resultcode_ = 0;
  discribe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UsePropResponse::~UsePropResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.UsePropResponse)
  SharedDtor();
}

void UsePropResponse::SharedDtor() {
  discribe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UsePropResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsePropResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsePropResponse_descriptor_;
}

const UsePropResponse& UsePropResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

UsePropResponse* UsePropResponse::default_instance_ = NULL;

UsePropResponse* UsePropResponse::New(::google::protobuf::Arena* arena) const {
  UsePropResponse* n = new UsePropResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UsePropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.UsePropResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UsePropResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UsePropResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(propconfigid_, seatid_);
  resultcode_ = 0;
  discribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UsePropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.UsePropResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 propConfigID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propconfigid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatId;
        break;
      }

      // optional int32 seatId = 2;
      case 2: {
        if (tag == 16) {
         parse_seatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 3;
      case 3: {
        if (tag == 24) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_discribe;
        break;
      }

      // optional string discribe = 4;
      case 4: {
        if (tag == 34) {
         parse_discribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discribe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->discribe().data(), this->discribe().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.UsePropResponse.discribe"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.UsePropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.UsePropResponse)
  return false;
#undef DO_
}

void UsePropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.UsePropResponse)
  // optional int32 propConfigID = 1;
  if (this->propconfigid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propconfigid(), output);
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 resultCode = 3;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resultcode(), output);
  }

  // optional string discribe = 4;
  if (this->discribe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discribe().data(), this->discribe().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.UsePropResponse.discribe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->discribe(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.UsePropResponse)
}

::google::protobuf::uint8* UsePropResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.UsePropResponse)
  // optional int32 propConfigID = 1;
  if (this->propconfigid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propconfigid(), target);
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 resultCode = 3;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resultcode(), target);
  }

  // optional string discribe = 4;
  if (this->discribe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discribe().data(), this->discribe().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.UsePropResponse.discribe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->discribe(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.UsePropResponse)
  return target;
}

int UsePropResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.UsePropResponse)
  int total_size = 0;

  // optional int32 propConfigID = 1;
  if (this->propconfigid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->propconfigid());
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // optional int32 resultCode = 3;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  // optional string discribe = 4;
  if (this->discribe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->discribe());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsePropResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.UsePropResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UsePropResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UsePropResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.UsePropResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.UsePropResponse)
    MergeFrom(*source);
  }
}

void UsePropResponse::MergeFrom(const UsePropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.UsePropResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.propconfigid() != 0) {
    set_propconfigid(from.propconfigid());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
  if (from.discribe().size() > 0) {

    discribe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discribe_);
  }
}

void UsePropResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.UsePropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsePropResponse::CopyFrom(const UsePropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.UsePropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsePropResponse::IsInitialized() const {

  return true;
}

void UsePropResponse::Swap(UsePropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UsePropResponse::InternalSwap(UsePropResponse* other) {
  std::swap(propconfigid_, other->propconfigid_);
  std::swap(seatid_, other->seatid_);
  std::swap(resultcode_, other->resultcode_);
  discribe_.Swap(&other->discribe_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UsePropResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsePropResponse_descriptor_;
  metadata.reflection = UsePropResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UsePropResponse

// optional int32 propConfigID = 1;
void UsePropResponse::clear_propconfigid() {
  propconfigid_ = 0;
}
 ::google::protobuf::int32 UsePropResponse::propconfigid() const {
  // @@protoc_insertion_point(field_get:gt_msg.UsePropResponse.propConfigID)
  return propconfigid_;
}
 void UsePropResponse::set_propconfigid(::google::protobuf::int32 value) {
  
  propconfigid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UsePropResponse.propConfigID)
}

// optional int32 seatId = 2;
void UsePropResponse::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 UsePropResponse::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.UsePropResponse.seatId)
  return seatid_;
}
 void UsePropResponse::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UsePropResponse.seatId)
}

// optional int32 resultCode = 3;
void UsePropResponse::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 UsePropResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.UsePropResponse.resultCode)
  return resultcode_;
}
 void UsePropResponse::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UsePropResponse.resultCode)
}

// optional string discribe = 4;
void UsePropResponse::clear_discribe() {
  discribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UsePropResponse::discribe() const {
  // @@protoc_insertion_point(field_get:gt_msg.UsePropResponse.discribe)
  return discribe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UsePropResponse::set_discribe(const ::std::string& value) {
  
  discribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.UsePropResponse.discribe)
}
 void UsePropResponse::set_discribe(const char* value) {
  
  discribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.UsePropResponse.discribe)
}
 void UsePropResponse::set_discribe(const char* value, size_t size) {
  
  discribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.UsePropResponse.discribe)
}
 ::std::string* UsePropResponse::mutable_discribe() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.UsePropResponse.discribe)
  return discribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UsePropResponse::release_discribe() {
  // @@protoc_insertion_point(field_release:gt_msg.UsePropResponse.discribe)
  
  return discribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UsePropResponse::set_allocated_discribe(::std::string* discribe) {
  if (discribe != NULL) {
    
  } else {
    
  }
  discribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discribe);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.UsePropResponse.discribe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NowAngerResponse::kAngerValueFieldNumber;
const int NowAngerResponse::kSeatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NowAngerResponse::NowAngerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.NowAngerResponse)
}

void NowAngerResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NowAngerResponse::NowAngerResponse(const NowAngerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.NowAngerResponse)
}

void NowAngerResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  angervalue_ = 0;
  seatid_ = 0;
}

NowAngerResponse::~NowAngerResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.NowAngerResponse)
  SharedDtor();
}

void NowAngerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NowAngerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NowAngerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NowAngerResponse_descriptor_;
}

const NowAngerResponse& NowAngerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

NowAngerResponse* NowAngerResponse::default_instance_ = NULL;

NowAngerResponse* NowAngerResponse::New(::google::protobuf::Arena* arena) const {
  NowAngerResponse* n = new NowAngerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NowAngerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.NowAngerResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NowAngerResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NowAngerResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(angervalue_, seatid_);

#undef ZR_HELPER_
#undef ZR_

}

bool NowAngerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.NowAngerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 angerValue = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angervalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatId;
        break;
      }

      // optional int32 seatId = 2;
      case 2: {
        if (tag == 16) {
         parse_seatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.NowAngerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.NowAngerResponse)
  return false;
#undef DO_
}

void NowAngerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.NowAngerResponse)
  // optional int32 angerValue = 1;
  if (this->angervalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angervalue(), output);
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.NowAngerResponse)
}

::google::protobuf::uint8* NowAngerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.NowAngerResponse)
  // optional int32 angerValue = 1;
  if (this->angervalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angervalue(), target);
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.NowAngerResponse)
  return target;
}

int NowAngerResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.NowAngerResponse)
  int total_size = 0;

  // optional int32 angerValue = 1;
  if (this->angervalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->angervalue());
  }

  // optional int32 seatId = 2;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NowAngerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.NowAngerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NowAngerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NowAngerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.NowAngerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.NowAngerResponse)
    MergeFrom(*source);
  }
}

void NowAngerResponse::MergeFrom(const NowAngerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.NowAngerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.angervalue() != 0) {
    set_angervalue(from.angervalue());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
}

void NowAngerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.NowAngerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowAngerResponse::CopyFrom(const NowAngerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.NowAngerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowAngerResponse::IsInitialized() const {

  return true;
}

void NowAngerResponse::Swap(NowAngerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NowAngerResponse::InternalSwap(NowAngerResponse* other) {
  std::swap(angervalue_, other->angervalue_);
  std::swap(seatid_, other->seatid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NowAngerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NowAngerResponse_descriptor_;
  metadata.reflection = NowAngerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NowAngerResponse

// optional int32 angerValue = 1;
void NowAngerResponse::clear_angervalue() {
  angervalue_ = 0;
}
 ::google::protobuf::int32 NowAngerResponse::angervalue() const {
  // @@protoc_insertion_point(field_get:gt_msg.NowAngerResponse.angerValue)
  return angervalue_;
}
 void NowAngerResponse::set_angervalue(::google::protobuf::int32 value) {
  
  angervalue_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.NowAngerResponse.angerValue)
}

// optional int32 seatId = 2;
void NowAngerResponse::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 NowAngerResponse::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.NowAngerResponse.seatId)
  return seatid_;
}
 void NowAngerResponse::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.NowAngerResponse.seatId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletSpeedUp::kFrameFieldNumber;
const int BulletSpeedUp::kDurationFieldNumber;
const int BulletSpeedUp::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletSpeedUp::BulletSpeedUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BulletSpeedUp)
}

void BulletSpeedUp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BulletSpeedUp::BulletSpeedUp(const BulletSpeedUp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BulletSpeedUp)
}

void BulletSpeedUp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
  duration_ = 0;
  scale_ = 0;
}

BulletSpeedUp::~BulletSpeedUp() {
  // @@protoc_insertion_point(destructor:gt_msg.BulletSpeedUp)
  SharedDtor();
}

void BulletSpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletSpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletSpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletSpeedUp_descriptor_;
}

const BulletSpeedUp& BulletSpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BulletSpeedUp* BulletSpeedUp::default_instance_ = NULL;

BulletSpeedUp* BulletSpeedUp::New(::google::protobuf::Arena* arena) const {
  BulletSpeedUp* n = new BulletSpeedUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulletSpeedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BulletSpeedUp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BulletSpeedUp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BulletSpeedUp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_, scale_);

#undef ZR_HELPER_
#undef ZR_

}

bool BulletSpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BulletSpeedUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_scale;
        break;
      }

      // optional float scale = 3;
      case 3: {
        if (tag == 29) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BulletSpeedUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BulletSpeedUp)
  return false;
#undef DO_
}

void BulletSpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BulletSpeedUp)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional float scale = 3;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BulletSpeedUp)
}

::google::protobuf::uint8* BulletSpeedUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BulletSpeedUp)
  // optional int32 frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional float scale = 3;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BulletSpeedUp)
  return target;
}

int BulletSpeedUp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BulletSpeedUp)
  int total_size = 0;

  // optional int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // optional int32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // optional float scale = 3;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletSpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BulletSpeedUp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulletSpeedUp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulletSpeedUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BulletSpeedUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BulletSpeedUp)
    MergeFrom(*source);
  }
}

void BulletSpeedUp::MergeFrom(const BulletSpeedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BulletSpeedUp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void BulletSpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BulletSpeedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletSpeedUp::CopyFrom(const BulletSpeedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BulletSpeedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletSpeedUp::IsInitialized() const {

  return true;
}

void BulletSpeedUp::Swap(BulletSpeedUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletSpeedUp::InternalSwap(BulletSpeedUp* other) {
  std::swap(frame_, other->frame_);
  std::swap(duration_, other->duration_);
  std::swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulletSpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletSpeedUp_descriptor_;
  metadata.reflection = BulletSpeedUp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulletSpeedUp

// optional int32 frame = 1;
void BulletSpeedUp::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 BulletSpeedUp::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletSpeedUp.frame)
  return frame_;
}
 void BulletSpeedUp::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletSpeedUp.frame)
}

// optional int32 duration = 2;
void BulletSpeedUp::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 BulletSpeedUp::duration() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletSpeedUp.duration)
  return duration_;
}
 void BulletSpeedUp::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletSpeedUp.duration)
}

// optional float scale = 3;
void BulletSpeedUp::clear_scale() {
  scale_ = 0;
}
 float BulletSpeedUp::scale() const {
  // @@protoc_insertion_point(field_get:gt_msg.BulletSpeedUp.scale)
  return scale_;
}
 void BulletSpeedUp::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BulletSpeedUp.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeBatteryByMyself::kBatteryIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeBatteryByMyself::ChangeBatteryByMyself()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ChangeBatteryByMyself)
}

void ChangeBatteryByMyself::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChangeBatteryByMyself::ChangeBatteryByMyself(const ChangeBatteryByMyself& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ChangeBatteryByMyself)
}

void ChangeBatteryByMyself::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  batteryindex_ = 0;
}

ChangeBatteryByMyself::~ChangeBatteryByMyself() {
  // @@protoc_insertion_point(destructor:gt_msg.ChangeBatteryByMyself)
  SharedDtor();
}

void ChangeBatteryByMyself::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeBatteryByMyself::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeBatteryByMyself::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeBatteryByMyself_descriptor_;
}

const ChangeBatteryByMyself& ChangeBatteryByMyself::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ChangeBatteryByMyself* ChangeBatteryByMyself::default_instance_ = NULL;

ChangeBatteryByMyself* ChangeBatteryByMyself::New(::google::protobuf::Arena* arena) const {
  ChangeBatteryByMyself* n = new ChangeBatteryByMyself;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeBatteryByMyself::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ChangeBatteryByMyself)
  batteryindex_ = 0;
}

bool ChangeBatteryByMyself::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ChangeBatteryByMyself)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 batteryIndex = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batteryindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ChangeBatteryByMyself)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ChangeBatteryByMyself)
  return false;
#undef DO_
}

void ChangeBatteryByMyself::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ChangeBatteryByMyself)
  // optional int32 batteryIndex = 2;
  if (this->batteryindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batteryindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ChangeBatteryByMyself)
}

::google::protobuf::uint8* ChangeBatteryByMyself::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ChangeBatteryByMyself)
  // optional int32 batteryIndex = 2;
  if (this->batteryindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batteryindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ChangeBatteryByMyself)
  return target;
}

int ChangeBatteryByMyself::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ChangeBatteryByMyself)
  int total_size = 0;

  // optional int32 batteryIndex = 2;
  if (this->batteryindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batteryindex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeBatteryByMyself::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ChangeBatteryByMyself)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeBatteryByMyself* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeBatteryByMyself>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ChangeBatteryByMyself)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ChangeBatteryByMyself)
    MergeFrom(*source);
  }
}

void ChangeBatteryByMyself::MergeFrom(const ChangeBatteryByMyself& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ChangeBatteryByMyself)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.batteryindex() != 0) {
    set_batteryindex(from.batteryindex());
  }
}

void ChangeBatteryByMyself::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ChangeBatteryByMyself)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeBatteryByMyself::CopyFrom(const ChangeBatteryByMyself& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ChangeBatteryByMyself)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeBatteryByMyself::IsInitialized() const {

  return true;
}

void ChangeBatteryByMyself::Swap(ChangeBatteryByMyself* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeBatteryByMyself::InternalSwap(ChangeBatteryByMyself* other) {
  std::swap(batteryindex_, other->batteryindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeBatteryByMyself::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeBatteryByMyself_descriptor_;
  metadata.reflection = ChangeBatteryByMyself_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeBatteryByMyself

// optional int32 batteryIndex = 2;
void ChangeBatteryByMyself::clear_batteryindex() {
  batteryindex_ = 0;
}
 ::google::protobuf::int32 ChangeBatteryByMyself::batteryindex() const {
  // @@protoc_insertion_point(field_get:gt_msg.ChangeBatteryByMyself.batteryIndex)
  return batteryindex_;
}
 void ChangeBatteryByMyself::set_batteryindex(::google::protobuf::int32 value) {
  
  batteryindex_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ChangeBatteryByMyself.batteryIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeBatteryByOhter::kSeatIdFieldNumber;
const int ChangeBatteryByOhter::kBatteryIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeBatteryByOhter::ChangeBatteryByOhter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ChangeBatteryByOhter)
}

void ChangeBatteryByOhter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChangeBatteryByOhter::ChangeBatteryByOhter(const ChangeBatteryByOhter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ChangeBatteryByOhter)
}

void ChangeBatteryByOhter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  seatid_ = 0;
  batteryindex_ = 0;
}

ChangeBatteryByOhter::~ChangeBatteryByOhter() {
  // @@protoc_insertion_point(destructor:gt_msg.ChangeBatteryByOhter)
  SharedDtor();
}

void ChangeBatteryByOhter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeBatteryByOhter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeBatteryByOhter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeBatteryByOhter_descriptor_;
}

const ChangeBatteryByOhter& ChangeBatteryByOhter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ChangeBatteryByOhter* ChangeBatteryByOhter::default_instance_ = NULL;

ChangeBatteryByOhter* ChangeBatteryByOhter::New(::google::protobuf::Arena* arena) const {
  ChangeBatteryByOhter* n = new ChangeBatteryByOhter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeBatteryByOhter::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ChangeBatteryByOhter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChangeBatteryByOhter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChangeBatteryByOhter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seatid_, batteryindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChangeBatteryByOhter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ChangeBatteryByOhter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batteryIndex;
        break;
      }

      // optional int32 batteryIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_batteryIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batteryindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ChangeBatteryByOhter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ChangeBatteryByOhter)
  return false;
#undef DO_
}

void ChangeBatteryByOhter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ChangeBatteryByOhter)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 batteryIndex = 2;
  if (this->batteryindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batteryindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ChangeBatteryByOhter)
}

::google::protobuf::uint8* ChangeBatteryByOhter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ChangeBatteryByOhter)
  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 batteryIndex = 2;
  if (this->batteryindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batteryindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ChangeBatteryByOhter)
  return target;
}

int ChangeBatteryByOhter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ChangeBatteryByOhter)
  int total_size = 0;

  // optional int32 seatId = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // optional int32 batteryIndex = 2;
  if (this->batteryindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batteryindex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeBatteryByOhter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ChangeBatteryByOhter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeBatteryByOhter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeBatteryByOhter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ChangeBatteryByOhter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ChangeBatteryByOhter)
    MergeFrom(*source);
  }
}

void ChangeBatteryByOhter::MergeFrom(const ChangeBatteryByOhter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ChangeBatteryByOhter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.batteryindex() != 0) {
    set_batteryindex(from.batteryindex());
  }
}

void ChangeBatteryByOhter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ChangeBatteryByOhter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeBatteryByOhter::CopyFrom(const ChangeBatteryByOhter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ChangeBatteryByOhter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeBatteryByOhter::IsInitialized() const {

  return true;
}

void ChangeBatteryByOhter::Swap(ChangeBatteryByOhter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeBatteryByOhter::InternalSwap(ChangeBatteryByOhter* other) {
  std::swap(seatid_, other->seatid_);
  std::swap(batteryindex_, other->batteryindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeBatteryByOhter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeBatteryByOhter_descriptor_;
  metadata.reflection = ChangeBatteryByOhter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeBatteryByOhter

// optional int32 seatId = 1;
void ChangeBatteryByOhter::clear_seatid() {
  seatid_ = 0;
}
 ::google::protobuf::int32 ChangeBatteryByOhter::seatid() const {
  // @@protoc_insertion_point(field_get:gt_msg.ChangeBatteryByOhter.seatId)
  return seatid_;
}
 void ChangeBatteryByOhter::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ChangeBatteryByOhter.seatId)
}

// optional int32 batteryIndex = 2;
void ChangeBatteryByOhter::clear_batteryindex() {
  batteryindex_ = 0;
}
 ::google::protobuf::int32 ChangeBatteryByOhter::batteryindex() const {
  // @@protoc_insertion_point(field_get:gt_msg.ChangeBatteryByOhter.batteryIndex)
  return batteryindex_;
}
 void ChangeBatteryByOhter::set_batteryindex(::google::protobuf::int32 value) {
  
  batteryindex_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ChangeBatteryByOhter.batteryIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceExitTableRequestfish3d::ForceExitTableRequestfish3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ForceExitTableRequestfish3d)
}

void ForceExitTableRequestfish3d::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ForceExitTableRequestfish3d::ForceExitTableRequestfish3d(const ForceExitTableRequestfish3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ForceExitTableRequestfish3d)
}

void ForceExitTableRequestfish3d::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ForceExitTableRequestfish3d::~ForceExitTableRequestfish3d() {
  // @@protoc_insertion_point(destructor:gt_msg.ForceExitTableRequestfish3d)
  SharedDtor();
}

void ForceExitTableRequestfish3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceExitTableRequestfish3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceExitTableRequestfish3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceExitTableRequestfish3d_descriptor_;
}

const ForceExitTableRequestfish3d& ForceExitTableRequestfish3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ForceExitTableRequestfish3d* ForceExitTableRequestfish3d::default_instance_ = NULL;

ForceExitTableRequestfish3d* ForceExitTableRequestfish3d::New(::google::protobuf::Arena* arena) const {
  ForceExitTableRequestfish3d* n = new ForceExitTableRequestfish3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceExitTableRequestfish3d::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ForceExitTableRequestfish3d)
}

bool ForceExitTableRequestfish3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ForceExitTableRequestfish3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ForceExitTableRequestfish3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ForceExitTableRequestfish3d)
  return false;
#undef DO_
}

void ForceExitTableRequestfish3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ForceExitTableRequestfish3d)
  // @@protoc_insertion_point(serialize_end:gt_msg.ForceExitTableRequestfish3d)
}

::google::protobuf::uint8* ForceExitTableRequestfish3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ForceExitTableRequestfish3d)
  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ForceExitTableRequestfish3d)
  return target;
}

int ForceExitTableRequestfish3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ForceExitTableRequestfish3d)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceExitTableRequestfish3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ForceExitTableRequestfish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForceExitTableRequestfish3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceExitTableRequestfish3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ForceExitTableRequestfish3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ForceExitTableRequestfish3d)
    MergeFrom(*source);
  }
}

void ForceExitTableRequestfish3d::MergeFrom(const ForceExitTableRequestfish3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ForceExitTableRequestfish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ForceExitTableRequestfish3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ForceExitTableRequestfish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceExitTableRequestfish3d::CopyFrom(const ForceExitTableRequestfish3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ForceExitTableRequestfish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceExitTableRequestfish3d::IsInitialized() const {

  return true;
}

void ForceExitTableRequestfish3d::Swap(ForceExitTableRequestfish3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceExitTableRequestfish3d::InternalSwap(ForceExitTableRequestfish3d* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceExitTableRequestfish3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceExitTableRequestfish3d_descriptor_;
  metadata.reflection = ForceExitTableRequestfish3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceExitTableRequestfish3d

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForceExitTableResponsefish3d::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceExitTableResponsefish3d::ForceExitTableResponsefish3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ForceExitTableResponsefish3d)
}

void ForceExitTableResponsefish3d::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ForceExitTableResponsefish3d::ForceExitTableResponsefish3d(const ForceExitTableResponsefish3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ForceExitTableResponsefish3d)
}

void ForceExitTableResponsefish3d::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  resultcode_ = 0;
}

ForceExitTableResponsefish3d::~ForceExitTableResponsefish3d() {
  // @@protoc_insertion_point(destructor:gt_msg.ForceExitTableResponsefish3d)
  SharedDtor();
}

void ForceExitTableResponsefish3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceExitTableResponsefish3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceExitTableResponsefish3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceExitTableResponsefish3d_descriptor_;
}

const ForceExitTableResponsefish3d& ForceExitTableResponsefish3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ForceExitTableResponsefish3d* ForceExitTableResponsefish3d::default_instance_ = NULL;

ForceExitTableResponsefish3d* ForceExitTableResponsefish3d::New(::google::protobuf::Arena* arena) const {
  ForceExitTableResponsefish3d* n = new ForceExitTableResponsefish3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceExitTableResponsefish3d::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ForceExitTableResponsefish3d)
  resultcode_ = 0;
}

bool ForceExitTableResponsefish3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ForceExitTableResponsefish3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ForceExitTableResponsefish3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ForceExitTableResponsefish3d)
  return false;
#undef DO_
}

void ForceExitTableResponsefish3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ForceExitTableResponsefish3d)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ForceExitTableResponsefish3d)
}

::google::protobuf::uint8* ForceExitTableResponsefish3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ForceExitTableResponsefish3d)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ForceExitTableResponsefish3d)
  return target;
}

int ForceExitTableResponsefish3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ForceExitTableResponsefish3d)
  int total_size = 0;

  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceExitTableResponsefish3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ForceExitTableResponsefish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForceExitTableResponsefish3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceExitTableResponsefish3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ForceExitTableResponsefish3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ForceExitTableResponsefish3d)
    MergeFrom(*source);
  }
}

void ForceExitTableResponsefish3d::MergeFrom(const ForceExitTableResponsefish3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ForceExitTableResponsefish3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
}

void ForceExitTableResponsefish3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ForceExitTableResponsefish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceExitTableResponsefish3d::CopyFrom(const ForceExitTableResponsefish3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ForceExitTableResponsefish3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceExitTableResponsefish3d::IsInitialized() const {

  return true;
}

void ForceExitTableResponsefish3d::Swap(ForceExitTableResponsefish3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceExitTableResponsefish3d::InternalSwap(ForceExitTableResponsefish3d* other) {
  std::swap(resultcode_, other->resultcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceExitTableResponsefish3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceExitTableResponsefish3d_descriptor_;
  metadata.reflection = ForceExitTableResponsefish3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceExitTableResponsefish3d

// optional int32 resultCode = 1;
void ForceExitTableResponsefish3d::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 ForceExitTableResponsefish3d::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.ForceExitTableResponsefish3d.resultCode)
  return resultcode_;
}
 void ForceExitTableResponsefish3d::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ForceExitTableResponsefish3d.resultCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewTaskResponse::kTaskIdFieldNumber;
const int NewTaskResponse::kFishTypeFieldNumber;
const int NewTaskResponse::kFishCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewTaskResponse::NewTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.NewTaskResponse)
}

void NewTaskResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewTaskResponse::NewTaskResponse(const NewTaskResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.NewTaskResponse)
}

void NewTaskResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  taskid_ = 0;
  fishtype_ = 0;
  fishcount_ = 0;
}

NewTaskResponse::~NewTaskResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.NewTaskResponse)
  SharedDtor();
}

void NewTaskResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewTaskResponse_descriptor_;
}

const NewTaskResponse& NewTaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

NewTaskResponse* NewTaskResponse::default_instance_ = NULL;

NewTaskResponse* NewTaskResponse::New(::google::protobuf::Arena* arena) const {
  NewTaskResponse* n = new NewTaskResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.NewTaskResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NewTaskResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NewTaskResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(taskid_, fishcount_);

#undef ZR_HELPER_
#undef ZR_

}

bool NewTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.NewTaskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishType;
        break;
      }

      // optional int32 fishType = 2;
      case 2: {
        if (tag == 16) {
         parse_fishType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishtype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fishCount;
        break;
      }

      // optional int32 fishCount = 3;
      case 3: {
        if (tag == 24) {
         parse_fishCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.NewTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.NewTaskResponse)
  return false;
#undef DO_
}

void NewTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.NewTaskResponse)
  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishtype(), output);
  }

  // optional int32 fishCount = 3;
  if (this->fishcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fishcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.NewTaskResponse)
}

::google::protobuf::uint8* NewTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.NewTaskResponse)
  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishtype(), target);
  }

  // optional int32 fishCount = 3;
  if (this->fishcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fishcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.NewTaskResponse)
  return target;
}

int NewTaskResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.NewTaskResponse)
  int total_size = 0;

  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishtype());
  }

  // optional int32 fishCount = 3;
  if (this->fishcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.NewTaskResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewTaskResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.NewTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.NewTaskResponse)
    MergeFrom(*source);
  }
}

void NewTaskResponse::MergeFrom(const NewTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.NewTaskResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.fishtype() != 0) {
    set_fishtype(from.fishtype());
  }
  if (from.fishcount() != 0) {
    set_fishcount(from.fishcount());
  }
}

void NewTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.NewTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTaskResponse::CopyFrom(const NewTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.NewTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTaskResponse::IsInitialized() const {

  return true;
}

void NewTaskResponse::Swap(NewTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewTaskResponse::InternalSwap(NewTaskResponse* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(fishtype_, other->fishtype_);
  std::swap(fishcount_, other->fishcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewTaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewTaskResponse_descriptor_;
  metadata.reflection = NewTaskResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewTaskResponse

// optional int32 taskId = 1;
void NewTaskResponse::clear_taskid() {
  taskid_ = 0;
}
 ::google::protobuf::int32 NewTaskResponse::taskid() const {
  // @@protoc_insertion_point(field_get:gt_msg.NewTaskResponse.taskId)
  return taskid_;
}
 void NewTaskResponse::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.NewTaskResponse.taskId)
}

// optional int32 fishType = 2;
void NewTaskResponse::clear_fishtype() {
  fishtype_ = 0;
}
 ::google::protobuf::int32 NewTaskResponse::fishtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.NewTaskResponse.fishType)
  return fishtype_;
}
 void NewTaskResponse::set_fishtype(::google::protobuf::int32 value) {
  
  fishtype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.NewTaskResponse.fishType)
}

// optional int32 fishCount = 3;
void NewTaskResponse::clear_fishcount() {
  fishcount_ = 0;
}
 ::google::protobuf::int32 NewTaskResponse::fishcount() const {
  // @@protoc_insertion_point(field_get:gt_msg.NewTaskResponse.fishCount)
  return fishcount_;
}
 void NewTaskResponse::set_fishcount(::google::protobuf::int32 value) {
  
  fishcount_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.NewTaskResponse.fishCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskProgressResponse::kTaskIdFieldNumber;
const int TaskProgressResponse::kFishCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskProgressResponse::TaskProgressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.TaskProgressResponse)
}

void TaskProgressResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskProgressResponse::TaskProgressResponse(const TaskProgressResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.TaskProgressResponse)
}

void TaskProgressResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  taskid_ = 0;
  fishcount_ = 0;
}

TaskProgressResponse::~TaskProgressResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.TaskProgressResponse)
  SharedDtor();
}

void TaskProgressResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskProgressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskProgressResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskProgressResponse_descriptor_;
}

const TaskProgressResponse& TaskProgressResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

TaskProgressResponse* TaskProgressResponse::default_instance_ = NULL;

TaskProgressResponse* TaskProgressResponse::New(::google::protobuf::Arena* arena) const {
  TaskProgressResponse* n = new TaskProgressResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.TaskProgressResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskProgressResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskProgressResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(taskid_, fishcount_);

#undef ZR_HELPER_
#undef ZR_

}

bool TaskProgressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.TaskProgressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishCount;
        break;
      }

      // optional int32 fishCount = 2;
      case 2: {
        if (tag == 16) {
         parse_fishCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.TaskProgressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.TaskProgressResponse)
  return false;
#undef DO_
}

void TaskProgressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.TaskProgressResponse)
  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 fishCount = 2;
  if (this->fishcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.TaskProgressResponse)
}

::google::protobuf::uint8* TaskProgressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.TaskProgressResponse)
  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 fishCount = 2;
  if (this->fishcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.TaskProgressResponse)
  return target;
}

int TaskProgressResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.TaskProgressResponse)
  int total_size = 0;

  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // optional int32 fishCount = 2;
  if (this->fishcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskProgressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.TaskProgressResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskProgressResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskProgressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.TaskProgressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.TaskProgressResponse)
    MergeFrom(*source);
  }
}

void TaskProgressResponse::MergeFrom(const TaskProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.TaskProgressResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.fishcount() != 0) {
    set_fishcount(from.fishcount());
  }
}

void TaskProgressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.TaskProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskProgressResponse::CopyFrom(const TaskProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.TaskProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskProgressResponse::IsInitialized() const {

  return true;
}

void TaskProgressResponse::Swap(TaskProgressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskProgressResponse::InternalSwap(TaskProgressResponse* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(fishcount_, other->fishcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskProgressResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskProgressResponse_descriptor_;
  metadata.reflection = TaskProgressResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskProgressResponse

// optional int32 taskId = 1;
void TaskProgressResponse::clear_taskid() {
  taskid_ = 0;
}
 ::google::protobuf::int32 TaskProgressResponse::taskid() const {
  // @@protoc_insertion_point(field_get:gt_msg.TaskProgressResponse.taskId)
  return taskid_;
}
 void TaskProgressResponse::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TaskProgressResponse.taskId)
}

// optional int32 fishCount = 2;
void TaskProgressResponse::clear_fishcount() {
  fishcount_ = 0;
}
 ::google::protobuf::int32 TaskProgressResponse::fishcount() const {
  // @@protoc_insertion_point(field_get:gt_msg.TaskProgressResponse.fishCount)
  return fishcount_;
}
 void TaskProgressResponse::set_fishcount(::google::protobuf::int32 value) {
  
  fishcount_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TaskProgressResponse.fishCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskFinishResponse::kTaskIdFieldNumber;
const int TaskFinishResponse::kGetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskFinishResponse::TaskFinishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.TaskFinishResponse)
}

void TaskFinishResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskFinishResponse::TaskFinishResponse(const TaskFinishResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.TaskFinishResponse)
}

void TaskFinishResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  taskid_ = 0;
  getscore_ = GOOGLE_LONGLONG(0);
}

TaskFinishResponse::~TaskFinishResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.TaskFinishResponse)
  SharedDtor();
}

void TaskFinishResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskFinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskFinishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskFinishResponse_descriptor_;
}

const TaskFinishResponse& TaskFinishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

TaskFinishResponse* TaskFinishResponse::default_instance_ = NULL;

TaskFinishResponse* TaskFinishResponse::New(::google::protobuf::Arena* arena) const {
  TaskFinishResponse* n = new TaskFinishResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskFinishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.TaskFinishResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskFinishResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskFinishResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(getscore_, taskid_);

#undef ZR_HELPER_
#undef ZR_

}

bool TaskFinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.TaskFinishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_getScore;
        break;
      }

      // optional int64 getScore = 2;
      case 2: {
        if (tag == 16) {
         parse_getScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.TaskFinishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.TaskFinishResponse)
  return false;
#undef DO_
}

void TaskFinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.TaskFinishResponse)
  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int64 getScore = 2;
  if (this->getscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->getscore(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.TaskFinishResponse)
}

::google::protobuf::uint8* TaskFinishResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.TaskFinishResponse)
  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int64 getScore = 2;
  if (this->getscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->getscore(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.TaskFinishResponse)
  return target;
}

int TaskFinishResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.TaskFinishResponse)
  int total_size = 0;

  // optional int32 taskId = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // optional int64 getScore = 2;
  if (this->getscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->getscore());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskFinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.TaskFinishResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskFinishResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskFinishResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.TaskFinishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.TaskFinishResponse)
    MergeFrom(*source);
  }
}

void TaskFinishResponse::MergeFrom(const TaskFinishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.TaskFinishResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.getscore() != 0) {
    set_getscore(from.getscore());
  }
}

void TaskFinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.TaskFinishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskFinishResponse::CopyFrom(const TaskFinishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.TaskFinishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskFinishResponse::IsInitialized() const {

  return true;
}

void TaskFinishResponse::Swap(TaskFinishResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskFinishResponse::InternalSwap(TaskFinishResponse* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(getscore_, other->getscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskFinishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskFinishResponse_descriptor_;
  metadata.reflection = TaskFinishResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskFinishResponse

// optional int32 taskId = 1;
void TaskFinishResponse::clear_taskid() {
  taskid_ = 0;
}
 ::google::protobuf::int32 TaskFinishResponse::taskid() const {
  // @@protoc_insertion_point(field_get:gt_msg.TaskFinishResponse.taskId)
  return taskid_;
}
 void TaskFinishResponse::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TaskFinishResponse.taskId)
}

// optional int64 getScore = 2;
void TaskFinishResponse::clear_getscore() {
  getscore_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TaskFinishResponse::getscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.TaskFinishResponse.getScore)
  return getscore_;
}
 void TaskFinishResponse::set_getscore(::google::protobuf::int64 value) {
  
  getscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TaskFinishResponse.getScore)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeRedBagRequest::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeRedBagRequest::TakeRedBagRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.TakeRedBagRequest)
}

void TakeRedBagRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TakeRedBagRequest::TakeRedBagRequest(const TakeRedBagRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.TakeRedBagRequest)
}

void TakeRedBagRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  score_ = 0;
}

TakeRedBagRequest::~TakeRedBagRequest() {
  // @@protoc_insertion_point(destructor:gt_msg.TakeRedBagRequest)
  SharedDtor();
}

void TakeRedBagRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeRedBagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeRedBagRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeRedBagRequest_descriptor_;
}

const TakeRedBagRequest& TakeRedBagRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

TakeRedBagRequest* TakeRedBagRequest::default_instance_ = NULL;

TakeRedBagRequest* TakeRedBagRequest::New(::google::protobuf::Arena* arena) const {
  TakeRedBagRequest* n = new TakeRedBagRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeRedBagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.TakeRedBagRequest)
  score_ = 0;
}

bool TakeRedBagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.TakeRedBagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.TakeRedBagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.TakeRedBagRequest)
  return false;
#undef DO_
}

void TakeRedBagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.TakeRedBagRequest)
  // optional int32 Score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.TakeRedBagRequest)
}

::google::protobuf::uint8* TakeRedBagRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.TakeRedBagRequest)
  // optional int32 Score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.TakeRedBagRequest)
  return target;
}

int TakeRedBagRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.TakeRedBagRequest)
  int total_size = 0;

  // optional int32 Score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeRedBagRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.TakeRedBagRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TakeRedBagRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeRedBagRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.TakeRedBagRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.TakeRedBagRequest)
    MergeFrom(*source);
  }
}

void TakeRedBagRequest::MergeFrom(const TakeRedBagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.TakeRedBagRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void TakeRedBagRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.TakeRedBagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeRedBagRequest::CopyFrom(const TakeRedBagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.TakeRedBagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeRedBagRequest::IsInitialized() const {

  return true;
}

void TakeRedBagRequest::Swap(TakeRedBagRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeRedBagRequest::InternalSwap(TakeRedBagRequest* other) {
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeRedBagRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeRedBagRequest_descriptor_;
  metadata.reflection = TakeRedBagRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeRedBagRequest

// optional int32 Score = 1;
void TakeRedBagRequest::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 TakeRedBagRequest::score() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeRedBagRequest.Score)
  return score_;
}
 void TakeRedBagRequest::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TakeRedBagRequest.Score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeRedBagResponse::kResultCodeFieldNumber;
const int TakeRedBagResponse::kResultMessageFieldNumber;
const int TakeRedBagResponse::kRedBagScoreFieldNumber;
const int TakeRedBagResponse::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeRedBagResponse::TakeRedBagResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.TakeRedBagResponse)
}

void TakeRedBagResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TakeRedBagResponse::TakeRedBagResponse(const TakeRedBagResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.TakeRedBagResponse)
}

void TakeRedBagResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultcode_ = 0;
  resultmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redbagscore_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TakeRedBagResponse::~TakeRedBagResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.TakeRedBagResponse)
  SharedDtor();
}

void TakeRedBagResponse::SharedDtor() {
  resultmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TakeRedBagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeRedBagResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeRedBagResponse_descriptor_;
}

const TakeRedBagResponse& TakeRedBagResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

TakeRedBagResponse* TakeRedBagResponse::default_instance_ = NULL;

TakeRedBagResponse* TakeRedBagResponse::New(::google::protobuf::Arena* arena) const {
  TakeRedBagResponse* n = new TakeRedBagResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeRedBagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.TakeRedBagResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TakeRedBagResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TakeRedBagResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resultcode_, redbagscore_);
  resultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TakeRedBagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.TakeRedBagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultMessage;
        break;
      }

      // optional string resultMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_resultMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultmessage().data(), this->resultmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.TakeRedBagResponse.resultMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RedBagScore;
        break;
      }

      // optional int32 RedBagScore = 3;
      case 3: {
        if (tag == 24) {
         parse_RedBagScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redbagscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Ticket;
        break;
      }

      // optional string Ticket = 4;
      case 4: {
        if (tag == 34) {
         parse_Ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.TakeRedBagResponse.Ticket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.TakeRedBagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.TakeRedBagResponse)
  return false;
#undef DO_
}

void TakeRedBagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.TakeRedBagResponse)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), this->resultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.TakeRedBagResponse.resultMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmessage(), output);
  }

  // optional int32 RedBagScore = 3;
  if (this->redbagscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->redbagscore(), output);
  }

  // optional string Ticket = 4;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.TakeRedBagResponse.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ticket(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.TakeRedBagResponse)
}

::google::protobuf::uint8* TakeRedBagResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.TakeRedBagResponse)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), this->resultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.TakeRedBagResponse.resultMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmessage(), target);
  }

  // optional int32 RedBagScore = 3;
  if (this->redbagscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->redbagscore(), target);
  }

  // optional string Ticket = 4;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.TakeRedBagResponse.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ticket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.TakeRedBagResponse)
  return target;
}

int TakeRedBagResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.TakeRedBagResponse)
  int total_size = 0;

  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmessage());
  }

  // optional int32 RedBagScore = 3;
  if (this->redbagscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redbagscore());
  }

  // optional string Ticket = 4;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeRedBagResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.TakeRedBagResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TakeRedBagResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeRedBagResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.TakeRedBagResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.TakeRedBagResponse)
    MergeFrom(*source);
  }
}

void TakeRedBagResponse::MergeFrom(const TakeRedBagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.TakeRedBagResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
  if (from.resultmessage().size() > 0) {

    resultmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmessage_);
  }
  if (from.redbagscore() != 0) {
    set_redbagscore(from.redbagscore());
  }
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
}

void TakeRedBagResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.TakeRedBagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeRedBagResponse::CopyFrom(const TakeRedBagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.TakeRedBagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeRedBagResponse::IsInitialized() const {

  return true;
}

void TakeRedBagResponse::Swap(TakeRedBagResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeRedBagResponse::InternalSwap(TakeRedBagResponse* other) {
  std::swap(resultcode_, other->resultcode_);
  resultmessage_.Swap(&other->resultmessage_);
  std::swap(redbagscore_, other->redbagscore_);
  ticket_.Swap(&other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeRedBagResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeRedBagResponse_descriptor_;
  metadata.reflection = TakeRedBagResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeRedBagResponse

// optional int32 resultCode = 1;
void TakeRedBagResponse::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 TakeRedBagResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeRedBagResponse.resultCode)
  return resultcode_;
}
 void TakeRedBagResponse::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TakeRedBagResponse.resultCode)
}

// optional string resultMessage = 2;
void TakeRedBagResponse::clear_resultmessage() {
  resultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TakeRedBagResponse::resultmessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeRedBagResponse.resultMessage)
  return resultmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TakeRedBagResponse::set_resultmessage(const ::std::string& value) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.TakeRedBagResponse.resultMessage)
}
 void TakeRedBagResponse::set_resultmessage(const char* value) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.TakeRedBagResponse.resultMessage)
}
 void TakeRedBagResponse::set_resultmessage(const char* value, size_t size) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.TakeRedBagResponse.resultMessage)
}
 ::std::string* TakeRedBagResponse::mutable_resultmessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.TakeRedBagResponse.resultMessage)
  return resultmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TakeRedBagResponse::release_resultmessage() {
  // @@protoc_insertion_point(field_release:gt_msg.TakeRedBagResponse.resultMessage)
  
  return resultmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TakeRedBagResponse::set_allocated_resultmessage(::std::string* resultmessage) {
  if (resultmessage != NULL) {
    
  } else {
    
  }
  resultmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.TakeRedBagResponse.resultMessage)
}

// optional int32 RedBagScore = 3;
void TakeRedBagResponse::clear_redbagscore() {
  redbagscore_ = 0;
}
 ::google::protobuf::int32 TakeRedBagResponse::redbagscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeRedBagResponse.RedBagScore)
  return redbagscore_;
}
 void TakeRedBagResponse::set_redbagscore(::google::protobuf::int32 value) {
  
  redbagscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TakeRedBagResponse.RedBagScore)
}

// optional string Ticket = 4;
void TakeRedBagResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TakeRedBagResponse::ticket() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeRedBagResponse.Ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TakeRedBagResponse::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.TakeRedBagResponse.Ticket)
}
 void TakeRedBagResponse::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.TakeRedBagResponse.Ticket)
}
 void TakeRedBagResponse::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.TakeRedBagResponse.Ticket)
}
 ::std::string* TakeRedBagResponse::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.TakeRedBagResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TakeRedBagResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:gt_msg.TakeRedBagResponse.Ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TakeRedBagResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.TakeRedBagResponse.Ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRedBag::kRemainRedBagScoreFieldNumber;
const int UpdateRedBag::kPreviousRedBagScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRedBag::UpdateRedBag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.UpdateRedBag)
}

void UpdateRedBag::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateRedBag::UpdateRedBag(const UpdateRedBag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.UpdateRedBag)
}

void UpdateRedBag::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  remainredbagscore_ = 0;
  previousredbagscore_ = 0;
}

UpdateRedBag::~UpdateRedBag() {
  // @@protoc_insertion_point(destructor:gt_msg.UpdateRedBag)
  SharedDtor();
}

void UpdateRedBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRedBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRedBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRedBag_descriptor_;
}

const UpdateRedBag& UpdateRedBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

UpdateRedBag* UpdateRedBag::default_instance_ = NULL;

UpdateRedBag* UpdateRedBag::New(::google::protobuf::Arena* arena) const {
  UpdateRedBag* n = new UpdateRedBag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRedBag::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.UpdateRedBag)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdateRedBag, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateRedBag*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(remainredbagscore_, previousredbagscore_);

#undef ZR_HELPER_
#undef ZR_

}

bool UpdateRedBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.UpdateRedBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RemainRedBagScore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainredbagscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PreviousRedBagScore;
        break;
      }

      // optional int32 PreviousRedBagScore = 2;
      case 2: {
        if (tag == 16) {
         parse_PreviousRedBagScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previousredbagscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.UpdateRedBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.UpdateRedBag)
  return false;
#undef DO_
}

void UpdateRedBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.UpdateRedBag)
  // optional int32 RemainRedBagScore = 1;
  if (this->remainredbagscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remainredbagscore(), output);
  }

  // optional int32 PreviousRedBagScore = 2;
  if (this->previousredbagscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->previousredbagscore(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.UpdateRedBag)
}

::google::protobuf::uint8* UpdateRedBag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.UpdateRedBag)
  // optional int32 RemainRedBagScore = 1;
  if (this->remainredbagscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remainredbagscore(), target);
  }

  // optional int32 PreviousRedBagScore = 2;
  if (this->previousredbagscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->previousredbagscore(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.UpdateRedBag)
  return target;
}

int UpdateRedBag::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.UpdateRedBag)
  int total_size = 0;

  // optional int32 RemainRedBagScore = 1;
  if (this->remainredbagscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remainredbagscore());
  }

  // optional int32 PreviousRedBagScore = 2;
  if (this->previousredbagscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->previousredbagscore());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRedBag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.UpdateRedBag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateRedBag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRedBag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.UpdateRedBag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.UpdateRedBag)
    MergeFrom(*source);
  }
}

void UpdateRedBag::MergeFrom(const UpdateRedBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.UpdateRedBag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.remainredbagscore() != 0) {
    set_remainredbagscore(from.remainredbagscore());
  }
  if (from.previousredbagscore() != 0) {
    set_previousredbagscore(from.previousredbagscore());
  }
}

void UpdateRedBag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.UpdateRedBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRedBag::CopyFrom(const UpdateRedBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.UpdateRedBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRedBag::IsInitialized() const {

  return true;
}

void UpdateRedBag::Swap(UpdateRedBag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRedBag::InternalSwap(UpdateRedBag* other) {
  std::swap(remainredbagscore_, other->remainredbagscore_);
  std::swap(previousredbagscore_, other->previousredbagscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRedBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRedBag_descriptor_;
  metadata.reflection = UpdateRedBag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRedBag

// optional int32 RemainRedBagScore = 1;
void UpdateRedBag::clear_remainredbagscore() {
  remainredbagscore_ = 0;
}
 ::google::protobuf::int32 UpdateRedBag::remainredbagscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.UpdateRedBag.RemainRedBagScore)
  return remainredbagscore_;
}
 void UpdateRedBag::set_remainredbagscore(::google::protobuf::int32 value) {
  
  remainredbagscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UpdateRedBag.RemainRedBagScore)
}

// optional int32 PreviousRedBagScore = 2;
void UpdateRedBag::clear_previousredbagscore() {
  previousredbagscore_ = 0;
}
 ::google::protobuf::int32 UpdateRedBag::previousredbagscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.UpdateRedBag.PreviousRedBagScore)
  return previousredbagscore_;
}
 void UpdateRedBag::set_previousredbagscore(::google::protobuf::int32 value) {
  
  previousredbagscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UpdateRedBag.PreviousRedBagScore)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTakeScoreRequest::kScoreFieldNumber;
const int UserTakeScoreRequest::kPassWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTakeScoreRequest::UserTakeScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.UserTakeScoreRequest)
}

void UserTakeScoreRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserTakeScoreRequest::UserTakeScoreRequest(const UserTakeScoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.UserTakeScoreRequest)
}

void UserTakeScoreRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserTakeScoreRequest::~UserTakeScoreRequest() {
  // @@protoc_insertion_point(destructor:gt_msg.UserTakeScoreRequest)
  SharedDtor();
}

void UserTakeScoreRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserTakeScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTakeScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTakeScoreRequest_descriptor_;
}

const UserTakeScoreRequest& UserTakeScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

UserTakeScoreRequest* UserTakeScoreRequest::default_instance_ = NULL;

UserTakeScoreRequest* UserTakeScoreRequest::New(::google::protobuf::Arena* arena) const {
  UserTakeScoreRequest* n = new UserTakeScoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserTakeScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.UserTakeScoreRequest)
  score_ = GOOGLE_LONGLONG(0);
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserTakeScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.UserTakeScoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PassWord;
        break;
      }

      // optional string PassWord = 2;
      case 2: {
        if (tag == 18) {
         parse_PassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.UserTakeScoreRequest.PassWord"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.UserTakeScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.UserTakeScoreRequest)
  return false;
#undef DO_
}

void UserTakeScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.UserTakeScoreRequest)
  // optional int64 Score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // optional string PassWord = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.UserTakeScoreRequest.PassWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.UserTakeScoreRequest)
}

::google::protobuf::uint8* UserTakeScoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.UserTakeScoreRequest)
  // optional int64 Score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // optional string PassWord = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.UserTakeScoreRequest.PassWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.UserTakeScoreRequest)
  return target;
}

int UserTakeScoreRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.UserTakeScoreRequest)
  int total_size = 0;

  // optional int64 Score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // optional string PassWord = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTakeScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.UserTakeScoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserTakeScoreRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTakeScoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.UserTakeScoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.UserTakeScoreRequest)
    MergeFrom(*source);
  }
}

void UserTakeScoreRequest::MergeFrom(const UserTakeScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.UserTakeScoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void UserTakeScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.UserTakeScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTakeScoreRequest::CopyFrom(const UserTakeScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.UserTakeScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTakeScoreRequest::IsInitialized() const {

  return true;
}

void UserTakeScoreRequest::Swap(UserTakeScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTakeScoreRequest::InternalSwap(UserTakeScoreRequest* other) {
  std::swap(score_, other->score_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserTakeScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTakeScoreRequest_descriptor_;
  metadata.reflection = UserTakeScoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserTakeScoreRequest

// optional int64 Score = 1;
void UserTakeScoreRequest::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UserTakeScoreRequest::score() const {
  // @@protoc_insertion_point(field_get:gt_msg.UserTakeScoreRequest.Score)
  return score_;
}
 void UserTakeScoreRequest::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UserTakeScoreRequest.Score)
}

// optional string PassWord = 2;
void UserTakeScoreRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserTakeScoreRequest::password() const {
  // @@protoc_insertion_point(field_get:gt_msg.UserTakeScoreRequest.PassWord)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserTakeScoreRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.UserTakeScoreRequest.PassWord)
}
 void UserTakeScoreRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.UserTakeScoreRequest.PassWord)
}
 void UserTakeScoreRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.UserTakeScoreRequest.PassWord)
}
 ::std::string* UserTakeScoreRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.UserTakeScoreRequest.PassWord)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserTakeScoreRequest::release_password() {
  // @@protoc_insertion_point(field_release:gt_msg.UserTakeScoreRequest.PassWord)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserTakeScoreRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.UserTakeScoreRequest.PassWord)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTakeScoreRespone::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTakeScoreRespone::UserTakeScoreRespone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.UserTakeScoreRespone)
}

void UserTakeScoreRespone::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserTakeScoreRespone::UserTakeScoreRespone(const UserTakeScoreRespone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.UserTakeScoreRespone)
}

void UserTakeScoreRespone::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  resultcode_ = 0;
}

UserTakeScoreRespone::~UserTakeScoreRespone() {
  // @@protoc_insertion_point(destructor:gt_msg.UserTakeScoreRespone)
  SharedDtor();
}

void UserTakeScoreRespone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserTakeScoreRespone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTakeScoreRespone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTakeScoreRespone_descriptor_;
}

const UserTakeScoreRespone& UserTakeScoreRespone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

UserTakeScoreRespone* UserTakeScoreRespone::default_instance_ = NULL;

UserTakeScoreRespone* UserTakeScoreRespone::New(::google::protobuf::Arena* arena) const {
  UserTakeScoreRespone* n = new UserTakeScoreRespone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserTakeScoreRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.UserTakeScoreRespone)
  resultcode_ = 0;
}

bool UserTakeScoreRespone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.UserTakeScoreRespone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.UserTakeScoreRespone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.UserTakeScoreRespone)
  return false;
#undef DO_
}

void UserTakeScoreRespone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.UserTakeScoreRespone)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.UserTakeScoreRespone)
}

::google::protobuf::uint8* UserTakeScoreRespone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.UserTakeScoreRespone)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.UserTakeScoreRespone)
  return target;
}

int UserTakeScoreRespone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.UserTakeScoreRespone)
  int total_size = 0;

  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTakeScoreRespone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.UserTakeScoreRespone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserTakeScoreRespone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTakeScoreRespone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.UserTakeScoreRespone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.UserTakeScoreRespone)
    MergeFrom(*source);
  }
}

void UserTakeScoreRespone::MergeFrom(const UserTakeScoreRespone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.UserTakeScoreRespone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
}

void UserTakeScoreRespone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.UserTakeScoreRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTakeScoreRespone::CopyFrom(const UserTakeScoreRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.UserTakeScoreRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTakeScoreRespone::IsInitialized() const {

  return true;
}

void UserTakeScoreRespone::Swap(UserTakeScoreRespone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTakeScoreRespone::InternalSwap(UserTakeScoreRespone* other) {
  std::swap(resultcode_, other->resultcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserTakeScoreRespone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTakeScoreRespone_descriptor_;
  metadata.reflection = UserTakeScoreRespone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserTakeScoreRespone

// optional int32 resultCode = 1;
void UserTakeScoreRespone::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 UserTakeScoreRespone::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.UserTakeScoreRespone.resultCode)
  return resultcode_;
}
 void UserTakeScoreRespone::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.UserTakeScoreRespone.resultCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBountyRequest::TakeBountyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.TakeBountyRequest)
}

void TakeBountyRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TakeBountyRequest::TakeBountyRequest(const TakeBountyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.TakeBountyRequest)
}

void TakeBountyRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TakeBountyRequest::~TakeBountyRequest() {
  // @@protoc_insertion_point(destructor:gt_msg.TakeBountyRequest)
  SharedDtor();
}

void TakeBountyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeBountyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBountyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeBountyRequest_descriptor_;
}

const TakeBountyRequest& TakeBountyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

TakeBountyRequest* TakeBountyRequest::default_instance_ = NULL;

TakeBountyRequest* TakeBountyRequest::New(::google::protobuf::Arena* arena) const {
  TakeBountyRequest* n = new TakeBountyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBountyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.TakeBountyRequest)
}

bool TakeBountyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.TakeBountyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.TakeBountyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.TakeBountyRequest)
  return false;
#undef DO_
}

void TakeBountyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.TakeBountyRequest)
  // @@protoc_insertion_point(serialize_end:gt_msg.TakeBountyRequest)
}

::google::protobuf::uint8* TakeBountyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.TakeBountyRequest)
  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.TakeBountyRequest)
  return target;
}

int TakeBountyRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.TakeBountyRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBountyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.TakeBountyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TakeBountyRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBountyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.TakeBountyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.TakeBountyRequest)
    MergeFrom(*source);
  }
}

void TakeBountyRequest::MergeFrom(const TakeBountyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.TakeBountyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TakeBountyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.TakeBountyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBountyRequest::CopyFrom(const TakeBountyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.TakeBountyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBountyRequest::IsInitialized() const {

  return true;
}

void TakeBountyRequest::Swap(TakeBountyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBountyRequest::InternalSwap(TakeBountyRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBountyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeBountyRequest_descriptor_;
  metadata.reflection = TakeBountyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBountyRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBountyResponse::kResultCodeFieldNumber;
const int TakeBountyResponse::kResultMessageFieldNumber;
const int TakeBountyResponse::kScoreFieldNumber;
const int TakeBountyResponse::kRemainTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBountyResponse::TakeBountyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.TakeBountyResponse)
}

void TakeBountyResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TakeBountyResponse::TakeBountyResponse(const TakeBountyResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.TakeBountyResponse)
}

void TakeBountyResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultcode_ = 0;
  resultmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = GOOGLE_LONGLONG(0);
  remaintime_ = 0;
}

TakeBountyResponse::~TakeBountyResponse() {
  // @@protoc_insertion_point(destructor:gt_msg.TakeBountyResponse)
  SharedDtor();
}

void TakeBountyResponse::SharedDtor() {
  resultmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TakeBountyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBountyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeBountyResponse_descriptor_;
}

const TakeBountyResponse& TakeBountyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

TakeBountyResponse* TakeBountyResponse::default_instance_ = NULL;

TakeBountyResponse* TakeBountyResponse::New(::google::protobuf::Arena* arena) const {
  TakeBountyResponse* n = new TakeBountyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBountyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.TakeBountyResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TakeBountyResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TakeBountyResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resultcode_, score_);
  resultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TakeBountyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.TakeBountyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultMessage;
        break;
      }

      // optional string resultMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_resultMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultmessage().data(), this->resultmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.TakeBountyResponse.resultMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional int64 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RemainTime;
        break;
      }

      // optional int32 RemainTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.TakeBountyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.TakeBountyResponse)
  return false;
#undef DO_
}

void TakeBountyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.TakeBountyResponse)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), this->resultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.TakeBountyResponse.resultMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmessage(), output);
  }

  // optional int64 Score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // optional int32 RemainTime = 4;
  if (this->remaintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaintime(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.TakeBountyResponse)
}

::google::protobuf::uint8* TakeBountyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.TakeBountyResponse)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), this->resultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.TakeBountyResponse.resultMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmessage(), target);
  }

  // optional int64 Score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // optional int32 RemainTime = 4;
  if (this->remaintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remaintime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.TakeBountyResponse)
  return target;
}

int TakeBountyResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.TakeBountyResponse)
  int total_size = 0;

  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmessage());
  }

  // optional int64 Score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // optional int32 RemainTime = 4;
  if (this->remaintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaintime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBountyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.TakeBountyResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TakeBountyResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBountyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.TakeBountyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.TakeBountyResponse)
    MergeFrom(*source);
  }
}

void TakeBountyResponse::MergeFrom(const TakeBountyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.TakeBountyResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
  if (from.resultmessage().size() > 0) {

    resultmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmessage_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.remaintime() != 0) {
    set_remaintime(from.remaintime());
  }
}

void TakeBountyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.TakeBountyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBountyResponse::CopyFrom(const TakeBountyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.TakeBountyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBountyResponse::IsInitialized() const {

  return true;
}

void TakeBountyResponse::Swap(TakeBountyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBountyResponse::InternalSwap(TakeBountyResponse* other) {
  std::swap(resultcode_, other->resultcode_);
  resultmessage_.Swap(&other->resultmessage_);
  std::swap(score_, other->score_);
  std::swap(remaintime_, other->remaintime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBountyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeBountyResponse_descriptor_;
  metadata.reflection = TakeBountyResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBountyResponse

// optional int32 resultCode = 1;
void TakeBountyResponse::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 TakeBountyResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeBountyResponse.resultCode)
  return resultcode_;
}
 void TakeBountyResponse::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TakeBountyResponse.resultCode)
}

// optional string resultMessage = 2;
void TakeBountyResponse::clear_resultmessage() {
  resultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TakeBountyResponse::resultmessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeBountyResponse.resultMessage)
  return resultmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TakeBountyResponse::set_resultmessage(const ::std::string& value) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.TakeBountyResponse.resultMessage)
}
 void TakeBountyResponse::set_resultmessage(const char* value) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.TakeBountyResponse.resultMessage)
}
 void TakeBountyResponse::set_resultmessage(const char* value, size_t size) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.TakeBountyResponse.resultMessage)
}
 ::std::string* TakeBountyResponse::mutable_resultmessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.TakeBountyResponse.resultMessage)
  return resultmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TakeBountyResponse::release_resultmessage() {
  // @@protoc_insertion_point(field_release:gt_msg.TakeBountyResponse.resultMessage)
  
  return resultmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TakeBountyResponse::set_allocated_resultmessage(::std::string* resultmessage) {
  if (resultmessage != NULL) {
    
  } else {
    
  }
  resultmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.TakeBountyResponse.resultMessage)
}

// optional int64 Score = 3;
void TakeBountyResponse::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TakeBountyResponse::score() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeBountyResponse.Score)
  return score_;
}
 void TakeBountyResponse::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TakeBountyResponse.Score)
}

// optional int32 RemainTime = 4;
void TakeBountyResponse::clear_remaintime() {
  remaintime_ = 0;
}
 ::google::protobuf::int32 TakeBountyResponse::remaintime() const {
  // @@protoc_insertion_point(field_get:gt_msg.TakeBountyResponse.RemainTime)
  return remaintime_;
}
 void TakeBountyResponse::set_remaintime(::google::protobuf::int32 value) {
  
  remaintime_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.TakeBountyResponse.RemainTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetBounty::kBountyIndexFieldNumber;
const int SetBounty::kBountyTimeLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetBounty::SetBounty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.SetBounty)
}

void SetBounty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetBounty::SetBounty(const SetBounty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.SetBounty)
}

void SetBounty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bountyindex_ = 0;
  bountytimeleft_ = 0;
}

SetBounty::~SetBounty() {
  // @@protoc_insertion_point(destructor:gt_msg.SetBounty)
  SharedDtor();
}

void SetBounty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetBounty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBounty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBounty_descriptor_;
}

const SetBounty& SetBounty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

SetBounty* SetBounty::default_instance_ = NULL;

SetBounty* SetBounty::New(::google::protobuf::Arena* arena) const {
  SetBounty* n = new SetBounty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetBounty::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.SetBounty)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetBounty, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetBounty*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bountyindex_, bountytimeleft_);

#undef ZR_HELPER_
#undef ZR_

}

bool SetBounty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.SetBounty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BountyIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bountyindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BountyTimeLeft;
        break;
      }

      // optional int32 BountyTimeLeft = 2;
      case 2: {
        if (tag == 16) {
         parse_BountyTimeLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bountytimeleft_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.SetBounty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.SetBounty)
  return false;
#undef DO_
}

void SetBounty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.SetBounty)
  // optional int32 BountyIndex = 1;
  if (this->bountyindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bountyindex(), output);
  }

  // optional int32 BountyTimeLeft = 2;
  if (this->bountytimeleft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bountytimeleft(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.SetBounty)
}

::google::protobuf::uint8* SetBounty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.SetBounty)
  // optional int32 BountyIndex = 1;
  if (this->bountyindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bountyindex(), target);
  }

  // optional int32 BountyTimeLeft = 2;
  if (this->bountytimeleft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bountytimeleft(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.SetBounty)
  return target;
}

int SetBounty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.SetBounty)
  int total_size = 0;

  // optional int32 BountyIndex = 1;
  if (this->bountyindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bountyindex());
  }

  // optional int32 BountyTimeLeft = 2;
  if (this->bountytimeleft() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bountytimeleft());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBounty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.SetBounty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetBounty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetBounty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.SetBounty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.SetBounty)
    MergeFrom(*source);
  }
}

void SetBounty::MergeFrom(const SetBounty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.SetBounty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.bountyindex() != 0) {
    set_bountyindex(from.bountyindex());
  }
  if (from.bountytimeleft() != 0) {
    set_bountytimeleft(from.bountytimeleft());
  }
}

void SetBounty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.SetBounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBounty::CopyFrom(const SetBounty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.SetBounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBounty::IsInitialized() const {

  return true;
}

void SetBounty::Swap(SetBounty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetBounty::InternalSwap(SetBounty* other) {
  std::swap(bountyindex_, other->bountyindex_);
  std::swap(bountytimeleft_, other->bountytimeleft_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetBounty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBounty_descriptor_;
  metadata.reflection = SetBounty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetBounty

// optional int32 BountyIndex = 1;
void SetBounty::clear_bountyindex() {
  bountyindex_ = 0;
}
 ::google::protobuf::int32 SetBounty::bountyindex() const {
  // @@protoc_insertion_point(field_get:gt_msg.SetBounty.BountyIndex)
  return bountyindex_;
}
 void SetBounty::set_bountyindex(::google::protobuf::int32 value) {
  
  bountyindex_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SetBounty.BountyIndex)
}

// optional int32 BountyTimeLeft = 2;
void SetBounty::clear_bountytimeleft() {
  bountytimeleft_ = 0;
}
 ::google::protobuf::int32 SetBounty::bountytimeleft() const {
  // @@protoc_insertion_point(field_get:gt_msg.SetBounty.BountyTimeLeft)
  return bountytimeleft_;
}
 void SetBounty::set_bountytimeleft(::google::protobuf::int32 value) {
  
  bountytimeleft_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.SetBounty.BountyTimeLeft)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaoFenNotify::kScoreFieldNumber;
const int BaoFenNotify::kMultipleFieldNumber;
const int BaoFenNotify::kFisnNameFieldNumber;
const int BaoFenNotify::kRewordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaoFenNotify::BaoFenNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BaoFenNotify)
}

void BaoFenNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BaoFenNotify::BaoFenNotify(const BaoFenNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BaoFenNotify)
}

void BaoFenNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  multiple_ = 0;
  fisnname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reword_ = 0;
}

BaoFenNotify::~BaoFenNotify() {
  // @@protoc_insertion_point(destructor:gt_msg.BaoFenNotify)
  SharedDtor();
}

void BaoFenNotify::SharedDtor() {
  fisnname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BaoFenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoFenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoFenNotify_descriptor_;
}

const BaoFenNotify& BaoFenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BaoFenNotify* BaoFenNotify::default_instance_ = NULL;

BaoFenNotify* BaoFenNotify::New(::google::protobuf::Arena* arena) const {
  BaoFenNotify* n = new BaoFenNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaoFenNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BaoFenNotify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BaoFenNotify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BaoFenNotify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(multiple_, reword_);
  score_ = GOOGLE_LONGLONG(0);
  fisnname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BaoFenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BaoFenNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Multiple;
        break;
      }

      // optional int32 Multiple = 2;
      case 2: {
        if (tag == 16) {
         parse_Multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FisnName;
        break;
      }

      // optional string FisnName = 3;
      case 3: {
        if (tag == 26) {
         parse_FisnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fisnname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fisnname().data(), this->fisnname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.BaoFenNotify.FisnName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Reword;
        break;
      }

      // optional int32 Reword = 4;
      case 4: {
        if (tag == 32) {
         parse_Reword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reword_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BaoFenNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BaoFenNotify)
  return false;
#undef DO_
}

void BaoFenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BaoFenNotify)
  // optional int64 Score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // optional int32 Multiple = 2;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->multiple(), output);
  }

  // optional string FisnName = 3;
  if (this->fisnname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fisnname().data(), this->fisnname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BaoFenNotify.FisnName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fisnname(), output);
  }

  // optional int32 Reword = 4;
  if (this->reword() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reword(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BaoFenNotify)
}

::google::protobuf::uint8* BaoFenNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BaoFenNotify)
  // optional int64 Score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // optional int32 Multiple = 2;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->multiple(), target);
  }

  // optional string FisnName = 3;
  if (this->fisnname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fisnname().data(), this->fisnname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.BaoFenNotify.FisnName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fisnname(), target);
  }

  // optional int32 Reword = 4;
  if (this->reword() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reword(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BaoFenNotify)
  return target;
}

int BaoFenNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BaoFenNotify)
  int total_size = 0;

  // optional int64 Score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // optional int32 Multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  // optional string FisnName = 3;
  if (this->fisnname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fisnname());
  }

  // optional int32 Reword = 4;
  if (this->reword() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reword());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoFenNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BaoFenNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaoFenNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaoFenNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BaoFenNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BaoFenNotify)
    MergeFrom(*source);
  }
}

void BaoFenNotify::MergeFrom(const BaoFenNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BaoFenNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.fisnname().size() > 0) {

    fisnname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fisnname_);
  }
  if (from.reword() != 0) {
    set_reword(from.reword());
  }
}

void BaoFenNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BaoFenNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoFenNotify::CopyFrom(const BaoFenNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BaoFenNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoFenNotify::IsInitialized() const {

  return true;
}

void BaoFenNotify::Swap(BaoFenNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaoFenNotify::InternalSwap(BaoFenNotify* other) {
  std::swap(score_, other->score_);
  std::swap(multiple_, other->multiple_);
  fisnname_.Swap(&other->fisnname_);
  std::swap(reword_, other->reword_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaoFenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoFenNotify_descriptor_;
  metadata.reflection = BaoFenNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaoFenNotify

// optional int64 Score = 1;
void BaoFenNotify::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BaoFenNotify::score() const {
  // @@protoc_insertion_point(field_get:gt_msg.BaoFenNotify.Score)
  return score_;
}
 void BaoFenNotify::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BaoFenNotify.Score)
}

// optional int32 Multiple = 2;
void BaoFenNotify::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 BaoFenNotify::multiple() const {
  // @@protoc_insertion_point(field_get:gt_msg.BaoFenNotify.Multiple)
  return multiple_;
}
 void BaoFenNotify::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BaoFenNotify.Multiple)
}

// optional string FisnName = 3;
void BaoFenNotify::clear_fisnname() {
  fisnname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BaoFenNotify::fisnname() const {
  // @@protoc_insertion_point(field_get:gt_msg.BaoFenNotify.FisnName)
  return fisnname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaoFenNotify::set_fisnname(const ::std::string& value) {
  
  fisnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.BaoFenNotify.FisnName)
}
 void BaoFenNotify::set_fisnname(const char* value) {
  
  fisnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.BaoFenNotify.FisnName)
}
 void BaoFenNotify::set_fisnname(const char* value, size_t size) {
  
  fisnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.BaoFenNotify.FisnName)
}
 ::std::string* BaoFenNotify::mutable_fisnname() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.BaoFenNotify.FisnName)
  return fisnname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BaoFenNotify::release_fisnname() {
  // @@protoc_insertion_point(field_release:gt_msg.BaoFenNotify.FisnName)
  
  return fisnname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaoFenNotify::set_allocated_fisnname(::std::string* fisnname) {
  if (fisnname != NULL) {
    
  } else {
    
  }
  fisnname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fisnname);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.BaoFenNotify.FisnName)
}

// optional int32 Reword = 4;
void BaoFenNotify::clear_reword() {
  reword_ = 0;
}
 ::google::protobuf::int32 BaoFenNotify::reword() const {
  // @@protoc_insertion_point(field_get:gt_msg.BaoFenNotify.Reword)
  return reword_;
}
 void BaoFenNotify::set_reword(::google::protobuf::int32 value) {
  
  reword_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BaoFenNotify.Reword)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaoFenTake::BaoFenTake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BaoFenTake)
}

void BaoFenTake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BaoFenTake::BaoFenTake(const BaoFenTake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BaoFenTake)
}

void BaoFenTake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BaoFenTake::~BaoFenTake() {
  // @@protoc_insertion_point(destructor:gt_msg.BaoFenTake)
  SharedDtor();
}

void BaoFenTake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaoFenTake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoFenTake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoFenTake_descriptor_;
}

const BaoFenTake& BaoFenTake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BaoFenTake* BaoFenTake::default_instance_ = NULL;

BaoFenTake* BaoFenTake::New(::google::protobuf::Arena* arena) const {
  BaoFenTake* n = new BaoFenTake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaoFenTake::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BaoFenTake)
}

bool BaoFenTake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BaoFenTake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BaoFenTake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BaoFenTake)
  return false;
#undef DO_
}

void BaoFenTake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BaoFenTake)
  // @@protoc_insertion_point(serialize_end:gt_msg.BaoFenTake)
}

::google::protobuf::uint8* BaoFenTake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BaoFenTake)
  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BaoFenTake)
  return target;
}

int BaoFenTake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BaoFenTake)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoFenTake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BaoFenTake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaoFenTake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaoFenTake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BaoFenTake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BaoFenTake)
    MergeFrom(*source);
  }
}

void BaoFenTake::MergeFrom(const BaoFenTake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BaoFenTake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void BaoFenTake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BaoFenTake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoFenTake::CopyFrom(const BaoFenTake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BaoFenTake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoFenTake::IsInitialized() const {

  return true;
}

void BaoFenTake::Swap(BaoFenTake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaoFenTake::InternalSwap(BaoFenTake* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaoFenTake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoFenTake_descriptor_;
  metadata.reflection = BaoFenTake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaoFenTake

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaoFenReward::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaoFenReward::BaoFenReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BaoFenReward)
}

void BaoFenReward::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BaoFenReward::BaoFenReward(const BaoFenReward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BaoFenReward)
}

void BaoFenReward::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
}

BaoFenReward::~BaoFenReward() {
  // @@protoc_insertion_point(destructor:gt_msg.BaoFenReward)
  SharedDtor();
}

void BaoFenReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaoFenReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoFenReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoFenReward_descriptor_;
}

const BaoFenReward& BaoFenReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BaoFenReward* BaoFenReward::default_instance_ = NULL;

BaoFenReward* BaoFenReward::New(::google::protobuf::Arena* arena) const {
  BaoFenReward* n = new BaoFenReward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaoFenReward::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BaoFenReward)
  score_ = GOOGLE_LONGLONG(0);
}

bool BaoFenReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BaoFenReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BaoFenReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BaoFenReward)
  return false;
#undef DO_
}

void BaoFenReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BaoFenReward)
  // optional int64 Score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BaoFenReward)
}

::google::protobuf::uint8* BaoFenReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BaoFenReward)
  // optional int64 Score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BaoFenReward)
  return target;
}

int BaoFenReward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BaoFenReward)
  int total_size = 0;

  // optional int64 Score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoFenReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BaoFenReward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaoFenReward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaoFenReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BaoFenReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BaoFenReward)
    MergeFrom(*source);
  }
}

void BaoFenReward::MergeFrom(const BaoFenReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BaoFenReward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void BaoFenReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BaoFenReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoFenReward::CopyFrom(const BaoFenReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BaoFenReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoFenReward::IsInitialized() const {

  return true;
}

void BaoFenReward::Swap(BaoFenReward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaoFenReward::InternalSwap(BaoFenReward* other) {
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaoFenReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoFenReward_descriptor_;
  metadata.reflection = BaoFenReward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaoFenReward

// optional int64 Score = 1;
void BaoFenReward::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BaoFenReward::score() const {
  // @@protoc_insertion_point(field_get:gt_msg.BaoFenReward.Score)
  return score_;
}
 void BaoFenReward::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BaoFenReward.Score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishInformationToAI::kFrameFieldNumber;
const int FishInformationToAI::kAreasScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishInformationToAI::FishInformationToAI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishInformationToAI)
}

void FishInformationToAI::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishInformationToAI::FishInformationToAI(const FishInformationToAI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishInformationToAI)
}

void FishInformationToAI::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_ = 0;
}

FishInformationToAI::~FishInformationToAI() {
  // @@protoc_insertion_point(destructor:gt_msg.FishInformationToAI)
  SharedDtor();
}

void FishInformationToAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishInformationToAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishInformationToAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishInformationToAI_descriptor_;
}

const FishInformationToAI& FishInformationToAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishInformationToAI* FishInformationToAI::default_instance_ = NULL;

FishInformationToAI* FishInformationToAI::New(::google::protobuf::Arena* arena) const {
  FishInformationToAI* n = new FishInformationToAI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishInformationToAI::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishInformationToAI)
  frame_ = 0;
  areasscore_.Clear();
}

bool FishInformationToAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishInformationToAI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AreasScore;
        break;
      }

      // repeated int32 AreasScore = 2;
      case 2: {
        if (tag == 18) {
         parse_AreasScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_areasscore())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_areasscore())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishInformationToAI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishInformationToAI)
  return false;
#undef DO_
}

void FishInformationToAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishInformationToAI)
  // optional int32 Frame = 1;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // repeated int32 AreasScore = 2;
  if (this->areasscore_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_areasscore_cached_byte_size_);
  }
  for (int i = 0; i < this->areasscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->areasscore(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishInformationToAI)
}

::google::protobuf::uint8* FishInformationToAI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishInformationToAI)
  // optional int32 Frame = 1;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // repeated int32 AreasScore = 2;
  if (this->areasscore_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _areasscore_cached_byte_size_, target);
  }
  for (int i = 0; i < this->areasscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->areasscore(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishInformationToAI)
  return target;
}

int FishInformationToAI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishInformationToAI)
  int total_size = 0;

  // optional int32 Frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  // repeated int32 AreasScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->areasscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->areasscore(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _areasscore_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishInformationToAI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishInformationToAI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishInformationToAI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishInformationToAI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishInformationToAI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishInformationToAI)
    MergeFrom(*source);
  }
}

void FishInformationToAI::MergeFrom(const FishInformationToAI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishInformationToAI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  areasscore_.MergeFrom(from.areasscore_);
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
}

void FishInformationToAI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishInformationToAI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishInformationToAI::CopyFrom(const FishInformationToAI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishInformationToAI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishInformationToAI::IsInitialized() const {

  return true;
}

void FishInformationToAI::Swap(FishInformationToAI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishInformationToAI::InternalSwap(FishInformationToAI* other) {
  std::swap(frame_, other->frame_);
  areasscore_.UnsafeArenaSwap(&other->areasscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishInformationToAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishInformationToAI_descriptor_;
  metadata.reflection = FishInformationToAI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishInformationToAI

// optional int32 Frame = 1;
void FishInformationToAI::clear_frame() {
  frame_ = 0;
}
 ::google::protobuf::int32 FishInformationToAI::frame() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishInformationToAI.Frame)
  return frame_;
}
 void FishInformationToAI::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishInformationToAI.Frame)
}

// repeated int32 AreasScore = 2;
int FishInformationToAI::areasscore_size() const {
  return areasscore_.size();
}
void FishInformationToAI::clear_areasscore() {
  areasscore_.Clear();
}
 ::google::protobuf::int32 FishInformationToAI::areasscore(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishInformationToAI.AreasScore)
  return areasscore_.Get(index);
}
 void FishInformationToAI::set_areasscore(int index, ::google::protobuf::int32 value) {
  areasscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:gt_msg.FishInformationToAI.AreasScore)
}
 void FishInformationToAI::add_areasscore(::google::protobuf::int32 value) {
  areasscore_.Add(value);
  // @@protoc_insertion_point(field_add:gt_msg.FishInformationToAI.AreasScore)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishInformationToAI::areasscore() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishInformationToAI.AreasScore)
  return areasscore_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishInformationToAI::mutable_areasscore() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishInformationToAI.AreasScore)
  return &areasscore_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedFishAppear::kFishIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedFishAppear::RedFishAppear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.RedFishAppear)
}

void RedFishAppear::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RedFishAppear::RedFishAppear(const RedFishAppear& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.RedFishAppear)
}

void RedFishAppear::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fishid_ = 0;
}

RedFishAppear::~RedFishAppear() {
  // @@protoc_insertion_point(destructor:gt_msg.RedFishAppear)
  SharedDtor();
}

void RedFishAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedFishAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedFishAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedFishAppear_descriptor_;
}

const RedFishAppear& RedFishAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

RedFishAppear* RedFishAppear::default_instance_ = NULL;

RedFishAppear* RedFishAppear::New(::google::protobuf::Arena* arena) const {
  RedFishAppear* n = new RedFishAppear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedFishAppear::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.RedFishAppear)
  fishid_ = 0;
}

bool RedFishAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.RedFishAppear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.RedFishAppear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.RedFishAppear)
  return false;
#undef DO_
}

void RedFishAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.RedFishAppear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.RedFishAppear)
}

::google::protobuf::uint8* RedFishAppear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.RedFishAppear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.RedFishAppear)
  return target;
}

int RedFishAppear::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.RedFishAppear)
  int total_size = 0;

  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedFishAppear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.RedFishAppear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RedFishAppear* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RedFishAppear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.RedFishAppear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.RedFishAppear)
    MergeFrom(*source);
  }
}

void RedFishAppear::MergeFrom(const RedFishAppear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.RedFishAppear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
}

void RedFishAppear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.RedFishAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedFishAppear::CopyFrom(const RedFishAppear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.RedFishAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedFishAppear::IsInitialized() const {

  return true;
}

void RedFishAppear::Swap(RedFishAppear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedFishAppear::InternalSwap(RedFishAppear* other) {
  std::swap(fishid_, other->fishid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedFishAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedFishAppear_descriptor_;
  metadata.reflection = RedFishAppear_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedFishAppear

// optional int32 fishId = 1;
void RedFishAppear::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 RedFishAppear::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.RedFishAppear.fishId)
  return fishid_;
}
 void RedFishAppear::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.RedFishAppear.fishId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedFishDisappear::kFishIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedFishDisappear::RedFishDisappear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.RedFishDisappear)
}

void RedFishDisappear::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RedFishDisappear::RedFishDisappear(const RedFishDisappear& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.RedFishDisappear)
}

void RedFishDisappear::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fishid_ = 0;
}

RedFishDisappear::~RedFishDisappear() {
  // @@protoc_insertion_point(destructor:gt_msg.RedFishDisappear)
  SharedDtor();
}

void RedFishDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedFishDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedFishDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedFishDisappear_descriptor_;
}

const RedFishDisappear& RedFishDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

RedFishDisappear* RedFishDisappear::default_instance_ = NULL;

RedFishDisappear* RedFishDisappear::New(::google::protobuf::Arena* arena) const {
  RedFishDisappear* n = new RedFishDisappear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedFishDisappear::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.RedFishDisappear)
  fishid_ = 0;
}

bool RedFishDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.RedFishDisappear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.RedFishDisappear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.RedFishDisappear)
  return false;
#undef DO_
}

void RedFishDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.RedFishDisappear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.RedFishDisappear)
}

::google::protobuf::uint8* RedFishDisappear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.RedFishDisappear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.RedFishDisappear)
  return target;
}

int RedFishDisappear::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.RedFishDisappear)
  int total_size = 0;

  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedFishDisappear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.RedFishDisappear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RedFishDisappear* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RedFishDisappear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.RedFishDisappear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.RedFishDisappear)
    MergeFrom(*source);
  }
}

void RedFishDisappear::MergeFrom(const RedFishDisappear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.RedFishDisappear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
}

void RedFishDisappear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.RedFishDisappear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedFishDisappear::CopyFrom(const RedFishDisappear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.RedFishDisappear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedFishDisappear::IsInitialized() const {

  return true;
}

void RedFishDisappear::Swap(RedFishDisappear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedFishDisappear::InternalSwap(RedFishDisappear* other) {
  std::swap(fishid_, other->fishid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedFishDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedFishDisappear_descriptor_;
  metadata.reflection = RedFishDisappear_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedFishDisappear

// optional int32 fishId = 1;
void RedFishDisappear::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 RedFishDisappear::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.RedFishDisappear.fishId)
  return fishid_;
}
 void RedFishDisappear::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.RedFishDisappear.fishId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigFishAppear::kFishIdFieldNumber;
const int BigFishAppear::kFishTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigFishAppear::BigFishAppear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BigFishAppear)
}

void BigFishAppear::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BigFishAppear::BigFishAppear(const BigFishAppear& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BigFishAppear)
}

void BigFishAppear::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fishid_ = 0;
  fishtype_ = 0;
}

BigFishAppear::~BigFishAppear() {
  // @@protoc_insertion_point(destructor:gt_msg.BigFishAppear)
  SharedDtor();
}

void BigFishAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BigFishAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigFishAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigFishAppear_descriptor_;
}

const BigFishAppear& BigFishAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BigFishAppear* BigFishAppear::default_instance_ = NULL;

BigFishAppear* BigFishAppear::New(::google::protobuf::Arena* arena) const {
  BigFishAppear* n = new BigFishAppear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigFishAppear::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BigFishAppear)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BigFishAppear, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BigFishAppear*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fishid_, fishtype_);

#undef ZR_HELPER_
#undef ZR_

}

bool BigFishAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BigFishAppear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishType;
        break;
      }

      // optional int32 fishType = 2;
      case 2: {
        if (tag == 16) {
         parse_fishType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishtype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BigFishAppear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BigFishAppear)
  return false;
#undef DO_
}

void BigFishAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BigFishAppear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BigFishAppear)
}

::google::protobuf::uint8* BigFishAppear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BigFishAppear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BigFishAppear)
  return target;
}

int BigFishAppear::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BigFishAppear)
  int total_size = 0;

  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishtype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigFishAppear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BigFishAppear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BigFishAppear* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BigFishAppear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BigFishAppear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BigFishAppear)
    MergeFrom(*source);
  }
}

void BigFishAppear::MergeFrom(const BigFishAppear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BigFishAppear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
  if (from.fishtype() != 0) {
    set_fishtype(from.fishtype());
  }
}

void BigFishAppear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BigFishAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigFishAppear::CopyFrom(const BigFishAppear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BigFishAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigFishAppear::IsInitialized() const {

  return true;
}

void BigFishAppear::Swap(BigFishAppear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigFishAppear::InternalSwap(BigFishAppear* other) {
  std::swap(fishid_, other->fishid_);
  std::swap(fishtype_, other->fishtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigFishAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigFishAppear_descriptor_;
  metadata.reflection = BigFishAppear_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigFishAppear

// optional int32 fishId = 1;
void BigFishAppear::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 BigFishAppear::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.BigFishAppear.fishId)
  return fishid_;
}
 void BigFishAppear::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BigFishAppear.fishId)
}

// optional int32 fishType = 2;
void BigFishAppear::clear_fishtype() {
  fishtype_ = 0;
}
 ::google::protobuf::int32 BigFishAppear::fishtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.BigFishAppear.fishType)
  return fishtype_;
}
 void BigFishAppear::set_fishtype(::google::protobuf::int32 value) {
  
  fishtype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BigFishAppear.fishType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigFishDisappear::kFishIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigFishDisappear::BigFishDisappear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.BigFishDisappear)
}

void BigFishDisappear::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BigFishDisappear::BigFishDisappear(const BigFishDisappear& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.BigFishDisappear)
}

void BigFishDisappear::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fishid_ = 0;
}

BigFishDisappear::~BigFishDisappear() {
  // @@protoc_insertion_point(destructor:gt_msg.BigFishDisappear)
  SharedDtor();
}

void BigFishDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BigFishDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigFishDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigFishDisappear_descriptor_;
}

const BigFishDisappear& BigFishDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

BigFishDisappear* BigFishDisappear::default_instance_ = NULL;

BigFishDisappear* BigFishDisappear::New(::google::protobuf::Arena* arena) const {
  BigFishDisappear* n = new BigFishDisappear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigFishDisappear::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.BigFishDisappear)
  fishid_ = 0;
}

bool BigFishDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.BigFishDisappear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.BigFishDisappear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.BigFishDisappear)
  return false;
#undef DO_
}

void BigFishDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.BigFishDisappear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.BigFishDisappear)
}

::google::protobuf::uint8* BigFishDisappear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.BigFishDisappear)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.BigFishDisappear)
  return target;
}

int BigFishDisappear::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.BigFishDisappear)
  int total_size = 0;

  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigFishDisappear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.BigFishDisappear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BigFishDisappear* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BigFishDisappear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.BigFishDisappear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.BigFishDisappear)
    MergeFrom(*source);
  }
}

void BigFishDisappear::MergeFrom(const BigFishDisappear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.BigFishDisappear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
}

void BigFishDisappear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.BigFishDisappear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigFishDisappear::CopyFrom(const BigFishDisappear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.BigFishDisappear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigFishDisappear::IsInitialized() const {

  return true;
}

void BigFishDisappear::Swap(BigFishDisappear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigFishDisappear::InternalSwap(BigFishDisappear* other) {
  std::swap(fishid_, other->fishid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigFishDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigFishDisappear_descriptor_;
  metadata.reflection = BigFishDisappear_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigFishDisappear

// optional int32 fishId = 1;
void BigFishDisappear::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 BigFishDisappear::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.BigFishDisappear.fishId)
  return fishid_;
}
 void BigFishDisappear::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.BigFishDisappear.fishId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIHeartBeat::AIHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.AIHeartBeat)
}

void AIHeartBeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AIHeartBeat::AIHeartBeat(const AIHeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.AIHeartBeat)
}

void AIHeartBeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AIHeartBeat::~AIHeartBeat() {
  // @@protoc_insertion_point(destructor:gt_msg.AIHeartBeat)
  SharedDtor();
}

void AIHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIHeartBeat_descriptor_;
}

const AIHeartBeat& AIHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

AIHeartBeat* AIHeartBeat::default_instance_ = NULL;

AIHeartBeat* AIHeartBeat::New(::google::protobuf::Arena* arena) const {
  AIHeartBeat* n = new AIHeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.AIHeartBeat)
}

bool AIHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.AIHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.AIHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.AIHeartBeat)
  return false;
#undef DO_
}

void AIHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.AIHeartBeat)
  // @@protoc_insertion_point(serialize_end:gt_msg.AIHeartBeat)
}

::google::protobuf::uint8* AIHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.AIHeartBeat)
  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.AIHeartBeat)
  return target;
}

int AIHeartBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.AIHeartBeat)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.AIHeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AIHeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AIHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.AIHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.AIHeartBeat)
    MergeFrom(*source);
  }
}

void AIHeartBeat::MergeFrom(const AIHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.AIHeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void AIHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.AIHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIHeartBeat::CopyFrom(const AIHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.AIHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIHeartBeat::IsInitialized() const {

  return true;
}

void AIHeartBeat::Swap(AIHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIHeartBeat::InternalSwap(AIHeartBeat* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIHeartBeat_descriptor_;
  metadata.reflection = AIHeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIHeartBeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishTest::kFishIdFieldNumber;
const int FishTest::kFishTypeFieldNumber;
const int FishTest::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishTest::FishTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishTest)
}

void FishTest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::gt_msg::Vec2*>(&::gt_msg::Vec2::default_instance());
}

FishTest::FishTest(const FishTest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishTest)
}

void FishTest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fishid_ = 0;
  fishtype_ = 0;
  position_ = NULL;
}

FishTest::~FishTest() {
  // @@protoc_insertion_point(destructor:gt_msg.FishTest)
  SharedDtor();
}

void FishTest::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void FishTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishTest_descriptor_;
}

const FishTest& FishTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishTest* FishTest::default_instance_ = NULL;

FishTest* FishTest::New(::google::protobuf::Arena* arena) const {
  FishTest* n = new FishTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishTest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishTest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FishTest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FishTest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fishid_, fishtype_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool FishTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fishType;
        break;
      }

      // optional int32 fishType = 2;
      case 2: {
        if (tag == 16) {
         parse_fishType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishtype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .gt_msg.Vec2 position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishTest)
  return false;
#undef DO_
}

void FishTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishTest)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishtype(), output);
  }

  // optional .gt_msg.Vec2 position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishTest)
}

::google::protobuf::uint8* FishTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishTest)
  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishtype(), target);
  }

  // optional .gt_msg.Vec2 position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishTest)
  return target;
}

int FishTest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishTest)
  int total_size = 0;

  // optional int32 fishId = 1;
  if (this->fishid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishid());
  }

  // optional int32 fishType = 2;
  if (this->fishtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fishtype());
  }

  // optional .gt_msg.Vec2 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishTest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishTest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishTest)
    MergeFrom(*source);
  }
}

void FishTest::MergeFrom(const FishTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishTest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fishid() != 0) {
    set_fishid(from.fishid());
  }
  if (from.fishtype() != 0) {
    set_fishtype(from.fishtype());
  }
  if (from.has_position()) {
    mutable_position()->::gt_msg::Vec2::MergeFrom(from.position());
  }
}

void FishTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishTest::CopyFrom(const FishTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishTest::IsInitialized() const {

  return true;
}

void FishTest::Swap(FishTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishTest::InternalSwap(FishTest* other) {
  std::swap(fishid_, other->fishid_);
  std::swap(fishtype_, other->fishtype_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishTest_descriptor_;
  metadata.reflection = FishTest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishTest

// optional int32 fishId = 1;
void FishTest::clear_fishid() {
  fishid_ = 0;
}
 ::google::protobuf::int32 FishTest::fishid() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishTest.fishId)
  return fishid_;
}
 void FishTest::set_fishid(::google::protobuf::int32 value) {
  
  fishid_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishTest.fishId)
}

// optional int32 fishType = 2;
void FishTest::clear_fishtype() {
  fishtype_ = 0;
}
 ::google::protobuf::int32 FishTest::fishtype() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishTest.fishType)
  return fishtype_;
}
 void FishTest::set_fishtype(::google::protobuf::int32 value) {
  
  fishtype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishTest.fishType)
}

// optional .gt_msg.Vec2 position = 3;
bool FishTest::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void FishTest::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::gt_msg::Vec2& FishTest::position() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishTest.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::gt_msg::Vec2* FishTest::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::gt_msg::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:gt_msg.FishTest.position)
  return position_;
}
::gt_msg::Vec2* FishTest::release_position() {
  // @@protoc_insertion_point(field_release:gt_msg.FishTest.position)
  
  ::gt_msg::Vec2* temp = position_;
  position_ = NULL;
  return temp;
}
void FishTest::set_allocated_position(::gt_msg::Vec2* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gt_msg.FishTest.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishGroupTest::kFrameNowFieldNumber;
const int FishGroupTest::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishGroupTest::FishGroupTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.FishGroupTest)
}

void FishGroupTest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FishGroupTest::FishGroupTest(const FishGroupTest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.FishGroupTest)
}

void FishGroupTest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  framenow_ = 0;
}

FishGroupTest::~FishGroupTest() {
  // @@protoc_insertion_point(destructor:gt_msg.FishGroupTest)
  SharedDtor();
}

void FishGroupTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishGroupTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishGroupTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishGroupTest_descriptor_;
}

const FishGroupTest& FishGroupTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

FishGroupTest* FishGroupTest::default_instance_ = NULL;

FishGroupTest* FishGroupTest::New(::google::protobuf::Arena* arena) const {
  FishGroupTest* n = new FishGroupTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishGroupTest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.FishGroupTest)
  framenow_ = 0;
  group_.Clear();
}

bool FishGroupTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.FishGroupTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frameNow = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framenow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // repeated .gt_msg.FishTest group = 2;
      case 2: {
        if (tag == 18) {
         parse_group:
          DO_(input->IncrementRecursionDepth());
         parse_loop_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_group;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.FishGroupTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.FishGroupTest)
  return false;
#undef DO_
}

void FishGroupTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.FishGroupTest)
  // optional int32 frameNow = 1;
  if (this->framenow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->framenow(), output);
  }

  // repeated .gt_msg.FishTest group = 2;
  for (unsigned int i = 0, n = this->group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.FishGroupTest)
}

::google::protobuf::uint8* FishGroupTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.FishGroupTest)
  // optional int32 frameNow = 1;
  if (this->framenow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->framenow(), target);
  }

  // repeated .gt_msg.FishTest group = 2;
  for (unsigned int i = 0, n = this->group_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->group(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.FishGroupTest)
  return target;
}

int FishGroupTest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.FishGroupTest)
  int total_size = 0;

  // optional int32 frameNow = 1;
  if (this->framenow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->framenow());
  }

  // repeated .gt_msg.FishTest group = 2;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishGroupTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.FishGroupTest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FishGroupTest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FishGroupTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.FishGroupTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.FishGroupTest)
    MergeFrom(*source);
  }
}

void FishGroupTest::MergeFrom(const FishGroupTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.FishGroupTest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  group_.MergeFrom(from.group_);
  if (from.framenow() != 0) {
    set_framenow(from.framenow());
  }
}

void FishGroupTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.FishGroupTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishGroupTest::CopyFrom(const FishGroupTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.FishGroupTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishGroupTest::IsInitialized() const {

  return true;
}

void FishGroupTest::Swap(FishGroupTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishGroupTest::InternalSwap(FishGroupTest* other) {
  std::swap(framenow_, other->framenow_);
  group_.UnsafeArenaSwap(&other->group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishGroupTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishGroupTest_descriptor_;
  metadata.reflection = FishGroupTest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishGroupTest

// optional int32 frameNow = 1;
void FishGroupTest::clear_framenow() {
  framenow_ = 0;
}
 ::google::protobuf::int32 FishGroupTest::framenow() const {
  // @@protoc_insertion_point(field_get:gt_msg.FishGroupTest.frameNow)
  return framenow_;
}
 void FishGroupTest::set_framenow(::google::protobuf::int32 value) {
  
  framenow_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.FishGroupTest.frameNow)
}

// repeated .gt_msg.FishTest group = 2;
int FishGroupTest::group_size() const {
  return group_.size();
}
void FishGroupTest::clear_group() {
  group_.Clear();
}
const ::gt_msg::FishTest& FishGroupTest::group(int index) const {
  // @@protoc_insertion_point(field_get:gt_msg.FishGroupTest.group)
  return group_.Get(index);
}
::gt_msg::FishTest* FishGroupTest::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:gt_msg.FishGroupTest.group)
  return group_.Mutable(index);
}
::gt_msg::FishTest* FishGroupTest::add_group() {
  // @@protoc_insertion_point(field_add:gt_msg.FishGroupTest.group)
  return group_.Add();
}
::google::protobuf::RepeatedPtrField< ::gt_msg::FishTest >*
FishGroupTest::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:gt_msg.FishGroupTest.group)
  return &group_;
}
const ::google::protobuf::RepeatedPtrField< ::gt_msg::FishTest >&
FishGroupTest::group() const {
  // @@protoc_insertion_point(field_list:gt_msg.FishGroupTest.group)
  return group_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedPackRequest::RedPackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.RedPackRequest)
}

void RedPackRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RedPackRequest::RedPackRequest(const RedPackRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.RedPackRequest)
}

void RedPackRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RedPackRequest::~RedPackRequest() {
  // @@protoc_insertion_point(destructor:gt_msg.RedPackRequest)
  SharedDtor();
}

void RedPackRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedPackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPackRequest_descriptor_;
}

const RedPackRequest& RedPackRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

RedPackRequest* RedPackRequest::default_instance_ = NULL;

RedPackRequest* RedPackRequest::New(::google::protobuf::Arena* arena) const {
  RedPackRequest* n = new RedPackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedPackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.RedPackRequest)
}

bool RedPackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.RedPackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.RedPackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.RedPackRequest)
  return false;
#undef DO_
}

void RedPackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.RedPackRequest)
  // @@protoc_insertion_point(serialize_end:gt_msg.RedPackRequest)
}

::google::protobuf::uint8* RedPackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.RedPackRequest)
  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.RedPackRequest)
  return target;
}

int RedPackRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.RedPackRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.RedPackRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RedPackRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RedPackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.RedPackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.RedPackRequest)
    MergeFrom(*source);
  }
}

void RedPackRequest::MergeFrom(const RedPackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.RedPackRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void RedPackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.RedPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPackRequest::CopyFrom(const RedPackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.RedPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPackRequest::IsInitialized() const {

  return true;
}

void RedPackRequest::Swap(RedPackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedPackRequest::InternalSwap(RedPackRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedPackRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPackRequest_descriptor_;
  metadata.reflection = RedPackRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedPackRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedPackFromServer::kJsonTypeFieldNumber;
const int RedPackFromServer::kJsonDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedPackFromServer::RedPackFromServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.RedPackFromServer)
}

void RedPackFromServer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RedPackFromServer::RedPackFromServer(const RedPackFromServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.RedPackFromServer)
}

void RedPackFromServer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jsontype_ = 0;
  jsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RedPackFromServer::~RedPackFromServer() {
  // @@protoc_insertion_point(destructor:gt_msg.RedPackFromServer)
  SharedDtor();
}

void RedPackFromServer::SharedDtor() {
  jsondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RedPackFromServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPackFromServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPackFromServer_descriptor_;
}

const RedPackFromServer& RedPackFromServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

RedPackFromServer* RedPackFromServer::default_instance_ = NULL;

RedPackFromServer* RedPackFromServer::New(::google::protobuf::Arena* arena) const {
  RedPackFromServer* n = new RedPackFromServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedPackFromServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.RedPackFromServer)
  jsontype_ = 0;
  jsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RedPackFromServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.RedPackFromServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 jsonType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jsontype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_jsonData;
        break;
      }

      // optional string jsonData = 2;
      case 2: {
        if (tag == 18) {
         parse_jsonData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsondata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsondata().data(), this->jsondata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.RedPackFromServer.jsonData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.RedPackFromServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.RedPackFromServer)
  return false;
#undef DO_
}

void RedPackFromServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.RedPackFromServer)
  // optional int32 jsonType = 1;
  if (this->jsontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jsontype(), output);
  }

  // optional string jsonData = 2;
  if (this->jsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsondata().data(), this->jsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.RedPackFromServer.jsonData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->jsondata(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.RedPackFromServer)
}

::google::protobuf::uint8* RedPackFromServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.RedPackFromServer)
  // optional int32 jsonType = 1;
  if (this->jsontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jsontype(), target);
  }

  // optional string jsonData = 2;
  if (this->jsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsondata().data(), this->jsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.RedPackFromServer.jsonData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->jsondata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.RedPackFromServer)
  return target;
}

int RedPackFromServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.RedPackFromServer)
  int total_size = 0;

  // optional int32 jsonType = 1;
  if (this->jsontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jsontype());
  }

  // optional string jsonData = 2;
  if (this->jsondata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jsondata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPackFromServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.RedPackFromServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RedPackFromServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RedPackFromServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.RedPackFromServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.RedPackFromServer)
    MergeFrom(*source);
  }
}

void RedPackFromServer::MergeFrom(const RedPackFromServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.RedPackFromServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.jsontype() != 0) {
    set_jsontype(from.jsontype());
  }
  if (from.jsondata().size() > 0) {

    jsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
}

void RedPackFromServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.RedPackFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPackFromServer::CopyFrom(const RedPackFromServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.RedPackFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPackFromServer::IsInitialized() const {

  return true;
}

void RedPackFromServer::Swap(RedPackFromServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedPackFromServer::InternalSwap(RedPackFromServer* other) {
  std::swap(jsontype_, other->jsontype_);
  jsondata_.Swap(&other->jsondata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedPackFromServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPackFromServer_descriptor_;
  metadata.reflection = RedPackFromServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedPackFromServer

// optional int32 jsonType = 1;
void RedPackFromServer::clear_jsontype() {
  jsontype_ = 0;
}
 ::google::protobuf::int32 RedPackFromServer::jsontype() const {
  // @@protoc_insertion_point(field_get:gt_msg.RedPackFromServer.jsonType)
  return jsontype_;
}
 void RedPackFromServer::set_jsontype(::google::protobuf::int32 value) {
  
  jsontype_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.RedPackFromServer.jsonType)
}

// optional string jsonData = 2;
void RedPackFromServer::clear_jsondata() {
  jsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RedPackFromServer::jsondata() const {
  // @@protoc_insertion_point(field_get:gt_msg.RedPackFromServer.jsonData)
  return jsondata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RedPackFromServer::set_jsondata(const ::std::string& value) {
  
  jsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.RedPackFromServer.jsonData)
}
 void RedPackFromServer::set_jsondata(const char* value) {
  
  jsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.RedPackFromServer.jsonData)
}
 void RedPackFromServer::set_jsondata(const char* value, size_t size) {
  
  jsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.RedPackFromServer.jsonData)
}
 ::std::string* RedPackFromServer::mutable_jsondata() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.RedPackFromServer.jsonData)
  return jsondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RedPackFromServer::release_jsondata() {
  // @@protoc_insertion_point(field_release:gt_msg.RedPackFromServer.jsonData)
  
  return jsondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RedPackFromServer::set_allocated_jsondata(::std::string* jsondata) {
  if (jsondata != NULL) {
    
  } else {
    
  }
  jsondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsondata);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.RedPackFromServer.jsonData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedPackFromClient::kJsonDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedPackFromClient::RedPackFromClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.RedPackFromClient)
}

void RedPackFromClient::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RedPackFromClient::RedPackFromClient(const RedPackFromClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.RedPackFromClient)
}

void RedPackFromClient::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RedPackFromClient::~RedPackFromClient() {
  // @@protoc_insertion_point(destructor:gt_msg.RedPackFromClient)
  SharedDtor();
}

void RedPackFromClient::SharedDtor() {
  jsondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RedPackFromClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPackFromClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPackFromClient_descriptor_;
}

const RedPackFromClient& RedPackFromClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

RedPackFromClient* RedPackFromClient::default_instance_ = NULL;

RedPackFromClient* RedPackFromClient::New(::google::protobuf::Arena* arena) const {
  RedPackFromClient* n = new RedPackFromClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedPackFromClient::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.RedPackFromClient)
  jsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RedPackFromClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.RedPackFromClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string jsonData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsondata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsondata().data(), this->jsondata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.RedPackFromClient.jsonData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.RedPackFromClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.RedPackFromClient)
  return false;
#undef DO_
}

void RedPackFromClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.RedPackFromClient)
  // optional string jsonData = 1;
  if (this->jsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsondata().data(), this->jsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.RedPackFromClient.jsonData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jsondata(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.RedPackFromClient)
}

::google::protobuf::uint8* RedPackFromClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.RedPackFromClient)
  // optional string jsonData = 1;
  if (this->jsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsondata().data(), this->jsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.RedPackFromClient.jsonData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jsondata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.RedPackFromClient)
  return target;
}

int RedPackFromClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.RedPackFromClient)
  int total_size = 0;

  // optional string jsonData = 1;
  if (this->jsondata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jsondata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPackFromClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.RedPackFromClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RedPackFromClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RedPackFromClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.RedPackFromClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.RedPackFromClient)
    MergeFrom(*source);
  }
}

void RedPackFromClient::MergeFrom(const RedPackFromClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.RedPackFromClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.jsondata().size() > 0) {

    jsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
}

void RedPackFromClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.RedPackFromClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPackFromClient::CopyFrom(const RedPackFromClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.RedPackFromClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPackFromClient::IsInitialized() const {

  return true;
}

void RedPackFromClient::Swap(RedPackFromClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedPackFromClient::InternalSwap(RedPackFromClient* other) {
  jsondata_.Swap(&other->jsondata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedPackFromClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPackFromClient_descriptor_;
  metadata.reflection = RedPackFromClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedPackFromClient

// optional string jsonData = 1;
void RedPackFromClient::clear_jsondata() {
  jsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RedPackFromClient::jsondata() const {
  // @@protoc_insertion_point(field_get:gt_msg.RedPackFromClient.jsonData)
  return jsondata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RedPackFromClient::set_jsondata(const ::std::string& value) {
  
  jsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.RedPackFromClient.jsonData)
}
 void RedPackFromClient::set_jsondata(const char* value) {
  
  jsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.RedPackFromClient.jsonData)
}
 void RedPackFromClient::set_jsondata(const char* value, size_t size) {
  
  jsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.RedPackFromClient.jsonData)
}
 ::std::string* RedPackFromClient::mutable_jsondata() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.RedPackFromClient.jsonData)
  return jsondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RedPackFromClient::release_jsondata() {
  // @@protoc_insertion_point(field_release:gt_msg.RedPackFromClient.jsonData)
  
  return jsondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RedPackFromClient::set_allocated_jsondata(::std::string* jsondata) {
  if (jsondata != NULL) {
    
  } else {
    
  }
  jsondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsondata);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.RedPackFromClient.jsonData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerEditOperateRusult::kResultCodeFieldNumber;
const int ServerEditOperateRusult::kResultMessgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerEditOperateRusult::ServerEditOperateRusult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.ServerEditOperateRusult)
}

void ServerEditOperateRusult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServerEditOperateRusult::ServerEditOperateRusult(const ServerEditOperateRusult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.ServerEditOperateRusult)
}

void ServerEditOperateRusult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultcode_ = 0;
  resultmessge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServerEditOperateRusult::~ServerEditOperateRusult() {
  // @@protoc_insertion_point(destructor:gt_msg.ServerEditOperateRusult)
  SharedDtor();
}

void ServerEditOperateRusult::SharedDtor() {
  resultmessge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerEditOperateRusult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerEditOperateRusult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerEditOperateRusult_descriptor_;
}

const ServerEditOperateRusult& ServerEditOperateRusult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

ServerEditOperateRusult* ServerEditOperateRusult::default_instance_ = NULL;

ServerEditOperateRusult* ServerEditOperateRusult::New(::google::protobuf::Arena* arena) const {
  ServerEditOperateRusult* n = new ServerEditOperateRusult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerEditOperateRusult::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.ServerEditOperateRusult)
  resultcode_ = 0;
  resultmessge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerEditOperateRusult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.ServerEditOperateRusult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultMessge;
        break;
      }

      // optional string resultMessge = 2;
      case 2: {
        if (tag == 18) {
         parse_resultMessge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmessge()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultmessge().data(), this->resultmessge().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.ServerEditOperateRusult.resultMessge"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.ServerEditOperateRusult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.ServerEditOperateRusult)
  return false;
#undef DO_
}

void ServerEditOperateRusult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.ServerEditOperateRusult)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional string resultMessge = 2;
  if (this->resultmessge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessge().data(), this->resultmessge().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ServerEditOperateRusult.resultMessge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmessge(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.ServerEditOperateRusult)
}

::google::protobuf::uint8* ServerEditOperateRusult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.ServerEditOperateRusult)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional string resultMessge = 2;
  if (this->resultmessge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessge().data(), this->resultmessge().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.ServerEditOperateRusult.resultMessge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmessge(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.ServerEditOperateRusult)
  return target;
}

int ServerEditOperateRusult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.ServerEditOperateRusult)
  int total_size = 0;

  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  // optional string resultMessge = 2;
  if (this->resultmessge().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmessge());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerEditOperateRusult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.ServerEditOperateRusult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerEditOperateRusult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerEditOperateRusult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.ServerEditOperateRusult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.ServerEditOperateRusult)
    MergeFrom(*source);
  }
}

void ServerEditOperateRusult::MergeFrom(const ServerEditOperateRusult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.ServerEditOperateRusult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
  if (from.resultmessge().size() > 0) {

    resultmessge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmessge_);
  }
}

void ServerEditOperateRusult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.ServerEditOperateRusult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerEditOperateRusult::CopyFrom(const ServerEditOperateRusult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.ServerEditOperateRusult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerEditOperateRusult::IsInitialized() const {

  return true;
}

void ServerEditOperateRusult::Swap(ServerEditOperateRusult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerEditOperateRusult::InternalSwap(ServerEditOperateRusult* other) {
  std::swap(resultcode_, other->resultcode_);
  resultmessge_.Swap(&other->resultmessge_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerEditOperateRusult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerEditOperateRusult_descriptor_;
  metadata.reflection = ServerEditOperateRusult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerEditOperateRusult

// optional int32 resultCode = 1;
void ServerEditOperateRusult::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 ServerEditOperateRusult::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.ServerEditOperateRusult.resultCode)
  return resultcode_;
}
 void ServerEditOperateRusult::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.ServerEditOperateRusult.resultCode)
}

// optional string resultMessge = 2;
void ServerEditOperateRusult::clear_resultmessge() {
  resultmessge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServerEditOperateRusult::resultmessge() const {
  // @@protoc_insertion_point(field_get:gt_msg.ServerEditOperateRusult.resultMessge)
  return resultmessge_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerEditOperateRusult::set_resultmessge(const ::std::string& value) {
  
  resultmessge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.ServerEditOperateRusult.resultMessge)
}
 void ServerEditOperateRusult::set_resultmessge(const char* value) {
  
  resultmessge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.ServerEditOperateRusult.resultMessge)
}
 void ServerEditOperateRusult::set_resultmessge(const char* value, size_t size) {
  
  resultmessge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.ServerEditOperateRusult.resultMessge)
}
 ::std::string* ServerEditOperateRusult::mutable_resultmessge() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.ServerEditOperateRusult.resultMessge)
  return resultmessge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerEditOperateRusult::release_resultmessge() {
  // @@protoc_insertion_point(field_release:gt_msg.ServerEditOperateRusult.resultMessge)
  
  return resultmessge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerEditOperateRusult::set_allocated_resultmessge(::std::string* resultmessge) {
  if (resultmessge != NULL) {
    
  } else {
    
  }
  resultmessge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmessge);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.ServerEditOperateRusult.resultMessge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompetitionRusult::kResultCodeFieldNumber;
const int CompetitionRusult::kResultMessageFieldNumber;
const int CompetitionRusult::kWinnerFieldNumber;
const int CompetitionRusult::kWinScoreFieldNumber;
const int CompetitionRusult::kRedpackSumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompetitionRusult::CompetitionRusult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.CompetitionRusult)
}

void CompetitionRusult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompetitionRusult::CompetitionRusult(const CompetitionRusult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.CompetitionRusult)
}

void CompetitionRusult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultcode_ = 0;
  resultmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winner_ = 0;
  winscore_ = GOOGLE_LONGLONG(0);
  redpacksum_ = 0;
}

CompetitionRusult::~CompetitionRusult() {
  // @@protoc_insertion_point(destructor:gt_msg.CompetitionRusult)
  SharedDtor();
}

void CompetitionRusult::SharedDtor() {
  resultmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CompetitionRusult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompetitionRusult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompetitionRusult_descriptor_;
}

const CompetitionRusult& CompetitionRusult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

CompetitionRusult* CompetitionRusult::default_instance_ = NULL;

CompetitionRusult* CompetitionRusult::New(::google::protobuf::Arena* arena) const {
  CompetitionRusult* n = new CompetitionRusult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompetitionRusult::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.CompetitionRusult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompetitionRusult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompetitionRusult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resultcode_, redpacksum_);
  resultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CompetitionRusult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.CompetitionRusult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultMessage;
        break;
      }

      // optional string resultMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_resultMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultmessage().data(), this->resultmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gt_msg.CompetitionRusult.resultMessage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Winner;
        break;
      }

      // optional int32 Winner = 3;
      case 3: {
        if (tag == 24) {
         parse_Winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WinScore;
        break;
      }

      // optional int64 WinScore = 4;
      case 4: {
        if (tag == 32) {
         parse_WinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winscore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RedpackSum;
        break;
      }

      // optional int32 RedpackSum = 5;
      case 5: {
        if (tag == 40) {
         parse_RedpackSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redpacksum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.CompetitionRusult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.CompetitionRusult)
  return false;
#undef DO_
}

void CompetitionRusult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.CompetitionRusult)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), this->resultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.CompetitionRusult.resultMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmessage(), output);
  }

  // optional int32 Winner = 3;
  if (this->winner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winner(), output);
  }

  // optional int64 WinScore = 4;
  if (this->winscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winscore(), output);
  }

  // optional int32 RedpackSum = 5;
  if (this->redpacksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->redpacksum(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.CompetitionRusult)
}

::google::protobuf::uint8* CompetitionRusult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.CompetitionRusult)
  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmessage().data(), this->resultmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gt_msg.CompetitionRusult.resultMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmessage(), target);
  }

  // optional int32 Winner = 3;
  if (this->winner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winner(), target);
  }

  // optional int64 WinScore = 4;
  if (this->winscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->winscore(), target);
  }

  // optional int32 RedpackSum = 5;
  if (this->redpacksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->redpacksum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.CompetitionRusult)
  return target;
}

int CompetitionRusult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.CompetitionRusult)
  int total_size = 0;

  // optional int32 resultCode = 1;
  if (this->resultcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resultcode());
  }

  // optional string resultMessage = 2;
  if (this->resultmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmessage());
  }

  // optional int32 Winner = 3;
  if (this->winner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winner());
  }

  // optional int64 WinScore = 4;
  if (this->winscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->winscore());
  }

  // optional int32 RedpackSum = 5;
  if (this->redpacksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redpacksum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompetitionRusult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.CompetitionRusult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompetitionRusult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompetitionRusult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.CompetitionRusult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.CompetitionRusult)
    MergeFrom(*source);
  }
}

void CompetitionRusult::MergeFrom(const CompetitionRusult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.CompetitionRusult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resultcode() != 0) {
    set_resultcode(from.resultcode());
  }
  if (from.resultmessage().size() > 0) {

    resultmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmessage_);
  }
  if (from.winner() != 0) {
    set_winner(from.winner());
  }
  if (from.winscore() != 0) {
    set_winscore(from.winscore());
  }
  if (from.redpacksum() != 0) {
    set_redpacksum(from.redpacksum());
  }
}

void CompetitionRusult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.CompetitionRusult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompetitionRusult::CopyFrom(const CompetitionRusult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.CompetitionRusult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompetitionRusult::IsInitialized() const {

  return true;
}

void CompetitionRusult::Swap(CompetitionRusult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompetitionRusult::InternalSwap(CompetitionRusult* other) {
  std::swap(resultcode_, other->resultcode_);
  resultmessage_.Swap(&other->resultmessage_);
  std::swap(winner_, other->winner_);
  std::swap(winscore_, other->winscore_);
  std::swap(redpacksum_, other->redpacksum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompetitionRusult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompetitionRusult_descriptor_;
  metadata.reflection = CompetitionRusult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompetitionRusult

// optional int32 resultCode = 1;
void CompetitionRusult::clear_resultcode() {
  resultcode_ = 0;
}
 ::google::protobuf::int32 CompetitionRusult::resultcode() const {
  // @@protoc_insertion_point(field_get:gt_msg.CompetitionRusult.resultCode)
  return resultcode_;
}
 void CompetitionRusult::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CompetitionRusult.resultCode)
}

// optional string resultMessage = 2;
void CompetitionRusult::clear_resultmessage() {
  resultmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CompetitionRusult::resultmessage() const {
  // @@protoc_insertion_point(field_get:gt_msg.CompetitionRusult.resultMessage)
  return resultmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompetitionRusult::set_resultmessage(const ::std::string& value) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gt_msg.CompetitionRusult.resultMessage)
}
 void CompetitionRusult::set_resultmessage(const char* value) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gt_msg.CompetitionRusult.resultMessage)
}
 void CompetitionRusult::set_resultmessage(const char* value, size_t size) {
  
  resultmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gt_msg.CompetitionRusult.resultMessage)
}
 ::std::string* CompetitionRusult::mutable_resultmessage() {
  
  // @@protoc_insertion_point(field_mutable:gt_msg.CompetitionRusult.resultMessage)
  return resultmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CompetitionRusult::release_resultmessage() {
  // @@protoc_insertion_point(field_release:gt_msg.CompetitionRusult.resultMessage)
  
  return resultmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompetitionRusult::set_allocated_resultmessage(::std::string* resultmessage) {
  if (resultmessage != NULL) {
    
  } else {
    
  }
  resultmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmessage);
  // @@protoc_insertion_point(field_set_allocated:gt_msg.CompetitionRusult.resultMessage)
}

// optional int32 Winner = 3;
void CompetitionRusult::clear_winner() {
  winner_ = 0;
}
 ::google::protobuf::int32 CompetitionRusult::winner() const {
  // @@protoc_insertion_point(field_get:gt_msg.CompetitionRusult.Winner)
  return winner_;
}
 void CompetitionRusult::set_winner(::google::protobuf::int32 value) {
  
  winner_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CompetitionRusult.Winner)
}

// optional int64 WinScore = 4;
void CompetitionRusult::clear_winscore() {
  winscore_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CompetitionRusult::winscore() const {
  // @@protoc_insertion_point(field_get:gt_msg.CompetitionRusult.WinScore)
  return winscore_;
}
 void CompetitionRusult::set_winscore(::google::protobuf::int64 value) {
  
  winscore_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CompetitionRusult.WinScore)
}

// optional int32 RedpackSum = 5;
void CompetitionRusult::clear_redpacksum() {
  redpacksum_ = 0;
}
 ::google::protobuf::int32 CompetitionRusult::redpacksum() const {
  // @@protoc_insertion_point(field_get:gt_msg.CompetitionRusult.RedpackSum)
  return redpacksum_;
}
 void CompetitionRusult::set_redpacksum(::google::protobuf::int32 value) {
  
  redpacksum_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.CompetitionRusult.RedpackSum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFishStoreScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFishStoreScore::AddFishStoreScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt_msg.AddFishStoreScore)
}

void AddFishStoreScore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddFishStoreScore::AddFishStoreScore(const AddFishStoreScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt_msg.AddFishStoreScore)
}

void AddFishStoreScore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
}

AddFishStoreScore::~AddFishStoreScore() {
  // @@protoc_insertion_point(destructor:gt_msg.AddFishStoreScore)
  SharedDtor();
}

void AddFishStoreScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFishStoreScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFishStoreScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFishStoreScore_descriptor_;
}

const AddFishStoreScore& AddFishStoreScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gt_5fbuyu_2eproto();
  return *default_instance_;
}

AddFishStoreScore* AddFishStoreScore::default_instance_ = NULL;

AddFishStoreScore* AddFishStoreScore::New(::google::protobuf::Arena* arena) const {
  AddFishStoreScore* n = new AddFishStoreScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFishStoreScore::Clear() {
// @@protoc_insertion_point(message_clear_start:gt_msg.AddFishStoreScore)
  score_ = GOOGLE_LONGLONG(0);
}

bool AddFishStoreScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt_msg.AddFishStoreScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt_msg.AddFishStoreScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt_msg.AddFishStoreScore)
  return false;
#undef DO_
}

void AddFishStoreScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt_msg.AddFishStoreScore)
  // optional int64 score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:gt_msg.AddFishStoreScore)
}

::google::protobuf::uint8* AddFishStoreScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt_msg.AddFishStoreScore)
  // optional int64 score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gt_msg.AddFishStoreScore)
  return target;
}

int AddFishStoreScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gt_msg.AddFishStoreScore)
  int total_size = 0;

  // optional int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFishStoreScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gt_msg.AddFishStoreScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddFishStoreScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFishStoreScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gt_msg.AddFishStoreScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gt_msg.AddFishStoreScore)
    MergeFrom(*source);
  }
}

void AddFishStoreScore::MergeFrom(const AddFishStoreScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gt_msg.AddFishStoreScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void AddFishStoreScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gt_msg.AddFishStoreScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFishStoreScore::CopyFrom(const AddFishStoreScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gt_msg.AddFishStoreScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFishStoreScore::IsInitialized() const {

  return true;
}

void AddFishStoreScore::Swap(AddFishStoreScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFishStoreScore::InternalSwap(AddFishStoreScore* other) {
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFishStoreScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFishStoreScore_descriptor_;
  metadata.reflection = AddFishStoreScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFishStoreScore

// optional int64 score = 1;
void AddFishStoreScore::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AddFishStoreScore::score() const {
  // @@protoc_insertion_point(field_get:gt_msg.AddFishStoreScore.score)
  return score_;
}
 void AddFishStoreScore::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:gt_msg.AddFishStoreScore.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gt_msg

// @@protoc_insertion_point(global_scope)
